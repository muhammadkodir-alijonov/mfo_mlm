create or replace package Ln_Api is
  -------------------------------------------------
  Function Version return varchar2;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение параметров кредита ( заявки, договора ) в сессию
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Init_Params
  (
    Idoc_Id        in number,
    Idoc_Type_Code in varchar2
  );
  Function Get_Current_Folder_Id return integer;

  Function Get_Folder_Id
  (
    Idoc_Type_Code in Dw_Util.Code_t,
    Idoc_Id        in integer
  ) return integer;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает параметр текущей заявки по указанному ключу  ( f.i. Get_Loan_Param( 'Claim_Num' ) )
  *  @iKey - наименование параметра заявки, который хотим получить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Claim_Param
  (
    Ikey   in varchar2,
    Iraise varchar2 := 'Y'
  ) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает параметр текущего договора по указанному ключу  ( f.i. Get_Loan_Param( 'Loan_Num' ) )
  *  @iKey - наименование параметра договора, который хотим получить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Loan_Param(Ikey in varchar2) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Снятие готовности к отправке и отправка запроса в НИКИ при утверждении договора либо изменении его реквизитов
  *  @iLoan_Id            - уникальный номер договора
  *  @iLoan_Add_Edit_Sign - признак регистрации(1)-обновления(2) договора
  *  @return              - лог отправки
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Send_Nk_Request_03_04_05
  (
    Ifolder_Id          in integer := null,
    Iloan_Add_Edit_Sign in integer := 2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Send_Rci_Request_03_04_05
  (
    Ifolder_Id          in integer,
    Iloan_Add_Edit_Sign in integer := 2,
    Isend_Request_Type  in number
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Acc_Change_Log
  (
    Iacc_Type_Code in Ln_Account.Loan_Type_Account%type,
    Iloan_Id       in Ln_Card.Loan_Id%type := null
  ) return sys_refcursor;
  ----------------------------------------------------------------------------------------------------
  Function Get_Rate_Change_Log
  (
    Irate_Type_Code in Ln_Percent_Rate.Perc_Code_Desc%type,
    Iloan_Id        in Ln_Card.Loan_Id%type := null
  ) return sys_refcursor;
  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Rate_Change_Log_New
  (
    Irate_Type_Code in Ln_Percent_Rate.Perc_Code_Desc%type,
    Iloan_Id        in Ln_Card.Loan_Id%type := null
  ) return Ln_Cache.t_Rate_Change_Logs
    pipelined;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает график гашения основного долга для текущего договора
  *  @iIs_Src_Temp - 'N' - считываем данные из таблицы LN_GRAPH_DEBT, иначе из временной таблицы LN_GRAPH_TEMPORARY
  *  @iLoan_Id     - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Graph_Debt
  (
    Iis_Src_Temp in varchar2 := 'N',
    Iloan_Id     in Ln_Card.Loan_Id%type
  ) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает график гашения основных процентов текущего договора
  *  @iIs_Src_Temp - 'N' - считываем данные из таблицы LN_GRAPH_PERC, иначе из временной таблицы LN_GRAPH_TEMPORARY
  *  @iLoan_Id       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Graph_Perc
  (
    Iis_Src_Temp in varchar2 := 'N',
    Iloan_Id     in Ln_Card.Loan_Id%type := null,
    Iperc_Code   in Ln_s_Perc_Code_Desc.Code%type := 'OSN'
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Print_Graph_Debt(Iloan_Id in Ln_Card.Loan_Id%type) return clob;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Печать графика гащения основного долга по конкретному договору
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Print_Graph_Perc
  (
    Iloan_Id   in Ln_Card.Loan_Id%type,
    Iperc_Code in Ln_s_Perc_Code_Desc.Code%type := 'OSN'
  );
  ----------------------------------------------------------------------------------------------------
  Function Get_Card_Data_Jhash(Iloan_Id in integer) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Mode_Actions(Iloan_Id in Ln_Card.Loan_Id%type := null) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Изменение режимов работы кредита
  *  @iLoan_Id                   - уникальный номер договора
  *  @iRed_Date                  - День погашения процентов
  *  @iMode_Perc_Calc            - Код режима начисления основных %% Ln_S_Mode_Perc_Calc
  *  @iSend_To_Perc              - Место аккумулирования начисленных осн. ссудных процентов Ln_S_Send_To_Perc
  *  @iLoan_Delinquency_Control  - Автоматическое слежение за просрочкой ссуды Y-N Ln_S_Yes_No
  *  @iPerc_Delinquency_Control  - Автоматическое слежение за просрочкой процентов Y-N Ln_S_Yes_No
  *  @iPerc_Delinquency_Send_To  - Место аккумулирования начисленных процентов по просроченной ссуде Ln_S_Send_To_Perc
  *  @iPerc_Gashenie_Control     - Автоматическое гашение процентов Y-N Ln_S_Yes_No
  *  @iArrear_Debt_Control       -Автоматическое погашение просроченного долга (Y,N)
  *  @iMainDebtControl           - Автоматическое гашение основного долга по графику (YES, NO)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Set_Mode_Actions
  (
    Iloan_Id                   in Ln_Card.Loan_Id%type := null,
    Ired_Date                  in Ln_Mode_Actions.Red_Date%type,
    Imode_Perc_Calc            in Ln_Mode_Actions.Mode_Perc_Calc%type,
    Isend_To_Perc              in Ln_Mode_Actions.Send_To_Perc%type,
    Iloan_Delinquency_Control  in Ln_Mode_Actions.Loan_Delinquency_Control%type,
    Iperc_Delinquency_Control  in Ln_Mode_Actions.Perc_Delinquency_Control%type,
    Iperc_Delinquency_Send_To  in Ln_Mode_Actions.Perc_Delinquency_Send_To%type,
    Iperc_Gashenie_Control     in Ln_Mode_Actions.Perc_Gashenie_Control%type,
    Iarrear_Debt_Control       in Ln_Mode_Actions.Arrear_Debt_Control%type,
    Imain_Debt_Control         in Ln_Mode_Actions.Main_Debt_Control%type,
    Imode_Pers_Calc_Unusedloan in Ln_Mode_Actions.Mode_Pers_Calc_Unusedloan%type,
    Icalc_Period               in Ln_Mode_Actions.Calc_Period%type,
    Igraph_Calc_Type           in Ln_Mode_Actions.Graph_Calc_Type%type
  );

  ----------------------------------------------------------------------------------------------------
  Function Get_Claim_Data_As_Jhash(Iclaim_Id in number) return varchar2;
  --HISTORY
  ----------------------------------------------------------------------------------------------------
  Function Get_Claim_His_As_Jhash
  (
    Iclaim_Id    in number,
    Idate_Modify varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Operation_Name(Ioperation_Code in Ln_s_Operations.Code%type)
    return Ln_s_Operations.Name%type;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     возвращает некоторые данных о конкретном кредите
  *  @iLoan_Id - уникальный номер кредита
  *  @oClient_Code - код клиента
  *  @oClient_Name - наименование клиента
  *  @oLoan_Number - порядковый номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Loan_Data
  (
    Iloan_Id     in Ln_Card.Loan_Id%type := null,
    Oclient_Code out Client_Current.Code%type,
    Oclient_Name out Client_Current.Name%type,
    Oloan_Number out Ln_Card.Loan_Number%type
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    получение признака индивидуальности выполнения операции для кредита
  *  @iOperation_Code  - код операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operation_Is_Single(Ioperation_Code in Ln_s_Operations.Code%type) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Вызов операции
  *  @iOperation_Code  - код операции
  *  @iLoan_Id         - код кредита
  *  @iHashParams      - список параметров
  *  @iIs_Preview_Mode - ON - режим предпросмотра операций
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Operation_Action
  (
    Ioperation_Code  Ln_s_Operations.Code%type,
    Iloan_Id         in Ln_Card.Loan_Id%type,
    Ihashparams      Hashtable,
    Iis_Preview_Mode varchar2
  );
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Вызов операции
  *  @iOperation_Code  - код операции
  *  @iLoan_Id         - массив уникальных номеров кредитов
  *  @iParams_Code     - список кодов параметров
  *  @iParams_Value    - список значений параметров
  *  @iIs_Preview_Mode - ON - режим предпросмотра операций
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Operation_Action
  (
    Omessage         out varchar2,
    Ioperation_Code  in Ln_s_Operations.Code%type,
    Iloan_Id         in Array_Varchar2,
    Iparams_Code     in Array_Varchar2,
    Iparams_Value    in Array_Varchar2,
    Iis_Preview_Mode in varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает курсор со списком параметров для операции
  *  @iOperation_Code  - код операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operation_Params(Ioperation_Code in Ln_s_Operations.Code%type) return sys_refcursor;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает кнопки по действиям в данной операции
  *  @iOperation_Code - код операции
  *  @iAction_code    - код действия
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Graph_Operation_Button_Inf
  (
    Ioperation_Code in varchar2,
    Iaction_Code    in varchar2
  ) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Необходимость причины для изменения графика гашения
  *  @iLoan_Id - уникальный номер кредита
  *  @return   - если причина необходима, то 'Y', иначе 'N'
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Need_Decide(Iloan_Id in Ln_Card.Loan_Id%type) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение графика погашения основного долга
  *  @iDecide_Num        - номер решения
  *  @iDecide_Date       - дата  решения
  *  @iDecide_Department - Орган банка
  *  @iDecide_Reason     - Причина решения
  *  @iObligate_Number   - № обязательства
  *  @iDate_Redemp       - дата гашения
  *  @iSum_Redemp        - сумма гашения
  *  @iSign_Long         - признак основной или пролонгирован
  *  @iLoan_Id           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Save_Graph_Debt
  (
    Idecide_Num        varchar2,
    Idecide_Date       varchar2,
    Idecide_Department varchar2,
    Idecide_Reason     varchar2,
    Iobligate_Number   Array_Varchar2,
    Idate_Redemp       Array_Varchar2,
    Isum_Redemp        Array_Varchar2,
    Isign_Long         Array_Varchar2,
    Iloan_Id           in Ln_Card.Loan_Id%type
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает данные договора
  *  @oOpen_Date                    - дата открытия договора
  *  @oClose_Date                   - дата закрытия договора
  *  @oDebt_Redemp_Privilege_Period - льготный период по гашению основного долга
  *  @oPerc_Redemp_Privilege_Period - льготный период по гашению основных процентов
  *  @iLoan_Id                      - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Graph_Loan_Data
  (
    Oopen_Date                    out varchar2,
    Oclose_Date                   out varchar2,
    Odebt_Redemp_Privilege_Period out varchar2,
    Operc_Redemp_Privilege_Period out varchar2,
    --oDebt_Graph_Calc_Type_Name     out varchar2,
    --oDebt_Calc_Period_Name         out varchar2,
    --oCalc_Period_Id                out varchar2,
    Iloan_Id in Ln_Card.Loan_Id%type
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Расчет графика погашения основного долга
  *  @iLoan_Id         - уникальный номер кредита
  *  @iDate_Calc       - дата начала расчета
  *  @iPeriod          - период расчета (1 - каждый месяц, 3 - 1 раз в 3 месяца, 6 - 1 раз в 6 месяцев, 12 - 1 рах в 12 месяцев )
  *  @iCheck_Week_End  - учитывать ли выходные дни
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Calc_Graph_Debt
  (
    Iloan_Id        in Ln_Card.Loan_Id%type,
    Idate_Calc      in date,
    Iperiod         in varchar2,
    Icheck_Week_End in varchar2,
    Iperc_Period    in varchar2 := null,
    Iperc_Day_Ret   in varchar2 := null
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Расчет графика погашения процентов
  *  @iLoan_Id        - уникальный номер кредита
  *  @iDateBegin      - дата первого погашения
  *  @iDateEnd        - дата последнего погашения
  *  @iDayRet         - день гашения
  *  @iPeriod         - период расчета ( 0  - 2 раза в месяц, 1 - каждый месяц, 3 - 1 раз в 3 месяца, 6 - 1 раз в 6 месяцев, 12 - 1 раз в год
  *  @iCheck_Week_End - учитывать ли выходные дни
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Calc_Graph_Perc
  (
    Iloan_Id        in Ln_Card.Loan_Id%type,
    Idatebegin      in date,
    Idateend        in date,
    Idayret         in varchar2,
    Iperiod         in varchar2,
    Icheck_Week_End in varchar2,
    Iperc_Code      in varchar2 := 'OSN'
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение графика погашения процентов
  *  @iDecide_Num        - номер решения
  *  @iDecide_Date       - дата  решения
  *  @iDecide_Department - орган банка
  *  @iDecide_Reason     - Причина решения
  *  @iDate_Redemp       - дата гашения
  *  @iSum_Redemp        - сумма гашения
  *  @iLoan_Id           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Save_Graph_Perc
  (
    Idecide_Num        in varchar2,
    Idecide_Date       in varchar2,
    Idecide_Department in varchar2,
    Idecide_Reason     in varchar2,
    Idate_Redemp       in Array_Varchar2,
    Isum_Redemp        in Array_Varchar2,
    Isum_Redemp_Cmp    in Array_Varchar2,
    Iloan_Id           in Ln_Card.Loan_Id%type,
    Iperc_Code         in varchar2 := 'OSN'
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает график гашения основного долга для пролонгации с указанными этапами
  *  @iLoan_Id           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Graph_Prolong
  (
    Iloan_Id   in Ln_Card.Loan_Id%type,
    Idata      in Array_Varchar2,
    Ovariables out varchar2,
    Osumma     out varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     График гашения основного долга для прологации указанного договора
  *  @iLoan_Id           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Graph_Debt_Prolong(Iloan_Id in Ln_Card.Loan_Id%type := null) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Пролонгация основного графика
  *  @oMessage            - возвращаемое сообщение
  *  @iLoan_Id            - уникальный номер кредита
  *  @iAct                - действие PROLONG - пролонгировать, DECIDE - просто внести номер решения
  *  @iDecide_Num         - номер решения
  *  @iDecide_Date        - дата  решения
  *  @iDecide_Department  - Орган банка
  *  @iDecide_Reason      - Причина решения
  *  @iExec_Lead          - Y - выполнять проводки, N не выполнять
  *  @iLead_Sum_Pay       - сумма прологации
  *  @iLead_Purpose       - назначение платежа
  *  @iLead_Sym_Id        - символ платежа
  *  @iLead_Trans_Id      - тип документа
  *  @iLead_Act_Id        - действие
  *  @iEdit_Period_Data   - данные о пролонгированном этапе
  *  @iObligate_Number    - № обязательства
  *  @iDate_Redemp        - дата гашения
  *  @iSum_Redemp         - сумма гашения
  *  @iSign_Long          - признак основной или пролонгирован
  *  @iIs_Preview_Mode    - ON - режим предпросмотра операций
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Prolong
  (
    Omessage             out varchar2,
    Iloan_Id             Ln_Card.Loan_Id%type := null,
    Iact                 varchar2,
    Idecide_Num          varchar2,
    Idecide_Date         varchar2,
    Idecide_Department   varchar2,
    Idecide_Reason       varchar2,
    Iexec_Lead           varchar2,
    Ilead_Sum_Pay        varchar2,
    Ilead_Purpose        varchar2,
    Ilead_Sym_Id         varchar2,
    Ilead_Trans_Id       varchar2,
    Ilead_Act_Id         varchar2,
    Iedit_Period_Data    Array_Varchar2,
    Iobligate_Number     Array_Varchar2,
    Idate_Redemp         Array_Varchar2,
    Isum_Redemp          Array_Varchar2,
    Isign_Long           Array_Varchar2,
    Iis_Preview_Mode     varchar2,
    Ilead_Sum_Pay_Main   varchar2 := null,
    Ilead_Sum_Pay_Arrear varchar2 := null
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Утверждение запроса на сумму в котролях по договорам
  *  @iLoan_Id - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Loan_Confirm_Sum
  (
    Iloan_Id     Ln_Card.Loan_Id%type,
    Isum_Confirm number,
    Iikeystring  varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Возвращает значение параметра CONFIRM_SUM_IK
     Утверждение лимитов с электронно-цифровой подписью из настроек подсистемы
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Confirm_Sum_Ik return Ln_Params.Value%type;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Сумма запрашиваемая в контролях по договорам  в рублях
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Control_Sum_Request(Iloan_Id Ln_Card.Loan_Id%type := null)
    return Ln_Loan_Control_Sum.Sum_Request%type;

  -------------------------------------------------------------------------------------
  Function Get_Balance_Account_Name(Ibalance_Account in varchar2) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Вставка, удаление балансового счета, который будет контролироваться в АРМе ОИ
  *  @iAction   - код действия
  *  @iCode     - код операции по которой нужно отслеживать бал.счета,также должен быть указан как Par_Id в Ln_System
  *  @iBls_Acc  - код балансового счета
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Reaction_Bls_Action
  (
    Iaction  in varchar2,
    Icode    in Ln_Reaction_Bls.Code%type,
    Ibls_Acc in Ln_Reaction_Bls.Bls_Acc%type
  );

  ----------------------------------------------------------------------------------------------------
  Function Get_Emp_Name(Icode Employee_Current.Code%type) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Вставка, удаление сотрудника для возможности утверждать заявки на ГО
  *  @iAction  - код выполняемого действия: 'I' - добавление, 'D'- удаление
  *  @iEmpCode - код сотрудника
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Emp_Confirm_Claim_Action
  (
    Iaction  varchar2,
    Iempcode Ln_Claim_Emp_Confirm.Emp_Code%type
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Сохранение льготных периодов по шифрам кредитования для расчета графиков погашений
  *  @iAction       - код действия: 'I' - добавление, 'D'- удаление, 'U' - изменение
  *  @iPurposeCode  - код шифра кредитования
  *  @iLgot_Dept    - месяцы для осн. долга
  *  @iLgot_Perc    - месяцы для процентов
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Graph_Purpose_Action
  (
    Iaction      varchar2,
    Ipurposecode varchar2,
    Ilgot_Dept   number,
    Ilgot_Perc   number
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   включение / отключение блокировки не гасить/, не списывать осн долг пока есть просроченные проценты
  *  @iLoan_Id  - массив уникальных номеров кредитов
  *  @iLocking  - 0-откл, 1-включить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Locking_Arrear_Perc
  (
    Iloan_Id Array_Varchar2,
    Ilocking Ln_Mode_Actions.Lock_Arrear_Perc%type
  );
  -------------------------------------------------------------------------------
  Function Get_Urgency_Options_Html
  (
    Idate_Begin in date,
    Idate_End   in date
  ) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     включение / отключение блокировки для корректировки кредитов
  *  @iLoan_Id  - массив уникальных номеров кредитов
  *  @iLocking  - 0-откл, 1-включить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Locking_Loan
  (
    Iloan_Id Array_Varchar2,
    Ilocking Ln_Card.Locking%type
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Отчет. Движение счетов
  *  @iAccount  - Код счета
  *  @iDateBegin  - Дата от
  *  @iDateEnd  - Дата от
  *  @iDebCred  - 0 -Дебетовые и кредитовые документы
                  1 -Только дебетовые документы
                  2 -Только кредитовые документы
  
  *  @iCorrAcc  - Счет корреспондента
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Movements_On_Account
  (
    Iaccount   in varchar2,
    Idatebegin in date,
    Idateend   in date,
    Idebcred   in varchar2,
    Icorracc   in varchar2
  ) return Personal_Table;
  ----------------------------------------------------------------------------------------------------
  Function Get_Eco_Sector_Name
  (
    Icode      in Ln_v_Sector.Code%type,
    Iis_Filter integer := 0
  ) return Ln_v_Sector.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Refuse_Reason_Name(Icode in Ln_v_Reason_Refusal.Code%type)
    return Ln_v_Reason_Refusal.Name%type;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Region_Name(Iregion_Code in v_Region.Code%type) return v_Region.Name%type;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Normative_Act_Name(Iact_Code in v_Normative_Legal_Act.Code%type)
    return v_Normative_Legal_Act.Act_Name%type;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Client_Type_Name(Iclient_Type_Code in v_Type_Client.Code%type)
    return v_Type_Client.Name%type;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Foreign_Organization_Name
  (
    Icredit_Source_Code        in varchar2,
    Iforeign_Organization_Code in varchar2
  ) return varchar2;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Contract_Type(Icode in varchar2) return varchar2;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_District_Name
  (
    Iregion_Code   in v_District.Region_Code%type,
    Idistrict_Code in v_District.Code%type
  ) return v_District.Name%type;
  ------------------------------------------------------------------------------------------
  Function Get_Bank_Name(Ibank_Code in varchar2) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Loan_Purpose_Name
  (
    Icode      in Ln_v_Purpose_Cipher.Code%type,
    Iis_Filter integer := 0
  ) return Ln_v_Purpose_Cipher.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Term_Type_Name(Icode in v_Credit_Time.Code%type) return v_Credit_Time.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Currency_Name(Icode in v_Currency.Code%type) return v_Currency.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Borrower_Name(Icode in Ln_v_Borrower.All_Code%type) return Ln_v_Borrower.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Credit_Type_Name
  (
    Icode      in Ln_v_Credit_Types.Code%type,
    Iis_Filter integer := 0
  ) return Ln_v_Credit_Types.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Client_Name
  (
    Iclient_Code in varchar2,
    Ifilial_Code in varchar2 := null
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Acc_Condition_Name(Pacc_Code in Accounts.Code%type) return v_Acc_Condition.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Perc_Rate_Desc_Name(Icode in Ln_v_Perc_Code_Desc.Code%type)
    return Ln_v_Perc_Code_Desc.Name%type;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Инициализация. Очистка временной таблицы и т.д.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Sys_Param_Init;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает массив значений для указанного параметра
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Sys_Param_Value_List
  (
    Icode        varchar2,
    Ifilial_Code varchar2,
    Iread_Mode   varchar2 := 'N'
  ) return Array_Varchar2;
  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Function Get_Sys_Param_Value_List_l
  (
    Icode       varchar2,
    Ilocal_Code varchar2,
    Iread_Mode  varchar2 := 'N'
  ) return Array_Varchar2;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Добавляет во временную таблицу значение массива
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Sys_Param_List_Add
  (
    Icode        varchar2,
    Ivalue       varchar2,
    Ifilial_Code varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Удаляет из временной таблицы значение массива
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Sys_Param_List_Del
  (
    Icode        varchar2,
    Ivalue       varchar2,
    Ifilial_Code varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение параметров настройки системы ( изменение )
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Save_Params
  (
    Igroup_Code in varchar2,
    Iparams     in Array_Varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Изменение кода состояния кредита при проведении документа
  *  @iLoan_Id - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Set_Loan_State(Iloan_Id in Ln_Card.Loan_Id%type);

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Добавление, удаление, изменение счетов
  *  @iLoan_Id           - уникальный номер договора
  *  @iAction            - выполняемая операция ( 'ACCOUNT_CREATE'- добавление
                                                , 'ACCOUNT_DELETE' - удаление
                                                , 'ACCOUNT_UPDATE' - изменение
                                                , 'ACCOUNT_REASSIGNMENT' - переназначение )
  *  @iAccount_Code      - 20-ти значный счет
  *  @iAccount_Type_Code - тип счета
  *  @iDate_Validate     - дата начала действия счета
  *  @iPreview_Mode      - режим просмотра - просмотр данных до сохранения и после
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Account_Action
  (
    Iloan_Id           in Ln_Card.Loan_Id%type,
    Iaction            in varchar2,
    Iaccount_Code      in Array_Varchar2,
    Iaccount_Type_Code in Array_Varchar2,
    Idate_Validate     in Array_Varchar2,
    Ipreview_Mode      in varchar2,
    Oresult_Message    out varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Возвращает наименование типа счета и соответствующую ему маску счета
  *  @iLoan_Id         - уникальный номер договора
  *  @iAcc_Type_Code   - код типа счета
  *  @oAcc_Type_Name   - наименование типа счета
  *  @oAcc_Type_Mask   - маска счета
  *  @oIs_Acc_Editable - может ли пользователь изменять маску счета на клиентской части('Y', 'N')
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Acc_Type_Params
  (
    Iloan_Id         in Ln_Card.Loan_Id%type := null,
    Iacc_Type_Code   in varchar2,
    Oacc_Type_Name   out varchar2,
    Oacc_Type_Mask   out varchar2,
    Ois_Acc_Editable out varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает счета, типы счетов текущего договора
  *  @iAcc_Type_Code - массив типов ссудных счетов
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Acc_4_Upd(Iacc_Type_Codes in Array_Varchar2) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает все счета определенного типа для текущего кредита
  *  @iAcc_Type_Code - тип ссудного счета
  *  @iLoan_Id       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Acc_4_Reassign
  (
    Iacc_Type_Code in Ln_v_Account_Types.Code%type,
    Iloan_Id       in Ln_Card.Loan_Id%type := null
  ) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Добавление, удаление, изменение процентных ставок
  *  @iLoan_Id           - уникальный номер договора
  *  @iAction            - выполняемая операция ( 'PERCENT_RATE_ADD'    - добавление
                                                , 'PERCENT_RATE_DELETE' - удаление
                                                , 'PERCENT_RATE_UPDATE' - изменение )
  *  @iPerc_Rates      - процентные ставки
  *  @iRate_Desc_Codes      - вид процентной ставки (основная %% ставка и т.п.)
  *  @iRate_Type_Codes - тип процентной ставки (фиксированная и т.п.)
  *  @iValue_Dates     - дата начала действия проц ставки
  *  @iOld_Value_Dates - при PERCENT_RATE_UPDATE - дата начала действия проц. ставки до изменения
  *  @iDescriptions    - комментарии
  *  @iPreview_Mode    - режим просмотра - просмотр данных до сохранения(ON) и после(OFF)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Percent_Rate_Action
  (
    Iloan_Id            in Ln_Card.Loan_Id%type := null,
    Iaction             in varchar2,
    Iperc_Rates         in Array_Varchar2,
    Isumma              in Array_Number,
    Irate_Desc_Codes    in Array_Varchar2,
    Irate_Type_Codes    in Array_Varchar2,
    Ivalue_Dates        in Array_Varchar2,
    Iold_Value_Dates    in Array_Varchar2,
    Idescriptions       in Array_Varchar2,
    Iis_Modes           in Array_Varchar2,
    Icombined_Perc_Rate in Array_Varchar2,
    Ipreview_Mode       in varchar2,
    Oresult_Message     out varchar2
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает тип процентной ставки за просрочку
  *  @iCode  - код типа
  *  @return - наименование типа
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Perc_Rate_Type_Name
  (
    Icode    in Ln_v_Perc_Rate_Type.Code%type,
    Iis_Mode varchar2
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Client_Subject_Code
  (
    Iclient_Code in varchar2,
    Ifilial_Code in varchar2 := Setup.Filial_Code,
    Iclient_Id   in number := null
  ) return Ln_Claim.Client_Type%type;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает все процентные ставки определенного типа для текущего кредита
  *  @iPerc_Rate_Desc_Code - тип процентной ставки
  *  @iValueDate           - дата начала действия проц. ставки
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Perc_Rates
  (
    Iperc_Rate_Desc_Code in varchar2,
    Ivaluedate           in date
  ) return varchar2;

  ----------------------------------------------------------------------------------------------------
  Function Get_Credit_Source_Name
  (
    Icode      in Ln_v_Credit_Src.Code%type,
    Iis_Filter integer := 0
  ) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Organ_Directive_Name(Icode in v_Organ_Direct.Code%type)
    return v_Organ_Direct.Name%type;
  ----------------------------------------------------------------------------------------------------
  Function Get_Claim_Data_4_Creating_Card(Iclaim_Id in Ln_Claim.Claim_Id%type) return varchar2;

  --==============================================================
  -- вставка id операции в темп таблицу для отображения протокола
  --==============================================================
  Procedure Set_Operations_Id(Iid in Ln_Operations.Id%type /*,
                                                                                                                                                                                        Ibranchid in Ln_Operations.Branch_Id%type*/);

  --===========================================
  -- Установка глобальной переменной id кредита
  --===========================================
  Procedure Set_Gloan_Id(Iloan_Id Ln_Card.Loan_Id%type);

  ----------------------------------------------------------------------------------------------------
  Procedure Delete_Folder
  (
    Idoc_Type_Code in Dw_Util.Code_t,
    Idoc_Id        in integer
  );

  ----------------------------------------------------------------------------------------------------
  Procedure Close_Loan(Iloan_Id in Ln_Card.Loan_Id%type);

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает операции заданной группы
  *  @iGroup_Code - код группы операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operations(Igroup_Code in varchar2) return varchar2;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает контроли реквизитов договора
  *  @iAction_Code - код контроля
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Card_Requisites_Checks(Iaction_Code in Ln_Check_Card.Md%type) return varchar2;
  -------------------------------------------------------------------------------
  Function Get_Guarantee_Options_Html(Iclass_Quality in v_Credit_Class_Quality.Code%type)
    return varchar2;
  -------------------------------------------------------------------------------
  Function Get_Loan_Id(Iclaim_Id in Ln_Claim.Claim_Id%type) return Ln_Card.Loan_Id%type;
  -------------------------------------------------------------------------------
  Function Get_Loan_State(Iclaim_Id in Ln_Claim.Claim_Id%type) return integer;
  -------------------------------------------------------------------------------
  Function Is_Hamkor_Bank return varchar2;
  -------------------------------------------------------------------------------
  Procedure Set_Sign_Ebrd(Iloans_Ids in Array_Number);
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Обновление параметров контролей реквизитов договора
  *  @i_md - код контроля
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Update_Card_Params_Checks
  (
    i_Md                in Ln_Check_Card.Md%type,
    i_Card_Type         in Ln_Check_Card.Card_Type%type,
    i_Loan_Type         in Ln_Check_Card.Loan_Type%type,
    i_Client_Code       in Ln_Check_Card.Client_Code%type,
    i_Claim_Number      in Ln_Check_Card.Claim_Number%type,
    i_Loan_Number       in Ln_Check_Card.Loan_Number%type,
    i_Loan_Line_Number  in Ln_Check_Card.Loan_Line_Num%type,
    i_Committee_Number  in Ln_Check_Card.Committee_Number%type,
    i_Date_Committee    in Ln_Check_Card.Date_Committee%type,
    i_Contract_Code     in Ln_Check_Card.Contract_Code%type,
    i_Contract_Date     in Ln_Check_Card.Contract_Date%type,
    i_Contract_Desc     in Ln_Check_Card.Contract_Desc%type,
    i_Agr_Num_Notarial  in Ln_Check_Card.Agr_Num_Notarial%type,
    i_Agr_Date_Notarial in Ln_Check_Card.Agr_Date_Notarial%type,
    i_Doc_Notarial_Num  in Ln_Check_Card.Doc_Notarial_Num%type,
    i_Doc_Notarial_Date in Ln_Check_Card.Doc_Notarial_Date%type,
    i_Doc_Gover_Num     in Ln_Check_Card.Doc_Gover_Num%type,
    i_Doc_Gover_Date    in Ln_Check_Card.Doc_Gover_Date%type,
    i_Open_Date         in Ln_Check_Card.Open_Date%type,
    i_Close_Date        in Ln_Check_Card.Close_Date%type,
    i_Currency          in Ln_Check_Card.Currency%type,
    i_Summ_Loan         in Ln_Check_Card.Summ_Loan%type,
    i_Days_In_Year      in Ln_Check_Card.Days_In_Year%type,
    i_Grace_Period      in Ln_Check_Card.Grace_Period%type,
    i_Fc_Summ           in Ln_Check_Card.Fc_Summ%type,
    i_Fc_Desc           in Ln_Check_Card.Fc_Desc%type,
    i_Form_Delivery     in Ln_Check_Card.Form_Delivery%type,
    i_Form_Redemption   in Ln_Check_Card.Form_Redemption%type,
    i_Term_Loan_Type    in Ln_Check_Card.Term_Loan_Type%type,
    i_Eco_Sec           in Ln_Check_Card.Eco_Sec%type,
    i_Purpose_Loan      in Ln_Check_Card.Purpose_Loan%type,
    i_Object_Loan       in Ln_Check_Card.Object_Loan%type,
    i_Guar_Class        in Ln_Check_Card.Guar_Class%type,
    i_Source_Cred       in Ln_Check_Card.Source_Cred%type,
    i_Class_Cred        in Ln_Check_Card.Class_Cred%type,
    i_Class_Quality     in Ln_Check_Card.Class_Quality%type,
    i_Motive_Revising   in Ln_Check_Card.Motive_Revising%type,
    i_Date_Revising     in Ln_Check_Card.Date_Revising%type,
    i_Sign_Delivery     in Ln_Check_Card.Sign_Delivery%type,
    i_Manager_Name      in Ln_Check_Card.Manager_Name%type,
    i_Percent_Rate      in Ln_Check_Card.Percent_Rate%type,
    i_Red_Debt_Month    in Ln_Check_Card.Red_Debt_Month%type,
    i_Red_Perc_Month    in Ln_Check_Card.Red_Perc_Month%type,
    i_Graph_Debt        in Ln_Check_Card.Graph_Debt%type
  );

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает данные по указанным проводкам для печати
  *  @iCollection_ID - массив уникальных номеров проводок
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Leads(Icollection_Id in Array_Number) return sys_refcursor;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает дату, начиная с которой берем все заявки
  ***  Утвержденные заявки могут существовать без договоров до 45 дней с момента регистрации в НИКИ,
  * именно эти заявки и будем показывать на клиентской части
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Active_Claims_From_Date return varchar2;

  ----------------------------------------------------------------------------------------------------
  Function Set_Loans_Normal(Iloans_Ids in Array_Number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Adjust_Loans_States(Iloans_Ids in Array_Number) return varchar2;
  ----------------------------------------------------------------------------------------------------
  Function Get_Folder_Doc_Id
  (
    Ifolder_Id     in integer,
    Idoc_Type_Code in Dw_Util.Code_t
  ) return integer;
  -------------------------------------------------------------------------------
  Procedure Send_Nk_Request_01
  (
    Iclaim_Id in Ln_Claim.Claim_Id%type,
    Oreport   out varchar2
  );
  -------------------------------------------------------------------------------
  Procedure Send_Nk_Request_02
  (
    Iclaim_Id in Ln_Claim.Claim_Id%type,
    Oreport   out varchar2
  );

  -------------------------------------------------------------------------------
  Function Is_Agricultural_Loans_Used return boolean;
  -------------------------------------------------------------------------------
  Function Is_Limits_Control_Used return boolean;
  -------------------------------------------------------------------------------
  Procedure Request_Crediting_Limits(Iloan_Id in number);
  -------------------------------------------------------------------------------
  Function Get_Card_From_History_As_Hash
  (
    Iloan_Id     in Ln_Card_His.Loan_Id%type,
    Idate_Modify in varchar2
  ) return varchar2;
  -------------------------------------------------------------------------------
  Function Get_Card_As_Refcursor
  (
    Iloan_Id     in Ln_Card.Loan_Id%type,
    Idate_Modify in varchar2
  ) return sys_refcursor;
  -------------------------------------------------------------------------------
  Function Get_Credit_Src_Refcursor(Iloan_Id in integer) return sys_refcursor;
  -------------------------------------------------------------------------------
  Function Get_Claim_As_Refcursor(Iclaim_Id in Ln_Claim.Claim_Id%type) return sys_refcursor;
  -------------------------------------------------------------------------------

  Function Get_Param_Group_Access_List(Irole_Code in number) return Ln_Setting.Param_Group_Nt
    pipelined;
  -------------------------------------------------------------------------------

  Procedure Set_Access_To_Param_Groups
  (
    Irole_Code    in integer,
    Iparam_Groups in Array_Varchar2
  );
  -------------------------------------------------------------------------------
  Function Get_Sys_Param
  (
    Iset_Error   in varchar2,
    Icode        in Ln_Params.Code%type,
    Ifilial_Code in Ln_Params.Filial_Code%type := Setup.Get_Headermfo
  ) return Ln_Params.Value%type;
  ----------------------------------------------------------------------------------------------
  Procedure Add_Commission
  (
    Imin_Summ       in number,
    Imax_Summ       in number,
    Icommission_Sum in number,
    Isum_Type       in varchar2
  );
  ---------------------------------------------------------------------------------------------
  Procedure Edit_Commission
  (
    Imin_Summ       in number,
    Imax_Summ       in number,
    Icommission_Sum in number,
    Isum_Type       in varchar2,
    Inum_Row        in number
  );
  ---------------------------------------------------------------------------------------------
  Procedure Delete_Commission(Inum_Row in number);
  ---------------------------------------------------------------------------------------------
  Function Model_Loan_Conversion(Request Hashtable) return varchar2;
  ---------------------------------------------------------------------------------------------
  Procedure Save_Loan_Conversion(Request Hashtable);
  ---------------------------------------------------------------------------------------------
  Procedure Save_Acc_Layout_Temlates(Request Hashtable);
  ---------------------------------------------------------------------------------------------
  Function Model_Acc_Layout_Temlates(Request Hashtable) return varchar2;
  ---------------------------------------------------------------------------------------------------
  Function Model_Graph_Revenue(Request Hashtable) return varchar2;
  ---------------------------------------------------------------------------------------------
  Procedure Save_Graph_Revenue(Request Hashtable);
  ---------------------------------------------------------------------------------------------
  Function Model_Bio_Passport_Series return varchar2;
  ---------------------------------------------------------------------------------------------
  Function Check_Loan_Purpose(i_Code varchar2) return varchar2;
  ---------------------------------------------------------------------------------------------
  Function Check_Loan_Type(i_Code varchar2) return varchar2;
  ---------------------------------------------------------------------------------------------
  Function Check_Credit_Source(i_Code varchar2) return varchar2;
  ---------------------------------------------------------------------------------------------
  Function Check_Eco_Sector(i_Code varchar2) return varchar2;
  --Цел кредитларни Выд кредитлар билан боглаш
  Procedure Save_Purpose_With_Loan_Type(Request Hashtable);
  --Цел кредит Выд кредитга бокланган болса 1 кайтади акс холда 0 кайтади
  Function Is_Purpose_With_Loan_Type(i_Purpose_Code varchar2) return varchar2;
  ---------------------------------------------------------------------------------------------
  Procedure Set_Subsystem(i_Module_Code varchar2);
  ---------------------------------------------------------------------------------------------
  Function Get_Acc_Subcoa_Code(Pacc_Code in Accounts.Code%type) return Accounts.Subcoa_Code%type;
  ---------------------------------------------------------------------------------------------
  Function Is_Client_Unique return varchar2;
  ---------------------------------------------------------------------------------------------
  Function Has_Account_Type_In_Card(i_Loan_Id number) return number;
  ---------------------------------------------------------------------------------------------
  Function Is_Between_Acc_Saldo_In_Card(i_Loan_Id number) return number;
  ---------------------------------------------------------------------------------------------

end Ln_Api;
/
create or replace package body Ln_Api is
  ----------------------------------------------------------------------------------------------------
  Function Version return varchar2 is
  begin
    return '08.11.2021';
  end Version;
  ----------------------------------------------------------------------------------------------------
  Function Get_Folder_Doc_Id
  (
    Ifolder_Id     in integer,
    Idoc_Type_Code in Dw_Util.Code_t
  ) return integer is
    v_Doc_Id Dw_Documents.Doc_Id%type;
  begin
    v_Doc_Id := Dw_Util.Get_Folder_Doc_Id(Ifolder_Id, Idoc_Type_Code);
    if Idoc_Type_Code = 'LNCONTRACT' then
      Ln_Init.Set_Loan(v_Doc_Id);
    end if;
    return v_Doc_Id;
  exception
    when No_Data_Found then
      Raise_Application_Error(-20000,
                              case Idoc_Type_Code when ' ' then 'Договор не найден!' when 'LNCLAIM' then
                              'Заявка не найдена!' else 'Документ не найден!' end);
  end Get_Folder_Doc_Id;

  ----------------------------------------------------------------------------------------------------
  Procedure Set_Claim_Data(Iclaim_Id in Ln_Claim.Claim_Id%type);

  ----------------------------------------------------------------------------------------------------
  Function Get_Folder_Id
  (
    Idoc_Type_Code in Dw_Util.Code_t,
    Idoc_Id        in integer
  ) return integer is
  begin
    return Dw_Util.Get_Folder_Id(Idoc_Type_Code, Idoc_Id);
  end Get_Folder_Id;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Удаление кредитной папки
  *  @iDoc_Type_Code - тип документа
  *  @iDoc_Id        - уникальный номер документа
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Delete_Folder
  (
    Idoc_Type_Code in Dw_Util.Code_t,
    Idoc_Id        in integer
  ) is
    Vfolder_Id integer;
  begin
    Vfolder_Id := Get_Folder_Id(Idoc_Type_Code, Idoc_Id);
    Dw_Api.Delete_Folder(Vfolder_Id);
  exception
    when No_Data_Found then
      Ln_Contract.Delete_Claim(Idoc_Id);
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение данных договора в сессию
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Set_Card_Data(Iloan_Id in Ln_Card.Loan_Id%type) is
    v_Filial_Code        Ln_Card.Filial_Code%type;
    v_Local_Code         Ln_Card.Local_Code%type;
    v_Client_Code        Ln_Card.Client_Code%type;
    v_Client_Name        Ln_Card.Client_Name%type;
    v_Loan_Number        Ln_Card.Loan_Number%type;
    v_Claim_Number       Ln_Card.Claim_Number%type;
    v_Claim_Type_Code    Ln_s_Claim_Type.Name%type;
    v_Open_Date          date;
    v_Close_Date         date;
    v_Condition_Code     Ln_s_Loan_Status.Code_Status%type;
    v_Currency_Char_Code varchar2(10);
    v_Amount             number(20, 2);
    v_Nik_Id             Ln_Nik_Card.Nik_Id%type;
    v_Client_Id          Ln_Card.Client_Id%type;
    v_Claim_Id           Ln_Card.Claim_Id%type;
    v_Client_Type        Ln_Claim.Client_Type%type;
  begin
    if Ln_Cache.Loan_Ht is not null then
      return;
    end if;
    --
    select c.Filial_Code,
           c.Local_Code,
           Client_Code,
           Client_Name,
           Loan_Number,
           Claim_Number,
           (select s.Name
              from Ln_s_Claim_Type s
             where s.Code = c.Card_Type),
           Open_Date,
           Close_Date,
           Condition,
           Currency.Get_Char_Code(c.Currency),
           c.Summ_Loan / Ln_Service.Get_Currency_Scale(c.Currency),
           (select Nik_Id
              from Ln_Nik_Card n
             where n.Loan_Id = c.Loan_Id),
           Client_Id,
           Claim_Id,
           (select Cc.Client_Type
              from Ln_Claim Cc
             where Cc.Claim_Id = c.Claim_Id)
      into v_Filial_Code,
           v_Local_Code,
           v_Client_Code,
           v_Client_Name,
           v_Loan_Number,
           v_Claim_Number,
           v_Claim_Type_Code,
           v_Open_Date,
           v_Close_Date,
           v_Condition_Code,
           v_Currency_Char_Code,
           v_Amount,
           v_Nik_Id,
           v_Client_Id,
           v_Claim_Id,
           v_Client_Type
      from Ln_Card c
     where Loan_Id = Iloan_Id;
    /*select t.* into vLoan
      from LN_V_CARD t
     where t.LOAN_ID = iLoan_ID
    ;*/
    Ln_Init.Set_Loan(Iloan_Id);
    Ln_Cache.Loan_Ht := Hashtable();
    Ln_Cache.Loan_Ht.Put('Loan_ID', Iloan_Id);
    Ln_Cache.Loan_Ht.Put('Filial_Code', v_Filial_Code);
    Ln_Cache.Loan_Ht.Put('Local_Code', v_Local_Code);
    Ln_Cache.Loan_Ht.Put('Client_Code', v_Client_Code);
    Ln_Cache.Loan_Ht.Put('Client_Name', v_Client_Name);
    Ln_Cache.Loan_Ht.Put('Loan_Num', v_Loan_Number);
    Ln_Cache.Loan_Ht.Put('Claim_Num', v_Claim_Number);
    Ln_Cache.Loan_Ht.Put('Claim_Type', v_Claim_Type_Code);
    Ln_Cache.Loan_Ht.Put('Open_Date', to_char(v_Open_Date, Ln_Const.Maskdate));
    Ln_Cache.Loan_Ht.Put('Close_Date', to_char(v_Close_Date, Ln_Const.Maskdate));
    Ln_Cache.Loan_Ht.Put('Condition_Code', v_Condition_Code);
    Ln_Cache.Loan_Ht.Put('Currency_Char_Code', v_Currency_Char_Code);
    Ln_Cache.Loan_Ht.Put('Amount', v_Amount);
    Ln_Cache.Loan_Ht.Put('Niki_ID', v_Nik_Id);
    Ln_Cache.Loan_Ht.Put('Client_Id', v_Client_Id);
    --SR
    Ln_Cache.Loan_Ht.Put('Client_Type', v_Client_Type);
    begin
      v_Claim_Id := Dw_Util.Get_Folder_Doc_Id(Ln_Cache.Folder_Id, Ln_Const.Claim_Doc_Type_Code);
      Set_Claim_Data(v_Claim_Id);
    exception
      when No_Data_Found then
        null;
    end;
  exception
    when No_Data_Found then
      Raise_Application_Error(-20000,
                              'Не обнаружен договор с указанным Loan_ID = ' || Iloan_Id || '!');
  end Set_Card_Data;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение данных заявки в сессию
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Set_Claim_Data(Iclaim_Id in Ln_Claim.Claim_Id%type) is
    v_Loan_Id            integer;
    v_Mfo                varchar2(5);
    v_Client_Code        Ln_Claim.Client_Code%type;
    v_Client_Name        Ln_Claim.Client_Name%type;
    v_Claim_Num          Ln_Claim.Claim_Num%type;
    v_Credit_Type_Name   Ln_s_Claim_Type.Name%type;
    v_Begin_Date         date;
    v_Close_Date         date;
    v_Currency_Char_Code varchar2(10);
    v_Amount             number(20, 2);
  begin
    if Ln_Cache.Claim_Ht is not null then
      return;
    end if;
    --
    select c.Filial_Code,
           c.Client_Code,
           Bank.Get_Client_Name(c.Client_Id),
           c.Claim_Num,
           (select s.Name
              from Ln_s_Claim_Type s
             where s.Code = c.Credit_Type),
           c.Begin_Date,
           c.Close_Date,
           (select t.Char_Code
              from s_Currency t
             where t.Code = c.Currency
               and t.Condition = 'A'),
           c.Summ_Claim / (select Ln_Service.Get_Currency_Scale(c.Currency)
                             from Dual)
      into v_Mfo,
           v_Client_Code,
           v_Client_Name,
           v_Claim_Num,
           v_Credit_Type_Name,
           v_Begin_Date,
           v_Close_Date,
           v_Currency_Char_Code,
           v_Amount
      from Ln_Claim c
     where c.Claim_Id = Iclaim_Id;
    --
    Ln_Cache.Claim_Ht := Hashtable();
    Ln_Cache.Claim_Ht.Put('Claim_ID', Iclaim_Id);
    Ln_Cache.Claim_Ht.Put('Filial_Code', v_Mfo);
    Ln_Cache.Claim_Ht.Put('Client_Code', v_Client_Code);
    Ln_Cache.Claim_Ht.Put('Client_Name', v_Client_Name);
    Ln_Cache.Claim_Ht.Put('Claim_Num', v_Claim_Num);
    Ln_Cache.Claim_Ht.Put('Claim_Type', v_Credit_Type_Name);
    Ln_Cache.Claim_Ht.Put('Open_Date', v_Begin_Date);
    Ln_Cache.Claim_Ht.Put('Close_Date', v_Close_Date);
    Ln_Cache.Claim_Ht.Put('Currency_Char_Code', v_Currency_Char_Code);
    Ln_Cache.Claim_Ht.Put('Amount', v_Amount);
    begin
      v_Loan_Id := Dw_Util.Get_Folder_Doc_Id(Ln_Cache.Folder_Id, Ln_Const.Card_Doc_Type_Code);
      Set_Card_Data(v_Loan_Id);
    exception
      when No_Data_Found then
        null;
    end;
  exception
    when No_Data_Found then
      Raise_Application_Error(-20000,
                              'Не обнаружена заявка с указанным ID = ' || Iclaim_Id || '!');
  end Set_Claim_Data;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение параметров кредита ( заявки, договора ) в сессию
  *  @iDoc_ID        - уникальный номер документа ( либо договора, либо заявки)
  *  @iDoc_Type_Code - код документа в документообороте ( для заявки   - 'LNCLAIM'
                                                        , для договора - 'LNCONTRACT' )
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Init_Params
  (
    Idoc_Id        in number,
    Idoc_Type_Code in varchar2
  ) is
    Vdoc_Id integer := Idoc_Id;
  begin
    if Vdoc_Id is null then
      Raise_Application_Error(-20000,
                              'Сначала зайдите в меню "Список договоров" затем выберите необходимый договор.'); --Не передан DOC_ID!
    end if;
  
    begin
      Ln_Cache.Folder_Id := Get_Folder_Id(Idoc_Type_Code, Vdoc_Id);
    exception
      when No_Data_Found then
        Raise_Application_Error(-20000,
                                'Старые кредиты не обрабатываются!');
    end;
  
    Ln_Cache.Claim_Ht := null;
    Ln_Cache.Loan_Ht  := null;
  
    if Idoc_Type_Code = Ln_Const.Claim_Doc_Type_Code then
      Set_Claim_Data(Vdoc_Id);
    
    elsif Idoc_Type_Code = Ln_Const.Card_Doc_Type_Code then
      Set_Card_Data(Vdoc_Id);
    
    else
      Raise_Application_Error(-20000,
                              'Передан неизвестный тип документа ' || Idoc_Type_Code || ' !');
    end if;
  end;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает уникальный номер текущего кредитного дела
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Current_Folder_Id return integer is
  begin
    return Ln_Cache.Folder_Id;
  end Get_Current_Folder_Id;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает параметр текущего договора по указанному ключу  ( f.i. Get_Loan_Param( 'Loan_Num' ) )
  *  @iKey - наименование параметра договора, который хотим получить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Loan_Param(Ikey in varchar2) return varchar2 is
  begin
    --sql_util.trace_text('LN_SET_CARD_DATA',iKey || ' ' || gLoan.get_varchar2( iKey ));
    return Ln_Cache.Loan_Ht.Get_Varchar2(Ikey);
  exception
    when others then
      Raise_Application_Error(-20000, 'Не найден договор!');
  end Get_Loan_Param;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает параметр текущей заявки по указанному ключу  ( f.i. Get_Loan_Param( 'Claim_Num' ) )
  *  @iKey - наименование параметра заявки, который хотим получить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Claim_Param
  (
    Ikey   in varchar2,
    Iraise varchar2 := 'Y'
  ) return varchar2 is
  begin
    if Ln_Cache.Claim_Ht is null or not Ln_Cache.Claim_Ht.Has(Ikey) then
      Em.Raise_Error_If(Iraise = 'Y', 'LN', 'Не найдена заявка!');
      return null;
    end if;
    return Ln_Cache.Claim_Ht.Get_Optional_Varchar2(Ikey);
    --return Ln_Cache.Claim_Ht.get_varchar2( iKey );
    /*exception
    when Others then
      Raise_Application_Error(-20000, 'Не найдена заявка!');*/
  end Get_Claim_Param;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Снятие готовности к отправке и отправка запроса в НИКИ при утверждении договора либо изменении его реквизитов
  *  @iLoan_ID  - уникальный номер договора
  *  @iLoan_Add_Edit_Sign - признак регистрации(1)-обновления(2) договора
  *  @return    - лог отправки
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Send_Nk_Request_03_04_05
  (
    Ifolder_Id          in integer,
    Iloan_Add_Edit_Sign in integer := 2
  ) return varchar2 is
    Vfolder_Id integer;
    Vlog       varchar2(3000);
    Vloan_Id   Ln_Card.Loan_Id%type;
  begin
    Vfolder_Id := Nvl(Ifolder_Id, Get_Current_Folder_Id);
    begin
      Vloan_Id := Dw_Util.Get_Folder_Doc_Id(Vfolder_Id, Ln_Const.Card_Doc_Type_Code);
    exception
      when others then
        return null;
    end;
  
    Ln_Contract.Send_Nk_Request_03_04_05(Vloan_Id, Iloan_Add_Edit_Sign, Vlog);
  
    return Vlog;
  end;

  ------------------------------------------------------------------------------------------------------------------------
  Function Send_Rci_Request_03_04_05
  (
    Ifolder_Id          in integer,
    Iloan_Add_Edit_Sign in integer := 2,
    Isend_Request_Type  in number
  ) return varchar2 is
    Vfolder_Id integer;
    Vlog       varchar2(3000);
    Vloan_Id   Ln_Card.Loan_Id%type;
  begin
    Vfolder_Id := Nvl(Ifolder_Id, Get_Current_Folder_Id);
    begin
      Vloan_Id := Dw_Util.Get_Folder_Doc_Id(Vfolder_Id, Ln_Const.Card_Doc_Type_Code);
    exception
      when others then
        return null;
    end;
    Ln_Contract.Send_Rci_Request_03_04_05(Vloan_Id, Iloan_Add_Edit_Sign, Isend_Request_Type, Vlog);
  
    return Vlog;
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает состояние счета
  *  @pAcc_Code   - код счета
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Acc_Condition_Name(Pacc_Code in Accounts.Code%type) return v_Acc_Condition.Name%type is
    result varchar2(512);
  begin
    if Pacc_Code is null then
      return null;
    end if;
  
    select c.Name
      into result
      from Accounts a, v_Acc_Condition c
     where c.Code = a.Condition
       and a.Code = Pacc_Code;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Acc_Condition_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименовение причины отклонения заявки
  *  @iCode   - код причины отклонения
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Refuse_Reason_Name(Icode in Ln_v_Reason_Refusal.Code%type)
    return Ln_v_Reason_Refusal.Name%type is
    result Ln_v_Reason_Refusal.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from Ln_v_Reason_Refusal s
     where s.Code = Icode;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Refuse_Reason_Name;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Contract_Type(Icode in varchar2) return varchar2 is
    result varchar2(100);
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from Ln_v_Claim_Type s
     where s.Code = Icode;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Contract_Type;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Client_Type_Name(Iclient_Type_Code in v_Type_Client.Code%type)
    return v_Type_Client.Name%type is
    result v_Type_Client.Name%type;
  begin
    if Iclient_Type_Code is null then
      return null;
    end if;
  
    select s.Name
      into result
      from v_Type_Client s
     where s.Code = Iclient_Type_Code;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Client_Type_Name;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Normative_Act_Name(Iact_Code in v_Normative_Legal_Act.Code%type)
    return v_Normative_Legal_Act.Act_Name%type is
    result v_Normative_Legal_Act.Act_Name%type;
  begin
    if Iact_Code is null then
      return null;
    end if;
  
    select s.Act_Name
      into result
      from v_Normative_Legal_Act s
     where s.Code = Iact_Code;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Normative_Act_Name;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Foreign_Organization_Name
  (
    Icredit_Source_Code        in varchar2,
    Iforeign_Organization_Code in varchar2
  ) return varchar2 is
    result v_Foreign_Organization.Name%type;
  begin
    if Icredit_Source_Code is null or Iforeign_Organization_Code is null then
      return null;
    end if;
  
    select s.Name
      into result
      from v_Foreign_Organization s
     where s.Code = Iforeign_Organization_Code
       and s.Credit_Source_Code = Icredit_Source_Code;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Foreign_Organization_Name;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Region_Name(Iregion_Code in v_Region.Code%type) return v_Region.Name%type is
    result v_Region.Name%type;
  begin
    if Iregion_Code is null then
      return null;
    end if;
  
    select t.Name
      into result
      from v_Region t
     where t.Code = Iregion_Code
       and t.Condition = 'A';
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Region_Name;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_District_Name
  (
    Iregion_Code   in v_District.Region_Code%type,
    Idistrict_Code in v_District.Code%type
  ) return v_District.Name%type is
    result v_District.Name%type;
  begin
    if Idistrict_Code is null or Iregion_Code is null then
      return null;
    end if;
  
    select t.Name
      into result
      from v_District t
     where t.Code = Idistrict_Code
       and t.Region_Code = Iregion_Code
       and t.Condition = 'A';
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_District_Name;
  ------------------------------------------------------------------------------------------
  Function Get_Bank_Name(Ibank_Code in varchar2) return varchar2 is
    result varchar2(200);
  begin
    if Ibank_Code is null then
      return null;
    end if;
  
    select t.Name
      into result
      from v_Bank t
     where t.Code = Ibank_Code
       and t.Condition = 'A'
       and t.Active = 'A';
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Bank_Name;
  ------------------------------------------------------------------------------------------------------------------------
  Function Get_Eco_Sector_Name
  (
    Icode      in Ln_v_Sector.Code%type,
    Iis_Filter integer := 0
  ) return Ln_v_Sector.Name%type is
    result Ln_v_Sector.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from Ln_v_Sector s
     where s.Code = Decode(Iis_Filter, 0, Icode, Ln_Api.Check_Eco_Sector(Icode))
       and s.Condition = 'A'
       and s.Kod_Class <> '000';
    return result;
  exception
    when No_Data_Found then
      return null;
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование вышестоящей организации
  *  @iCode  - код организации
  *  @return - наименование организации
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Organ_Directive_Name(Icode in v_Organ_Direct.Code%type)
    return v_Organ_Direct.Name%type is
    result v_Organ_Direct.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from v_Organ_Direct s
     where s.Code = Icode;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Organ_Directive_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование цели кредита по его коду
  *  @iCode  - код цели кредита
  *  @return - наименование цели
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Loan_Purpose_Name
  (
    Icode      in Ln_v_Purpose_Cipher.Code%type,
    Iis_Filter integer := 0
  ) return Ln_v_Purpose_Cipher.Name%type is
    result Ln_v_Purpose_Cipher.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from Ln_v_Purpose_Cipher s
     where s.Code = Decode(Iis_Filter, 0, Icode, Ln_Api.Check_Loan_Purpose(Icode))
       and s.Condition = 'A'
       and s.Code1 <> '00';
    --
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Loan_Purpose_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование источника финансирования
  *  @iCode  - код источника
  *  @return - наименование
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Credit_Source_Name
  (
    Icode      in Ln_v_Credit_Src.Code%type,
    Iis_Filter integer := 0
  ) return varchar2 is
    result varchar2(120);
  begin
    if Icode is null then
      return null;
    end if;
  
    select t.Group_Name || ' - ' || t.Name
      into result
      from Ln_v_Credit_Src t
     where t.Code = Decode(Iis_Filter, 0, Icode, Ln_Api.Check_Credit_Source(Icode));
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Credit_Source_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование типа ссуды по сроку
  *  @iCode  - код типа ссуды по сроку
  *  @return - наименование цели
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Term_Type_Name(Icode in v_Credit_Time.Code%type) return v_Credit_Time.Name%type is
    result v_Credit_Time.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from v_Credit_Time s
     where s.Code = Icode
       and s.Condition = 'A';
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Term_Type_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование валюты по его числовому коду
  *  @iCode  - числовой код валюты
  *  @return - наименование валюты
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Currency_Name(Icode in v_Currency.Code%type) return v_Currency.Name%type is
    result v_Currency.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from v_Currency s
     where s.Code = Icode
       and s.Condition = 'A';
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Currency_Name;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает тип процентной ставки
  *  @iCode  - код типа
  *  @return - наименование типа
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Perc_Rate_Desc_Name(Icode in Ln_v_Perc_Code_Desc.Code%type)
    return Ln_v_Perc_Code_Desc.Name%type is
    Vname Ln_v_Perc_Code_Desc.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into Vname
      from Ln_v_Perc_Code_Desc s
     where s.Code = Icode;
  
    return Vname;
  end Get_Perc_Rate_Desc_Name;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает тип процентной ставки за просрочку
  *  @iCode  - код типа
  *  @return - наименование типа
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Perc_Rate_Type_Name
  (
    Icode    in Ln_v_Perc_Rate_Type.Code%type,
    Iis_Mode varchar2
  ) return varchar2 is
    Vname Ln_v_Perc_Rate_Type.Name%type;
    Vperc Ln_v_Perc_Rate_Type.Curr_Rate%type;
    Vdata j_Array := j_Array();
  begin
    if Icode is null then
      return null;
    end if;
    select s.Name, s.Curr_Rate
      into Vname, Vperc
      from Ln_v_Perc_Rate_Type s
     where s.Code = Icode
       and s.Is_Mode = Iis_Mode;
    Vdata.Push(Vname);
    Vdata.Push(Vperc);
    return Vdata.To_String;
  end Get_Perc_Rate_Type_Name;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование заемщика
  *  @iCode  - код заемщика
  *  @return - наименование
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Borrower_Name(Icode in Ln_v_Borrower.All_Code%type) return Ln_v_Borrower.Name%type is
    result Ln_v_Borrower.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from Ln_v_Borrower s
     where s.All_Code = Icode
       and s.Condition = 'A';
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Borrower_Name;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *  Возвращает наименование "Форма собственности"
  *  @iCode  - код
  *  @return - наименование
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Ownership_Name(Icode in v_Form_Property.Code%type) return v_Form_Property.Name%type is
    result v_Form_Property.Name%type;
  begin
    if Icode is null then
      return null;
    end if;
  
    select s.Name
      into result
      from v_Form_Property s
     where s.Code = Icode
       and s.Condition = 'A';
  
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Ownership_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование вида кредитования
  *  @iCode  - код вида кредитования
  *  @return - наименование
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Credit_Type_Name
  (
    Icode      in Ln_v_Credit_Types.Code%type,
    Iis_Filter integer := 0
  ) return Ln_v_Credit_Types.Name%type is
    result varchar2(200);
    Vdata  j_Array := j_Array();
  begin
    if Icode is null then
      return null;
    end if;
    --
    User_Session.Put_Varchar2('ln_loan_type', Icode);
    --
    select s.Group_Name || ' - ' || s.Name
      into result
      from Ln_v_Credit_Types s
     where s.Code = Decode(Iis_Filter, 0, Icode, Ln_Api.Check_Loan_Type(Icode))
       and s.Condition = 'A';
    Vdata.Push(result);
    return Vdata.To_String;
  exception
    when No_Data_Found then
      return null;
  end Get_Credit_Type_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает наименование клиента
  *  @iClient_Code  - код клиента
  *  @iFilial_Code  - код филиала
  *  @return        - наименование клиента
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Client_Name
  (
    Iclient_Code in varchar2,
    Ifilial_Code in varchar2
  ) return varchar2 is
    Vfilial_Code varchar2(5);
  begin
    Vfilial_Code := Nvl(Ifilial_Code, Setup.Get_Filial_Code);
  
    return Bank.Get_Client_Name(Iclient_Code, 'N', Vfilial_Code);
  end;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает курсор с историей изменений ссудных счетов
  *  @iAcc_Type_Code - тип ссудного счета
  *  @iLoan_ID       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Acc_Change_Log
  (
    Iacc_Type_Code in Ln_Account.Loan_Type_Account%type,
    Iloan_Id       in Ln_Card.Loan_Id%type
  ) return sys_refcursor is
    result   sys_refcursor;
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    open result for
      select to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify,
             t.Account_Code as Acc_Code,
             Substr(t.Account_Code, 8) as Acc,
             l.Name as Acc_Name,
             Employee.Get_Emp_Name(t.Operator_Code) as Emp_Name,
             to_char(t.Date_Validate, Ln_Const.Maskdate) as Date_Validate
        from Ln_Account_His t, Ln_s_Loan_Type_Account l
       where t.Loan_Type_Account = l.Code
         and t.Loan_Id = Vloan_Id
         and t.Loan_Type_Account = Iacc_Type_Code
      union
      select to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify,
             t.Account_Code as Acc_Code,
             Substr(t.Account_Code, 8) as Acc,
             l.Name as Acc_Name,
             Employee.Get_Emp_Name(t.Operator_Code) as Emp_Name,
             to_char(t.Date_Validate, Ln_Const.Maskdate) as Date_Validate
        from Ln_Account t, Ln_s_Loan_Type_Account l
       where t.Loan_Type_Account = l.Code
         and t.Loan_Id = Vloan_Id
         and t.Loan_Type_Account = Iacc_Type_Code
       order by Date_Modify desc;
    return result;
  end Get_Acc_Change_Log;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает курсор с историей изменений %% ставок
  *  @iRate_Type_Code - тип процентной ставки
  *  @iLoan_ID       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Rate_Change_Log
  (
    Irate_Type_Code in Ln_Percent_Rate.Perc_Code_Desc%type,
    Iloan_Id        in Ln_Card.Loan_Id%type
  ) return sys_refcursor is
    result          sys_refcursor;
    Vloan_Id        Ln_Card.Loan_Id%type := Iloan_Id;
    v_Convert_Count number := 6;
  begin
    if Core_App_Version.c_Header_Code = 9055 then
      v_Convert_Count := 12;
    end if;
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    open result for
      select to_char(r.Date_Modify, Ln_Const.Maskdatetime) as Char_Date_Modify,
             Employee.Get_Emp_Name(r.Emp_Code) as Emp_Name,
             r.Description,
             Ln_Service.Convert_Varchar(r.Perc_Rate, v_Convert_Count) as Perc_Rate
             --to_char(r.PERC_RATE, 'FM999G999G999G999G999G999G990D000000', 'NLS_NUMERIC_CHARACTERS=''. ''') as PERC_RATE
            ,
             to_char(r.First_Date, Ln_Const.Maskdate) as First_Date,
             r.Date_Modify
        from Ln_Percent_Rate r
       where r.Loan_Id = Vloan_Id
         and r.Perc_Code_Desc = Irate_Type_Code
      union
      select to_char(r.Date_Modify, Ln_Const.Maskdatetime) as Char_Date_Modify,
             Employee.Get_Emp_Name(r.Emp_Code) as Emp_Name,
             r.Description,
             Ln_Service.Convert_Varchar(r.Perc_Rate, v_Convert_Count) as Perc_Rate
             --, to_char(r.PERC_RATE, 'FM999G999G999G999G999G999G990D000000', 'NLS_NUMERIC_CHARACTERS=''. ''') as PERC_RATE
            ,
             to_char(r.First_Date, Ln_Const.Maskdate) as First_Date,
             r.Date_Modify
        from Ln_Percent_Rate_His r
       where r.Loan_Id = Vloan_Id
         and r.Perc_Code_Desc = Irate_Type_Code
       order by Date_Modify desc;
    return result;
  end Get_Rate_Change_Log;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает курсор с историей изменений %% ставок
  *  @iRate_Type_Code - тип процентной ставки
  *  @iLoan_ID       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Rate_Change_Log_New
  (
    Irate_Type_Code in Ln_Percent_Rate.Perc_Code_Desc%type,
    Iloan_Id        in Ln_Card.Loan_Id%type := null
  ) return Ln_Cache.t_Rate_Change_Logs
    pipelined is
    result          Ln_Cache.t_Rate_Change_Log;
    Vloan_Id        Ln_Card.Loan_Id%type := Iloan_Id;
    v_Convert_Count number := 6;
  begin
    if Core_App_Version.c_Header_Code = 9055 then
      v_Convert_Count := 12;
    end if;
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    for r in (select to_char(r.Date_Modify, Ln_Const.Maskdatetime) as Char_Date_Modify,
                     Employee.Get_Emp_Name(r.Emp_Code) as Emp_Name,
                     r.Description,
                     Ln_Service.Convert_Varchar(r.Perc_Rate, v_Convert_Count) as Perc_Rate
                     --to_char(r.PERC_RATE, 'FM999G999G999G999G999G999G990D000000', 'NLS_NUMERIC_CHARACTERS=''. ''') as PERC_RATE
                    ,
                     to_char(r.First_Date, Ln_Const.Maskdate) as First_Date,
                     r.Date_Modify,
                     r.Perc_Type
                from Ln_Percent_Rate r
               where r.Loan_Id = Vloan_Id
                 and r.Perc_Code_Desc = Irate_Type_Code
              union
              select to_char(r.Date_Modify, Ln_Const.Maskdatetime) as Char_Date_Modify,
                     Employee.Get_Emp_Name(r.Emp_Code) as Emp_Name,
                     r.Description,
                     Ln_Service.Convert_Varchar(r.Perc_Rate, v_Convert_Count) as Perc_Rate
                     --, to_char(r.PERC_RATE, 'FM999G999G999G999G999G999G990D000000', 'NLS_NUMERIC_CHARACTERS=''. ''') as PERC_RATE
                    ,
                     to_char(r.First_Date, Ln_Const.Maskdate) as First_Date,
                     r.Date_Modify,
                     r.Perc_Type
                from Ln_Percent_Rate_His r
               where r.Loan_Id = Vloan_Id
                 and r.Perc_Code_Desc = Irate_Type_Code
               order by Date_Modify desc)
    loop
      Result.Char_Date_Modify := r.Char_Date_Modify;
      Result.Emp_Name         := r.Emp_Name;
      Result.Description      := r.Description;
      Result.Perc_Rate        := r.Perc_Rate;
      Result.First_Date       := r.First_Date;
      Result.Date_Modify      := r.Date_Modify;
      Result.Perc_Type        := r.Perc_Type;
      pipe row(result);
    end loop;
    return;
  end Get_Rate_Change_Log_New;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает график гашения основного долга для текущего договора
  *  @iIs_Src_Temp - 'N' - считываем данные из таблицы LN_GRAPH_DEBT, иначе из временной таблицы LN_GRAPH_TEMPORARY
  *  @iLoan_ID     - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Graph_Debt
  (
    Iis_Src_Temp in varchar2 := 'N',
    Iloan_Id     in Ln_Card.Loan_Id%type
  ) return varchar2 is
    v_Form j_Hash := j_Hash;
    v_Data j_Hash := j_Hash;
  
    v_Num           j_Array := j_Array;
    v_Date          j_Array := j_Array;
    v_Amount        j_Array := j_Array;
    v_Sign          j_Array := j_Array;
    v_Sign_Name     j_Array := j_Array;
    v_Early_Red_Sum j_Array := j_Array;
    v_Amount_Diff   j_Array := j_Array;
    --T_LOAN          ln_init.LOAN_T;
  begin
    Ln_Init.Set_Loan(Iloan_Id);
    --T_LOAN := ln_init.Get_Loan;
    if Iis_Src_Temp = 'N' then
      for Graph in (select t.Obligate_Number as Num -- номер срочного обязательства
                          ,
                           to_char(t.Date_Red, Ln_Const.Maskdate) as Date_Red -- дата гашения
                          ,
                           t.Summ_Red / Ln_Cache.Loan.Scale as Amount_Red -- сумма гашения
                          ,
                           t.Sign_Long as Sign -- пролонгированое гашение или нет
                          ,
                           Decode(t.Sign_Long,
                                  0,
                                  'Основной',
                                  1,
                                  'Пролонгирован',
                                  'Ручной') as Sign_Name -- пролонгированое гашение или нет
                          ,
                           Nvl(r.Summ_Red, 0) / Ln_Cache.Loan.Scale as Early_Red_Summ
                      from Ln_Graph_Debt t,
                           (select Loan_Id, Date_Red, sum(Summ_Red) Summ_Red
                              from (select Loan_Id, Date_Red, Summ_Red
                                      from Ln_Graph_Early_Redemptions
                                     where Loan_Id = Ln_Cache.Loan.Loan_Id
                                    union all
                                    select Loan_Id, Date_Red, Summ_Red
                                      from Ln_Graph_Early_Redemp_Leads
                                     where Loan_Id = Ln_Cache.Loan.Loan_Id
                                       and Lead_State_Id = Const.State_Input)
                             group by Loan_Id, Date_Red) r
                     where t.Loan_Id = Ln_Cache.Loan.Loan_Id
                       and r.Loan_Id(+) = t.Loan_Id
                       and r.Date_Red(+) = t.Date_Red
                     order by t.Date_Red)
      loop
        v_Num.Push(Graph.Num);
        v_Date.Push(Graph.Date_Red);
        v_Amount.Push(to_char(Graph.Amount_Red));
        v_Sign.Push(Graph.Sign);
        v_Sign_Name.Push(Graph.Sign_Name);
        v_Early_Red_Sum.Push(Graph.Early_Red_Summ);
        v_Amount_Diff.Push(to_char(Graph.Amount_Red - Graph.Early_Red_Summ));
      end loop;
    else
      for Graph in (select t.Obligate_Number as Num -- номер срочного обязательства
                          ,
                           to_char(t.Date_Red, Ln_Const.Maskdate) as Date_Red -- дата гашения
                          ,
                           t.Summ_Red / Ln_Cache.Loan.Scale as Amount_Red -- сумма гашения
                          ,
                           t.Sign_Long as Sign -- пролонгированое гашение или нет
                          ,
                           Decode(t.Sign_Long,
                                  0,
                                  'Основной',
                                  1,
                                  'Пролонгирован',
                                  'Ручной') as Sign_Name -- пролонгированое гашение или нет
                          ,
                           Nvl(r.Summ_Red, 0) / Ln_Cache.Loan.Scale as Early_Red_Summ
                      from Ln_Graph_Temporary t,
                           (select Loan_Id, Date_Red, sum(Summ_Red) Summ_Red
                              from (select Loan_Id, Date_Red, Summ_Red
                                      from Ln_Graph_Early_Redemptions
                                     where Loan_Id = Ln_Cache.Loan.Loan_Id
                                    union all
                                    select Loan_Id, Date_Red, Summ_Red
                                      from Ln_Graph_Early_Redemp_Leads
                                     where Loan_Id = Ln_Cache.Loan.Loan_Id
                                       and Lead_State_Id = Const.State_Input)
                             group by Loan_Id, Date_Red) r
                     where t.Obligate_Number is not null
                       and t.Loan_Id = Ln_Cache.Loan.Loan_Id
                       and r.Loan_Id(+) = t.Loan_Id
                       and r.Date_Red(+) = t.Date_Red
                     order by t.Date_Red)
      loop
        v_Num.Push(Graph.Num);
        v_Date.Push(Graph.Date_Red);
        v_Amount.Push(to_char(Graph.Amount_Red));
        v_Sign.Push(Graph.Sign);
        v_Sign_Name.Push(Graph.Sign_Name);
        v_Early_Red_Sum.Push(Graph.Early_Red_Summ);
        v_Amount_Diff.Push(to_char(Graph.Amount_Red - Graph.Early_Red_Summ));
      end loop;
    
    end if;
  
    v_Form.Put('NUM', v_Num);
    v_Form.Put('DATE', v_Date);
    v_Form.Put('AMOUNT', v_Amount);
    v_Form.Put('SIGN', v_Sign);
    v_Form.Put('SIGN_NAME', v_Sign_Name);
    if Ln_Setting.Get_Sys_Param('USE_GRAPH_EARLY_REDEMPTION', Setup.Get_Headermfo) = 'Y' then
      v_Form.Put('EARLY_RED_SUMM', v_Early_Red_Sum);
    end if;
    v_Form.Put('AMOUNT_DIFF', v_Amount_Diff);
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  end Get_Graph_Debt;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает график гашения основных процентов текущего договора
  *  @iIs_Src_Temp - 'N' - считываем данные из таблицы LN_GRAPH_PERC, иначе из временной таблицы LN_GRAPH_TEMPORARY
  *  @iLoan_Id       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Graph_Perc
  (
    Iis_Src_Temp in varchar2 default 'N',
    Iloan_Id     in Ln_Card.Loan_Id%type,
    Iperc_Code   in Ln_s_Perc_Code_Desc.Code%type := 'OSN'
  ) return varchar2 is
    v_Form       j_Hash := j_Hash;
    v_Data       j_Hash := j_Hash;
    v_Date       j_Array := j_Array;
    v_Amount     j_Array := j_Array;
    v_Amount_Cmp j_Array := j_Array;
    --T_LOAN         ln_init.LOAN_T;
    Vperc_Code Ln_s_Perc_Code_Desc.Code%type := Nvl(Iperc_Code, 'OSN');
    Vloan_Id   Ln_Card.Loan_Id%type := Iloan_Id;
    v_Has_Cmp  varchar2(1) := 'N';
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    Ln_Init.Set_Loan(Vloan_Id);
    --T_LOAN := ln_init.Get_Loan;
  
    if Iis_Src_Temp = 'N' then
      if Vperc_Code = 'OSN' then
        for Graph in (select to_char(t.Date_Red, Ln_Const.Maskdate) as Redemp_Date,
                             t.Summ_Red / Ln_Cache.Loan.Scale as Redemp_Amount,
                             (select Nvl(sum(c.Summ_Red) / Ln_Cache.Loan.Scale, 0)
                                from Ln_Graph_Perc_Cmp c
                               where c.Loan_Id = t.Loan_Id
                                 and c.Date_Red between t.Date_Red_Next + 1 and t.Date_Red) Redemp_Amount_Cmp
                        from (select t.Loan_Id,
                                     t.Date_Red,
                                     t.Summ_Red,
                                     Nvl(Lag(t.Date_Red) Over(order by t.Date_Red),
                                         Ln_Cache.Loan.Open_Date) Date_Red_Next
                                from Ln_Graph_Perc t
                               where t.Loan_Id = Vloan_Id) t
                       order by t.Date_Red)
        loop
          v_Date.Push(Graph.Redemp_Date);
          v_Amount.Push(to_char(Graph.Redemp_Amount));
          v_Amount_Cmp.Push(to_char(Graph.Redemp_Amount_Cmp));
          if Graph.Redemp_Amount_Cmp > 0 then
            v_Has_Cmp := 'Y';
          end if;
        end loop;
      else
        for Graph in (select to_char(t.Date_Red, Ln_Const.Maskdate) as Redemp_Date,
                             t.Summ_Red / Ln_Cache.Loan.Scale as Redemp_Amount
                        from Ln_Graph_Perc_Cmp t
                       where t.Loan_Id = Vloan_Id
                       order by t.Date_Red)
        loop
          v_Date.Push(Graph.Redemp_Date);
          v_Amount.Push(to_char(Graph.Redemp_Amount));
        end loop;
      end if;
    else
      for Graph in (select to_char(t.Date_Red, Ln_Const.Maskdate) as Redemp_Date,
                           t.Summ_Red / Ln_Cache.Loan.Scale as Redemp_Amount,
                           t.Summ_Calc / Ln_Cache.Loan.Scale as Redemp_Amount_Cmp
                      from Ln_Graph_Temporary t
                     where t.Obligate_Number is null
                       and t.Loan_Id = Vloan_Id
                     order by t.Date_Red)
      loop
        v_Date.Push(Graph.Redemp_Date);
        if Vperc_Code = 'OSN' then
          v_Amount.Push(to_char(Graph.Redemp_Amount));
          v_Amount_Cmp.Push(to_char(Graph.Redemp_Amount_Cmp));
          if Graph.Redemp_Amount_Cmp > 0 then
            v_Has_Cmp := 'Y';
          end if;
        else
          v_Amount.Push(to_char(Graph.Redemp_Amount_Cmp));
        end if;
      end loop;
    end if;
    --
    v_Form.Put('DATE', v_Date);
    v_Form.Put('AMOUNT', v_Amount);
    if Vperc_Code = 'OSN' then
      v_Form.Put('AMOUNT_CMP', v_Amount_Cmp);
      v_Form.Put('HAS_CMP', v_Has_Cmp);
    end if;
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  end Get_Graph_Perc;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Печать графика гащения основного долга по конкретному договору
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Print_Graph_Debt(Iloan_Id in Ln_Card.Loan_Id%type) return clob is
    Vbuffer       varchar2(32767);
    Vresult       clob;
    Vheader_Block varchar2(32767);
    Vtotal_Sum    varchar2(50);
  
    /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
    *     Вставляет очередную строку в буфер если помещается, либо в переменную типа clob
    *  @iStr    - любая строка
    ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
    Procedure Concatenate(Pstr in varchar2) is
    begin
      if (Length(Vbuffer || Pstr) < 32767) then
        Vbuffer := Vbuffer || Pstr;
      else
        Vresult := Vresult || Vbuffer;
        Vbuffer := Pstr;
      end if;
    end Concatenate;
  
  begin
    Concatenate('<h2>График погашения основного долга</h2>');
    for Card in (select t.Client_Name,
                        t.Client_Code,
                        to_char(t.Open_Date, Ln_Const.Maskdate) as Open_Date,
                        to_char(t.Close_Date, Ln_Const.Maskdate) as Close_Date,
                        t.Currency_Char_Code as Currency,
                        to_char(t.Amount,
                                'FM999G999G999G999G999G999G990D00999999',
                                'NLS_NUMERIC_CHARACTERS=''. ''') as Amount,
                        t.Condition_Name as Condition,
                        (select Loan_Uid
                           from Ln_Online_Cards o
                          where o.Loan_Id = t.Loan_Id) Loan_Uid,
                        (select /*+index_desc(a LN_ACCOUNT_PK)*/
                          Substr(Account_Code, -20)
                           from Ln_Account a
                          where a.Loan_Id = t.Loan_Id
                            and Loan_Type_Account = 1
                            and Rownum = 1) Acc_1,
                        (select /*+index_desc(a LN_ACCOUNT_PK)*/
                          Substr(Account_Code, -20)
                           from Ln_Account a
                          where a.Loan_Id = t.Loan_Id
                            and Loan_Type_Account = 2
                            and Rownum = 1) Acc_2,
                        (select /*+index_desc(r LN_PERCENT_RATE_PK)*/
                          Perc_Rate
                           from Ln_Percent_Rate r
                          where r.Loan_Id = t.Loan_Id
                            and r.Perc_Code_Desc = 'OSN') Osn
                   from Ln_v_Card t
                  where t.Loan_Id = Iloan_Id)
    loop
      Vheader_Block := '<table align=center class="topper">' || '<tr><th colspan=8>' ||
                       Card.Client_Name || ' ( ' || Card.Client_Code || ' )' || '</th></tr>' ||
                       '<tr><td class=label>Дата выдачи :</td>' || '<td class=data>' ||
                       Card.Open_Date || '</td>' || '<td class=label>Сумма по договору :</td>' ||
                       '<td class=data>' || Card.Currency || ' ' || Card.Amount || '</td>' ||
                       '<td class=label>Процентная ставка :</td>' || '<td class=data>' || Card.Osn ||
                       '</td>' || '<td class=label>Ссудный счет :</td>' || '<td class=data>' ||
                       Card.Acc_1 || '</td></tr>' || '<tr><td class=label>Дата погашения :</td>' ||
                       '<td class=data>' || Card.Close_Date || '</td>' ||
                       '<td class=label>Login ID :</td>' || '<td class=data>' || Card.Loan_Uid ||
                       '</td>' || '<td class=label>Состояние :</td>' || '<td class=data>' ||
                       Card.Condition || '</td>' || '<td class=label>Р/с :</td>' ||
                       '<td class=data>' || Card.Acc_2 || '</td></tr>' || '</table>' ||
                       '<table align="center" class="content">' || '<colgroup align=center>' ||
                       '<col width=15%>' || '<col width=15%>' || '<col width=30%>' ||
                       '<col width=40%>' || '</colgroup>' || '<thead>' || '<tr><td>№ обязат-ва' ||
                       '<td>Дата погашения' || '<td>Сумма погашения' || '<td>Признак' ||
                       '</thead><tbody>';
    
      Concatenate(Vheader_Block);
    end loop;
  
    for Graph in (select t.Obligate_Number as Num -- номер срочного обязательства
                        ,
                         to_char(t.Date_Red, Ln_Const.Maskdate) as Date_Red -- дата гашения
                        ,
                         to_char(t.Summ_Red / 100,
                                 'FM999G999G999G999G999G999G990D00999999',
                                 'NLS_NUMERIC_CHARACTERS=''. ''') as Amount_Red -- сумма гашения
                        ,
                         Decode(t.Sign_Long,
                                0,
                                'Основной',
                                1,
                                'Пролонгирован',
                                'Ручной') as Sign -- пролонгированое гашение или нет
                        ,
                         to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify -- Дата изменения
                        ,
                         Employee.Get_Emp_Name(t.Emp_Code) as Emp_Name -- Сотрудник
                  
                    from Ln_Graph_Debt t
                   where t.Loan_Id = Iloan_Id
                   order by t.Date_Red)
    loop
    
      Concatenate('<tr><td>' || Graph.Num || '</td>');
      Concatenate('<td>' || Graph.Date_Red || '</td>');
      Concatenate('<td class=padd_right>' || Graph.Amount_Red || '</td>');
      Concatenate('<td>' || Graph.Sign || '</td></tr>');
    
    end loop;
    ---
    Concatenate('</tbody></table>');
  
    select to_char(sum(Summ_Red) / 100,
                   'FM999G999G999G999G999G999G990D00999999',
                   'NLS_NUMERIC_CHARACTERS=''. ''')
      into Vtotal_Sum
      from Ln_Graph_Debt t
     where t.Loan_Id = Iloan_Id;
  
    Concatenate('<table align="center" class="footer">');
    Concatenate('<col width=60%>');
    Concatenate('<col width=40%>');
    Concatenate('<tr><td class="label"> Итого </td>');
    Concatenate('<td class="data"> ' || Vtotal_Sum || ' </td></tr>');
    Concatenate('</table>');
  
    if Length(Vbuffer) > 0 then
      Vresult := Vresult || Vbuffer;
      Vbuffer := null;
    end if;
  
    return Vresult;
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Печать графика гащения основного долга по конкретному договору
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Print_Graph_Perc
  (
    Iloan_Id   in Ln_Card.Loan_Id%type,
    Iperc_Code in Ln_s_Perc_Code_Desc.Code%type := 'OSN'
  ) is
  begin
    Ln_Report.Print_Graph_Perc(Iloan_Id => Iloan_Id, Iperc_Code => Iperc_Code);
  end;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает значения параметры указанного договора
  *  @iLoan_Id       - уникальный номер договора
  *  @iCode          - код парам
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Card_Param_Value
  (
    Iloan_Id integer,
    Icode    varchar2
  ) return varchar2 is
    result Ln_Loan_Params.Value%type;
  begin
    if Icode in ('NUM_NOTIFICATION', 'DATE_NOTIFICATION', 'TERM_NOTIFICATION', 'INITIAL_FEE') then
      select v.Value
        into result
        from Ln_Blanks_Vc v
       where v.Claim_Id = Ln_Util.Get_Claim_Id_By_Loan_Id(i_Loan_Id => Iloan_Id)
         and v.Col_Id = (case
               when Icode = 'NUM_NOTIFICATION' then
                96
               when Icode = 'DATE_NOTIFICATION' then
                97
               when Icode = 'TERM_NOTIFICATION' then
                98
               else
                99
             end)
         and Rownum = 1;
    else
      select t.Value
        into result
        from Ln_Loan_Params t, Ln_s_Loan_Params p
       where t.Loan_Id = Iloan_Id
         and t.Param_Id = p.Id
         and p.Object_Code = 'CARD'
         and p.Code = Icode
         and Rownum = 1;
    end if;
    --
    return result;
  exception
    when No_Data_Found then
      return '';
  end Get_Card_Param_Value;
  --
  Function Get_Card_Param_Value_His
  (
    Iloan_Id     integer,
    Icode        varchar2,
    Idate_Modify varchar2
  ) return varchar2 is
    result Ln_Loan_Params.Value%type;
  begin
    select t.Value
      into result
      from Ln_Loan_Params_His t, Ln_s_Loan_Params p
     where t.Loan_Id = Iloan_Id
       and t.Param_Id = p.Id
       and p.Object_Code = 'CARD'
       and p.Code = Icode
       and to_char(t.Created_On, 'dd.mm.yyyy hh24:mi:ss') = Idate_Modify
       and Rownum = 1;
    --
    return result;
  exception
    when No_Data_Found then
      return '';
  end Get_Card_Param_Value_His;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает параметры указанного договора
  *  @iLoan_Id       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Card_Data_Jhash(Iloan_Id in integer) return varchar2 is
    Vform                      j_Hash := j_Hash;
    Vdata                      j_Hash := j_Hash;
    Vfield                     j_Field;
    Vcard                      Ln_v_Card%rowtype;
    Vclaim                     Ln_Claim%rowtype;
    Vcard_Additional           Ln_Card_Additional%rowtype;
    Vis_Blank                  boolean;
    Vcredit_Src                j_Array := j_Array();
    Vcredit_Src_Name           j_Array := j_Array();
    Vlending_Src               j_Array := j_Array();
    Vlending_Src_Name          j_Array := j_Array();
    Vforeign_Organization      j_Array := j_Array();
    Vforeign_Organization_Name j_Array := j_Array();
    Vfinancing_Currency        j_Array := j_Array();
    Vfinancing_Currency_Name   j_Array := j_Array();
    Vfinancing_Amount          j_Array := j_Array();
    Vloan_Line_Purpose         j_Array := j_Array();
    Vunder_Guarantee_Ruz       j_Array := j_Array();
    Vreport_Type_Id            j_Array := j_Array();
    Vreport_Type_Name          j_Array := j_Array();
    --vIs_Parent_Loan            boolean := false;
    v_Use_Credit_Object  Ln_Claim_Appendix.Use_Credit_Object%type;
    v_Credit_Object_Id   Ln_Claim_Appendix.Credit_Object_Id%type;
    v_Credit_Object_Sum  Ln_Claim_Appendix.Credit_Object_Sum%type;
    v_Client_Phone       Ln_Claim_Appendix.Mobile_Number%type;
    v_Credit_Object_Name varchar2(32000);
    v_Perc_Credit        varchar2(100);
    v_Perc_Inps          varchar2(100);
    v_Perc_Pledge        varchar2(100);
    --v_Graf_Summ_c        varchar2(100);
    v_Graf_Summ          varchar2(100);
    v_Inn_Otm            Ln_Universities.Inn%type;
    v_Name_Otm           Ln_Universities.Name%type;
    v_Account_Number_Otm Ln_Universities.Account_Number%type;
    v_Type_Otm           Ln_Universities.Type%type;
    v_Id_Otm             Ln_Universities.Id%type;
  begin
    --vIs_Parent_Loan := User_Session.Get_Varchar2('is_parent_loan') = 'Y';
    select t.*
      into Vcard
      from Ln_v_Card t
     where t.Loan_Id = Iloan_Id;
    begin
      select *
        into Vcard_Additional
        from Ln_Card_Additional t
       where t.Loan_Id = Iloan_Id;
    exception
      when No_Data_Found then
        null;
    end;
    --
    begin
      select *
        into Vclaim
        from Ln_Claim
       where Claim_Id = Vcard.Claim_Id;
    exception
      when No_Data_Found then
        Vclaim := null;
    end;
    /*--Anketa orqali kelgan bolsa readonly qilamiz
    vClaim.Count_Nik := 0;
    select count(*) into vClaim.Count_Nik
      from ln_blanks
     where claim_id = vClaim.Claim_id;*/
    --vIs_Blank := vClaim.Count_Nik = 1;
    Vis_Blank := false;
    --
    --$IF CORE_APP_VERSION.C_CLIENT_UNIQUE $THEN
    if Vclaim.Borrower is null then
      select Subject_Code, Cb_Client_Type
        into Vclaim.Client_Type, Vclaim.Borrower
        from (select 1 Subject_Code,
                     (select s.Cb_Client_Type
                        from Cam_r_Client_Types s
                       where s.Client_Type_Id = b.Client_Type_Id) Cb_Client_Type
                from Cam_Jur_Clients b
               where Client_Id = Vcard.Client_Id
              union
              select 3 Subject_Code,
                     (select s.Cb_Client_Type
                        from Cam_r_Client_Types s
                       where s.Client_Type_Id = b.Client_Type_Id) Cb_Client_Type
                from Cam_Bus_Clients b
               where Client_Id = Vcard.Client_Id
              union
              select 2 Subject_Code,
                     (select s.Cb_Client_Type
                        from Cam_r_Client_Types s
                       where s.Client_Type_Id = b.Client_Type_Id) Cb_Client_Type
                from Cam_Phys_Clients b
               where Client_Id = Vcard.Client_Id)
       where Rownum = 1;
    end if;
    --$END
    Vform.Put('CLAIM_ID', Vclaim.Claim_Id);
    Vform.Put('CLIENT_TYPE', Vclaim.Client_Type);
    Vfield := j_Field(Vcard.Client_Code);
    Vfield.Set_Readonly(true);
    Vform.Put('CLIENT_CODE', Vfield);
    Vfield := j_Field(Get_Client_Name(Vcard.Client_Code, Vcard.Filial_Code));
    Vfield.Set_Readonly(true);
    Vform.Put('CLIENT_NAME', Vfield);
    Vfield := j_Field(Vclaim.Borrower);
    Vfield.Set_Readonly(true);
    Vform.Put('BORROWER_CODE', Vfield);
    if Vclaim.Client_Code is null then
      Vfield := j_Field(Get_Borrower_Name(Vclaim.Borrower));
      Vfield.Set_Readonly(Vis_Blank);
    else
      Vfield := j_Field(Get_Borrower_Name(Vclaim.Borrower));
      Vfield.Set_Readonly(true);
    end if;
    Vform.Put('BORROWER_NAME', Vfield);
    Vfield := j_Field(Vcard.Contract_Desc);
    --vField.Set_Readonly(vIs_Blank);
    Vform.Put('CONTRACT_DESC', Vfield);
    Vfield := j_Field(Vcard.Claim_Type_Code);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('CREDIT_TYPE', Vfield);
    Vfield := j_Field(Get_Contract_Type(Vcard.Claim_Type_Code));
    Vfield.Set_Readonly(true);
    Vform.Put('CREDIT_TYPE_NAME', Vfield);
    Vfield := j_Field(Vcard.Claim_Number);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('CLAIM_NUM', Vfield);
    Vfield := j_Field(Vcard.Loan_Number);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('LOAN_NUM', Vfield);
    Vfield := j_Field(Adm_Rep_Util.f_Date(Vcard.Open_Date));
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('OPEN_DATE', Vfield);
    Vform.Put('CLOSE_DATE', Vcard.Close_Date);
    Vfield := j_Field(to_char(Vcard.Amount));
    if Ln_Init.Is_Overdraft_Product(Vcard.Product_Id) or
       Ln_Init.Is_Beepul_Product(Vcard.Product_Id) or
       Ln_Init.Is_Credit_Card_Product(Vcard.Product_Id) then
      Vfield.Set_Readonly(true);
    else
      Vfield.Set_Readonly(Vis_Blank);
    end if;
    Vform.Put('AMOUNT', Vfield);
    Vfield := j_Field(to_char(Vcard.First_Pay));
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('FIRST_PAY', Vfield);
    Vfield := j_Field(Vcard.Currency_Code);
    Vfield.Set_Readonly(true);
    Vform.Put('CURRENCY_CODE', Vfield);
    Vform.Put('CURRENCY_NAME', Get_Currency_Name(Vcard.Currency_Code));
    Vfield := j_Field(Vcard.Loan_Type_Code);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('LOAN_TYPE_CODE', Vfield);
    Vform.Put('LOAN_TYPE_NAME',
              replace(replace(Get_Credit_Type_Name(Vcard.Loan_Type_Code), '['''), ''']'));
    Vfield := j_Field(Vcard.Lending_Type);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('LENDING_TYPE', Vfield);
    Vform.Put('LENDING_TYPE_NAME', Vcard.Lending_Type_Name);
    Vfield := j_Field(Vcard.Purpose_Code);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('PURPOSE_CODE', Vfield);
    Vform.Put('PURPOSE_NAME', Vcard.Purpose_Name);
    Vfield := j_Field(Vcard.Purpose_Lending);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('PURPOSE_LENDING', Vfield);
    Vform.Put('PURPOSE_LENDING_NAME', Ln_Service.Get_Purpose_Lending_Name(Vclaim.Purpose_Lending));
    Vfield := j_Field(Vcard.Eco_Sec_Code);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('ECO_SEC_CODE', Vfield);
    Vform.Put('ECO_SEC_NAME', Vcard.Eco_Sec_Name);
    Vfield := j_Field(Vcard.Oked_Code);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('OKED_CODE', Vfield);
    Vform.Put('OKED_NAME', Vcard.Oked_Name);
    Vfield := j_Field(Vcard.Object_Loan);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('OBJECT', Vfield);
    Vform.Put('DELIVERY_FORM', Vcard.Form_Delivery);
    Vform.Put('CLASS_QUALITY', Vcard.Class_Quality);
    Vform.Put('GUAR_CLASS', Vcard.Guar_Class);
    Vform.Put('REDEMP_FORM', Vcard.Form_Redemption);
    Vfield := j_Field(Vcard.Manager_Name);
    Vfield.Set_Readonly(Vis_Blank);
    Vform.Put('MANAGER', Vfield);
    Vform.Put('CLIENT_TYPE', Vclaim.Client_Type);
    Vform.Put('RESIDENT', Vclaim.Resident);
    --vForm.Put('CONDITION',            vCard.Condition_Code );
    if Ln_Util.Is_Card_Adobdet_Niki(Vcard.Loan_Id) and
       Ln_Service.Is_Array_Value(Ln_Const.Good_Loans_With_Law_Sps, Vcard.Condition) then
      Vfield := j_Field(Vcard.Contract_Code);
      Vfield.Set_Readonly(true);
      Vform.Put('CONTRACT_NUM', Vfield);
      Vfield := j_Field(Vcard.Contract_Date);
      --vField.Set_Readonly(true);
      Vform.Put('CONTRACT_DATE', Vfield);
      Vfield := j_Field(Vcard.Committee_Number);
      if Setup.Get_Headermfo <> '09048' then
        Vfield.Set_Readonly(true);
      end if;
      Vform.Put('DECISION_NUM', Vfield);
      Vfield := j_Field(Vcard.Date_Committee);
      if Setup.Get_Headermfo <> '09048' then
        Vfield.Set_Readonly(true);
      end if;
      Vform.Put('DECISION_DATE', Vfield);
    else
      Vform.Put('DECISION_NUM', Vcard.Committee_Number);
      Vform.Put('DECISION_DATE', Vcard.Date_Committee);
      Vform.Put('CONTRACT_DATE', Vcard.Contract_Date);
      Vform.Put('CONTRACT_NUM', Vcard.Contract_Code);
    end if;
  
    if Ln_Contract.Is_Hamkor_Bank() then
      Vform.Put('EBRD_SIGN', Nvl(Vcard.Sign_Ebrd, 0));
    end if;
  
    if Vcard.Urgency_Type is null then
      begin
        select s.Code
          into Vcard.Urgency_Type
          from v_Urgency s
         where s.Urgency_Type = Vcard.Term_Loan_Type
           and Rownum = 1;
      exception
        when No_Data_Found then
          null;
      end;
    end if;
  
    Vform.Put('URGENCY_TYPE', Vcard.Urgency_Type);
  
    if Vcard.Claim_Type_Code = Ln_Const.Ln_Factoring then
      -- Договор по факторингу
      Vform.Put('DISCOUNT', to_char(Vcard.Fc_Summ));
      Vform.Put('FACTORIN_DESC', Vcard.Fc_Desc);
    end if;
  
    if Vcard.Claim_Type_Code = Ln_Const.Ln_Leasing then
      -- Договор по лизингу
      Vfield := j_Field(Vcard.Agr_Num_Notarial);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('NOTARIAL_AGREEM_NUM', Vfield);
      Vfield := j_Field(Vcard.Agr_Date_Notarial);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('NOTARIAL_AGREEM_DATE', Vcard.Agr_Date_Notarial);
      Vfield := j_Field(Vcard.Doc_Notarial_Num);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('NOTARIAL_DOC_NUM', Vcard.Doc_Notarial_Num);
      Vfield := j_Field(Vcard.Doc_Notarial_Date);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('NOTARIAL_DOC_DATE', Vcard.Doc_Notarial_Date);
      Vfield := j_Field(Vcard.Doc_Gover_Num);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('GOV_DOC_NUM', Vcard.Doc_Gover_Num);
      Vfield := j_Field(Vcard.Doc_Gover_Date);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('GOV_DOC_DATE', Vcard.Doc_Gover_Date);
    end if;
  
    if Vcard.Claim_Type_Code in (Ln_Const.Ln_Credit, Ln_Const.Ln_Leasing) then
      -- Кредитный договор или Лизинг
      Vform.Put('DAYS_IN_YEAR', Vcard.Days_In_Year);
      Vfield := j_Field(Vcard.Grace_Period);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('GRACE_PERIOD', Vfield);
      Vfield := j_Field(Vcard.Founders);
      Vfield.Set_Readonly(Vis_Blank);
      Vform.Put('FOUNDERS', Vfield);
      Vform.Put('CLASS_CRED', Vcard.Class_Cred);
      Vform.Put('DELIVERY_SIGN', Vcard.Sign_Delivery);
      --Sokhibjmaol
      Vform.Put('NAME_OF_PR_GOOD', Vcard.Product_Name);
      --
      if Vcard.Sign_Delivery = '1' then
        -- Кредит выдан по решению правительства
        Vform.Put('ORDER_NUM', Vcard.Gov_Num);
        Vform.Put('ORDER_DATE', Vcard.Gov_Date);
      end if;
    end if;
  
    for s in (select t.Loan_Id,
                     t.Credit_Source_Code,
                     Decode(t.Foreign_Organization_Code, '000', '', t.Foreign_Organization_Code) Foreign_Organization_Code,
                     t.Financing_Currency_Code,
                     t.Financing_Amount,
                     t.Loan_Line_Purpose,
                     t.Under_Guarantee_Ruz,
                     t.Date_Modify,
                     t.Lending_Source_Code,
                     t.Local_Code,
                     (select name
                        from v_Lending_Sources
                       where Code = t.Lending_Source_Code) Lending_Source_Name
                from Ln_Credit_Sources t
               where t.Loan_Id = Iloan_Id)
    loop
      Vfield := j_Field(s.Credit_Source_Code);
      Vfield.Set_Readonly(Vis_Blank);
      Vcredit_Src.Push(Vfield);
      Vcredit_Src_Name.Push(Get_Credit_Source_Name(s.Credit_Source_Code));
      Vfield := j_Field(s.Lending_Source_Code);
      Vfield.Set_Readonly(Vis_Blank);
      Vlending_Src.Push(Vfield);
      Vlending_Src_Name.Push(s.Lending_Source_Name);
      Vfield := j_Field(s.Foreign_Organization_Code);
      Vfield.Set_Readonly(Vis_Blank);
      Vforeign_Organization.Push(Vfield);
      Vforeign_Organization_Name.Push(Get_Foreign_Organization_Name(s.Credit_Source_Code,
                                                                    s.Foreign_Organization_Code));
      Vfield := j_Field(s.Financing_Currency_Code);
      Vfield.Set_Readonly(Vis_Blank);
      Vfinancing_Currency.Push(Vfield);
      Vfinancing_Currency_Name.Push(Get_Currency_Name(s.Financing_Currency_Code));
      Vfield := j_Field(to_char(s.Financing_Amount /
                                Ln_Service.Get_Currency_Scale(s.Financing_Currency_Code)));
      if Ln_Init.Is_Overdraft_Product(Vcard.Product_Id) or
         Ln_Init.Is_Beepul_Product(Vcard.Product_Id) or
         Ln_Init.Is_Credit_Card_Product(Vcard.Product_Id) then
        Vfield.Set_Readonly(true);
      else
        Vfield.Set_Readonly(Vis_Blank);
      end if;
      Vfinancing_Amount.Push(Vfield);
      Vfield := j_Field(s.Loan_Line_Purpose);
      Vfield.Set_Readonly(Vis_Blank);
      Vloan_Line_Purpose.Push(Vfield);
      Vunder_Guarantee_Ruz.Push(s.Under_Guarantee_Ruz);
    end loop;
    Vform.Put('CREDIT_SOURCE_CODE', Vcredit_Src);
    Vform.Put('CREDIT_SOURCE_NAME', Vcredit_Src_Name);
    Vform.Put('LENDING_SOURCE_CODE', Vlending_Src);
    Vform.Put('LENDING_SOURCE_NAME', Vlending_Src_Name);
    Vform.Put('FOREIGN_ORGANIZATION_CODE', Vforeign_Organization);
    Vform.Put('FOREIGN_ORGANIZATION_NAME', Vforeign_Organization_Name);
    Vform.Put('FINANCING_CURRENCY_CODE', Vfinancing_Currency);
    Vform.Put('FINANCING_CURRENCY_NAME', Vfinancing_Currency_Name);
    Vform.Put('FINANCING_AMOUNT', Vfinancing_Amount);
    Vform.Put('LOAN_LINE_PURPOSE', Vloan_Line_Purpose);
    Vform.Put('UNDER_GUARANTEE_RUZ', Vunder_Guarantee_Ruz);
    --
    /*for r in (select s.*
                from Ln_Loan_Report_Types t, Ln_s_Report_Types s
               where t.Loan_Id = Iloan_Id
                 and t.Report_Type_Id = s.Report_Type_Id)
    loop
      Vreport_Type_Id.Push(r.Report_Type_Id);
      Vreport_Type_Name.Push(r.Name);
    end loop;
    Vform.Put('REPORT_TYPE_ID', Vreport_Type_Id);
    Vform.Put('REPORT_TYPE_NAME', Vreport_Type_Name);*/
    Vform.Put('PRODUCT_ID', Vcard.Product_Id);
    Vform.Put('PRODUCT_GROUP_ID', Ln_Product.Product_Group_Id(Vcard.Product_Id));
    --obshiy summa grafikni avtomat dogovorda tortish uchun qilindi 
    --- 
    select Nvl(sum(l.Summ_Red / 100), 0)
      into v_Graf_Summ
      from Ln_Graph_Perc l
     where l.Loan_Id = Iloan_Id;
    Ln_Kernel.Save_Loan_Param(i_Loan_Id     => Iloan_Id,
                              i_Object_Id   => Iloan_Id,
                              i_Object_Code => 'CARD',
                              i_Code        => 'SCHEDULED_INTEREST_PAYMENT',
                              i_Value       => v_Graf_Summ);
    ---put perc BRV
    select count(Decode(t.Param_Id, 114, 1, null)),
           count(Decode(t.Param_Id, 116, 1, null)),
           count(Decode(t.Param_Id, 118, 1, null))
      into v_Perc_Credit, v_Perc_Inps, v_Perc_Pledge
      from Ln_Loan_Params t
     where t.Loan_Id = Iloan_Id --iLoan_Id
       and t.Param_Id in (114, 116, 118);
    -- 
    if v_Perc_Credit = 0 then
      Ln_Kernel.Save_Loan_Param(i_Loan_Id     => Iloan_Id,
                                i_Object_Id   => Iloan_Id,
                                i_Object_Code => 'CARD',
                                i_Code        => 'PERC_CREDIT_HIS_COST',
                                i_Value       => 5);
    end if;
    --
    if v_Perc_Inps = 0 then
      Ln_Kernel.Save_Loan_Param(i_Loan_Id     => Iloan_Id,
                                i_Object_Id   => Iloan_Id,
                                i_Object_Code => 'CARD',
                                i_Code        => 'PERC_INFO_INPS_COST',
                                i_Value       => 1.5);
    end if;
    --
    if v_Perc_Pledge = 0 then
      Ln_Kernel.Save_Loan_Param(i_Loan_Id     => Iloan_Id,
                                i_Object_Id   => Iloan_Id,
                                i_Object_Code => 'CARD',
                                i_Code        => 'PERC_PLEDGE_FEES',
                                i_Value       => 10);
    end if;
    begin
      select t.Use_Credit_Object,
             t.Credit_Object_Id,
             t.Credit_Object_Sum,
             Mlm.Cur_Nls(o.Name) Label,
             t.Mobile_Number
        into v_Use_Credit_Object,
             v_Credit_Object_Id,
             v_Credit_Object_Sum,
             v_Credit_Object_Name,
             v_Client_Phone
        from Ln_Claim_Appendix t
        left join Ln_Credit_Objects o
          on t.Credit_Object_Id = o.Id
       where Claim_Id = Vclaim.Claim_Id;
    exception
      when others then
        v_Use_Credit_Object := 'N';
    end;
    if v_Client_Phone is not null then
      v_Client_Phone := Substr(v_Client_Phone, 1, 2) || ' ' || Substr(v_Client_Phone, 3, 3) || ' ' ||
                        Substr(v_Client_Phone, 6, 2) || ' ' || Substr(v_Client_Phone, 8, 2);
    end if;
    Vform.Put('USE_CREDIT_OBJECT', v_Use_Credit_Object);
    Vform.Put('CREDIT_OBJECT_ID', v_Credit_Object_Id);
    Vform.Put('CREDIT_OBJECT_SUM',
              v_Credit_Object_Sum / Ln_Service.Get_Currency_Scale(Vcard.Currency_Code));
    Vform.Put('CREDIT_OBJECT_NAME', v_Credit_Object_Name);
    Vform.Put('MOBILE_PHONE', v_Client_Phone);
    -- Card Additional
    if Vcard.Claim_Type_Code = 1 then
      Vform.Put('AGREEMENT_NUMBER', Vcard_Additional.Agreement_Number);
      Vform.Put('AGREEMENT_DATE', to_char(Vcard_Additional.Agreement_Date, Ln_Const.Maskdate));
      Vform.Put('ISSUE_MODE', Vcard_Additional.Issue_Mode);
    elsif Vcard.Claim_Type_Code = 3 then
      Vform.Put('FACTORING_TYPE', Vcard_Additional.Factoring_Type);
    end if;
    --if vCard.CLIENT_TYPE = 1 then
    --Vform.Put('DIRECTOR_ID', Vcard_Additional.Director_Id);
    --Vform.Put('DIRECTOR_NAME', Bank.Get_Client_Name(Vcard_Additional.Director_Id));
    --Vform.Put('DIRECTOR_CLIENT_CODE', Account.Get_Client_Code(Vcard_Additional.Director_Id));
    /*Vform.Put('AMOUNT_UZS', Vcard_Additional.Amount_Uzs);
    Vform.Put('AMOUNT_USD', Vcard_Additional.Amount_Usd);
    Vform.Put('AMOUNT_EUR', Vcard_Additional.Amount_Eur);*/
    --end if;
    ---
    for r in (select *
                from Ln_s_Loan_Params
               where Condition = 'A'
                 and Object_Code = 'CARD')
    loop
      Vform.Put(r.Code, Get_Card_Param_Value(Iloan_Id, r.Code));
      if (r.Code = 'id_otm') then
        v_Id_Otm := Get_Card_Param_Value(Iloan_Id, r.Code);
        begin
          --  
          select t.Name, t.Inn, t.Account_Number, t.Type
            into v_Name_Otm, v_Inn_Otm, v_Account_Number_Otm, v_Type_Otm
            from Ln_Universities t
           where t.Id = v_Id_Otm;
          -- 
          Vform.Put('inn_otm', v_Inn_Otm);
          Vform.Put('name_otm', v_Name_Otm);
          Vform.Put('account_number_otm', v_Account_Number_Otm);
          Vform.Put('type_otm', v_Type_Otm);
          --
        exception
          when No_Data_Found then
            null;
        end;
      end if;
    end loop;
    Vdata.Put('fm', Vform);
    User_Session.Put_Varchar2('ln_client_type', Vclaim.Client_Type);
    return Vdata.To_String;
  
  end Get_Card_Data_Jhash;
  -------------------------------------------------------------------------------
  Function Get_Card_From_History_As_Hash
  (
    Iloan_Id     in Ln_Card_His.Loan_Id%type,
    Idate_Modify in varchar2
  ) return varchar2 is
    Vfield                     j_Field;
    Vform                      j_Hash := j_Hash;
    Vdata                      j_Hash := j_Hash;
    Vcard_Old                  Ln_Card_His%rowtype;
    Vcard                      Ln_Card%rowtype;
    Vcredit_Src                j_Array := j_Array();
    Vcredit_Src_Name           j_Array := j_Array();
    Vlending_Src               j_Array := j_Array();
    Vlending_Src_Name          j_Array := j_Array();
    Vforeign_Organization      j_Array := j_Array();
    Vforeign_Organization_Name j_Array := j_Array();
    Vfinancing_Currency        j_Array := j_Array();
    Vfinancing_Currency_Name   j_Array := j_Array();
    Vfinancing_Amount          j_Array := j_Array();
    Vloan_Line_Purpose         j_Array := j_Array();
    Vunder_Guarantee_Ruz       j_Array := j_Array();
    Vreport_Type_Id            j_Array := j_Array();
    Vreport_Type_Name          j_Array := j_Array();
    Vcolor                     varchar2(25) := 'red';
  begin
    select t.*
      into Vcard_Old
      from Ln_Card_His t
     where t.Loan_Id = Iloan_Id
       and to_char(t.Date_Modify, 'dd.mm.yyyy hh24:mi:ss') = Idate_Modify;
    Vcard := Ln_Contract.Get_Card_Rowtype(Iloan_Id);
  
    Vform.Put('PRODUCT_ID', Vcard.Product_Id);
    if Vcard.Client_Code <> Vcard_Old.Client_Code then
      Vfield := j_Field(Vcard_Old.Client_Code);
      Vfield.Set_Color(Vcolor);
      Vform.Put('CLIENT_CODE', Vfield);
    else
      Vform.Put('CLIENT_CODE', Vcard_Old.Client_Code);
    end if;
  
    if Vcard.Claim_Number <> Vcard_Old.Claim_Number then
      Vfield := j_Field(Vcard_Old.Claim_Number);
      Vfield.Set_Color(Vcolor);
      Vform.Put('CLAIM_NUM', Vfield);
    else
      Vform.Put('CLAIM_NUM', Vcard_Old.Claim_Number);
    end if;
  
    if Vcard.Loan_Number <> Vcard_Old.Loan_Number then
      Vfield := j_Field(Vcard_Old.Loan_Number);
      Vfield.Set_Color(Vcolor);
      Vform.Put('LOAN_NUM', Vfield);
    else
      Vform.Put('LOAN_NUM', Vcard_Old.Loan_Number);
    end if;
  
    if Vcard.Loan_Type <> Vcard_Old.Loan_Type then
      Vfield := j_Field(Vcard_Old.Loan_Type);
      Vfield.Set_Color(Vcolor);
      Vform.Put('LOAN_TYPE_CODE', Vfield);
    else
      Vform.Put('LOAN_TYPE_CODE', Vcard_Old.Loan_Type);
    end if;
  
    if Vcard.Lending_Type <> Vcard_Old.Lending_Type then
      Vfield := j_Field(Vcard_Old.Lending_Type);
      Vfield.Set_Color(Vcolor);
      Vform.Put('LENDING_TYPE', Vfield);
    else
      Vform.Put('LENDING_TYPE', Vcard_Old.Lending_Type);
    end if;
  
    if Vcard.Purpose_Loan <> Vcard_Old.Purpose_Loan then
      Vfield := j_Field(Vcard_Old.Purpose_Loan);
      Vfield.Set_Color(Vcolor);
      Vform.Put('PURPOSE_CODE', Vfield);
    else
      Vform.Put('PURPOSE_CODE', Vcard_Old.Purpose_Loan);
    end if;
  
    if Vcard.Purpose_Lending <> Vcard_Old.Purpose_Lending then
      Vfield := j_Field(Vcard_Old.Purpose_Lending);
      Vfield.Set_Color(Vcolor);
      Vform.Put('PURPOSE_LENDING', Vfield);
    else
      Vform.Put('PURPOSE_LENDING', Vcard_Old.Purpose_Lending);
    end if;
  
    if Vcard.Committee_Number <> Vcard_Old.Committee_Number then
      Vfield := j_Field(Vcard_Old.Committee_Number);
      Vfield.Set_Color(Vcolor);
      Vform.Put('DECISION_NUM', Vfield);
    else
      Vform.Put('DECISION_NUM', Vcard_Old.Committee_Number);
    end if;
  
    if Vcard.Date_Committee <> Vcard_Old.Date_Committee then
      Vfield := j_Field(to_char(Vcard_Old.Date_Committee, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('DECISION_DATE', Vfield);
    else
      Vform.Put('DECISION_DATE', to_char(Vcard_Old.Date_Committee, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Contract_Code <> Vcard_Old.Contract_Code then
      Vfield := j_Field(Vcard_Old.Contract_Code);
      Vfield.Set_Color(Vcolor);
      Vform.Put('CONTRACT_NUM', Vfield);
    else
      Vform.Put('CONTRACT_NUM', Vcard_Old.Contract_Code);
    end if;
  
    if Vcard.Contract_Date <> Vcard_Old.Contract_Date then
      Vfield := j_Field(to_char(Vcard_Old.Contract_Date, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('CONTRACT_DATE', Vfield);
    else
      Vform.Put('CONTRACT_DATE', to_char(Vcard_Old.Contract_Date, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Contract_Desc <> Vcard_Old.Contract_Desc then
      Vfield := j_Field(Vcard_Old.Contract_Desc);
      Vfield.Set_Color(Vcolor);
      Vform.Put('CONTRACT_DESC', Vfield);
    else
      Vform.Put('CONTRACT_DESC', Vcard_Old.Contract_Desc);
    end if;
  
    if Vcard.Agr_Num_Notarial <> Vcard_Old.Agr_Num_Notarial then
      Vfield := j_Field(Vcard_Old.Agr_Num_Notarial);
      Vfield.Set_Color(Vcolor);
      Vform.Put('NOTARIAL_AGREEM_NUM', Vfield);
    else
      Vform.Put('NOTARIAL_AGREEM_NUM', Vcard_Old.Agr_Num_Notarial);
    end if;
  
    if Vcard.Agr_Date_Notarial <> Vcard_Old.Agr_Date_Notarial then
      Vfield := j_Field(to_char(Vcard_Old.Agr_Date_Notarial, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('NOTARIAL_AGREEM_DATE', Vfield);
    else
      Vform.Put('NOTARIAL_AGREEM_DATE', to_char(Vcard_Old.Agr_Date_Notarial, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Doc_Notarial_Num <> Vcard_Old.Doc_Notarial_Num then
      Vfield := j_Field(Vcard_Old.Doc_Notarial_Num);
      Vfield.Set_Color(Vcolor);
      Vform.Put('NOTARIAL_DOC_NUM', Vfield);
    else
      Vform.Put('NOTARIAL_DOC_NUM', Vcard_Old.Doc_Notarial_Num);
    end if;
  
    if Vcard.Doc_Notarial_Date <> Vcard_Old.Doc_Notarial_Date then
      Vfield := j_Field(to_char(Vcard_Old.Doc_Notarial_Date, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('NOTARIAL_DOC_DATE', Vfield);
    else
      Vform.Put('NOTARIAL_DOC_DATE', to_char(Vcard_Old.Doc_Notarial_Date, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Doc_Gover_Num <> Vcard_Old.Doc_Gover_Num then
      Vfield := j_Field(Vcard_Old.Doc_Gover_Num);
      Vfield.Set_Color(Vcolor);
      Vform.Put('GOV_DOC_NUM', Vfield);
    else
      Vform.Put('GOV_DOC_NUM', Vcard_Old.Doc_Gover_Num);
    end if;
  
    if Vcard.Doc_Gover_Date <> Vcard_Old.Doc_Gover_Date then
      Vfield := j_Field(to_char(Vcard_Old.Doc_Gover_Date, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('GOV_DOC_DATE', Vfield);
    else
      Vform.Put('GOV_DOC_DATE', to_char(Vcard_Old.Doc_Gover_Date, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Open_Date <> Vcard_Old.Open_Date then
      Vfield := j_Field(to_char(Vcard_Old.Open_Date, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('OPEN_DATE', Vfield);
    else
      Vform.Put('OPEN_DATE', to_char(Vcard_Old.Open_Date, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Close_Date <> Vcard_Old.Close_Date then
      Vfield := j_Field(to_char(Vcard_Old.Close_Date, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('CLOSE_DATE', Vfield);
    else
      Vform.Put('CLOSE_DATE', to_char(Vcard_Old.Close_Date, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Currency <> Vcard_Old.Currency then
      Vfield := j_Field(Vcard_Old.Currency);
      Vfield.Set_Color(Vcolor);
      Vform.Put('CURRENCY_CODE', Vfield);
    else
      Vform.Put('CURRENCY_CODE', Vcard_Old.Currency);
    end if;
  
    if Vcard.Summ_Loan <> Vcard_Old.Summ_Loan then
      Vfield := j_Field(to_char(Vcard_Old.Summ_Loan /
                                Ln_Service.Get_Currency_Scale(Vcard_Old.Currency)));
      Vfield.Set_Color(Vcolor);
      Vform.Put('AMOUNT', Vfield);
    else
      Vform.Put('AMOUNT',
                to_char(Vcard_Old.Summ_Loan / Ln_Service.Get_Currency_Scale(Vcard_Old.Currency)));
    end if;
  
    if Vcard.Summinitial <> Vcard_Old.Summinitial then
      Vfield := j_Field(to_char(Vcard_Old.Summinitial /
                                Ln_Service.Get_Currency_Scale(Vcard_Old.Currency)));
      Vfield.Set_Color(Vcolor);
      Vform.Put('FIRST_PAY', Vfield);
    else
      Vform.Put('FIRST_PAY',
                to_char(Vcard_Old.Summinitial / Ln_Service.Get_Currency_Scale(Vcard_Old.Currency)));
    end if;
  
    if Vcard.Grace_Period <> Vcard_Old.Grace_Period then
      Vfield := j_Field(Vcard_Old.Grace_Period);
      Vfield.Set_Color(Vcolor);
      Vform.Put('GRACE_PERIOD', Vfield);
    else
      Vform.Put('GRACE_PERIOD', Vcard_Old.Grace_Period);
    end if;
  
    if Vcard.Purpose_Loan <> Vcard_Old.Purpose_Loan then
      Vfield := j_Field(Vcard_Old.Purpose_Loan);
      Vfield.Set_Color(Vcolor);
      Vform.Put('PURPOSE_CODE', Vfield);
    else
      Vform.Put('PURPOSE_CODE', Vcard_Old.Purpose_Loan);
    end if;
  
    if Vcard.Eco_Sec <> Vcard_Old.Eco_Sec then
      Vfield := j_Field(Vcard_Old.Eco_Sec);
      Vfield.Set_Color(Vcolor);
      Vform.Put('ECO_SEC_CODE', Vfield);
    else
      Vform.Put('ECO_SEC_CODE', Vcard_Old.Eco_Sec);
    end if;
  
    if Vcard.Oked <> Vcard_Old.Oked then
      Vfield := j_Field(Vcard_Old.Oked);
      Vfield.Set_Color(Vcolor);
      Vform.Put('OKED_CODE', Vfield);
    else
      Vform.Put('OKED_CODE', Vcard_Old.Oked);
    end if;
  
    if Vcard.Object_Loan <> Vcard_Old.Object_Loan then
      Vfield := j_Field(Vcard_Old.Object_Loan);
      Vfield.Set_Color(Vcolor);
      Vform.Put('OBJECT', Vfield);
    else
      Vform.Put('OBJECT', Vcard_Old.Object_Loan);
    end if;
  
    if Vcard.Gov_Num <> Vcard_Old.Gov_Num then
      Vfield := j_Field(Vcard_Old.Gov_Num);
      Vfield.Set_Color(Vcolor);
      Vform.Put('ORDER_NUM', Vfield);
    else
      Vform.Put('ORDER_NUM', Vcard_Old.Gov_Num);
    end if;
  
    if Vcard.Gov_Date <> Vcard_Old.Gov_Date then
      Vfield := j_Field(to_char(Vcard_Old.Gov_Date, Ln_Const.Maskdate));
      Vfield.Set_Color(Vcolor);
      Vform.Put('ORDER_DATE', Vfield);
    else
      Vform.Put('ORDER_DATE', to_char(Vcard_Old.Gov_Date, Ln_Const.Maskdate));
    end if;
  
    if Vcard.Manager_Name <> Vcard_Old.Manager_Name then
      Vfield := j_Field(Vcard_Old.Manager_Name);
      Vfield.Set_Color(Vcolor);
      Vform.Put('MANAGER', Vfield);
    else
      Vform.Put('MANAGER', Vcard_Old.Manager_Name);
    end if;
  
    if Vcard.Fc_Summ <> Vcard_Old.Fc_Summ then
      Vfield := j_Field(to_char(Vcard_Old.Fc_Summ /
                                Ln_Service.Get_Currency_Scale(Vcard_Old.Currency)));
      Vfield.Set_Color(Vcolor);
      Vform.Put('DISCOUNT', Vfield);
    else
      Vform.Put('DISCOUNT',
                to_char(Vcard_Old.Fc_Summ / Ln_Service.Get_Currency_Scale(Vcard_Old.Currency)));
    end if;
  
    if Vcard.Fc_Desc <> Vcard_Old.Fc_Desc then
      Vfield := j_Field(Vcard_Old.Fc_Desc);
      Vfield.Set_Color(Vcolor);
      Vform.Put('FACTORIN_DESC', Vfield);
    else
      Vform.Put('FACTORIN_DESC', Vcard_Old.Fc_Desc);
    end if;
  
    if Vcard.Founders <> Vcard_Old.Founders then
      Vfield := j_Field(Vcard_Old.Founders);
      Vfield.Set_Color(Vcolor);
      Vform.Put('FOUNDERS', Vfield);
    else
      Vform.Put('FOUNDERS', Vcard_Old.Founders);
    end if;
  
    if Ln_Contract.Is_Hamkor_Bank() then
      Vform.Put('EBRD_SIGN', Nvl(Vcard_Old.Sign_Ebrd, 0));
    end if;
  
    Vform.Put('REDEMP_FORM', Vcard_Old.Form_Redemption);
    Vform.Put('URGENCY_TYPE', Vcard_Old.Urgency_Type);
    Vform.Put('GUAR_CLASS', Vcard_Old.Guar_Class);
    Vform.Put('DELIVERY_FORM', Vcard_Old.Form_Delivery);
    Vform.Put('CLASS_CRED', Vcard_Old.Class_Cred);
    Vform.Put('CLASS_QUALITY', Vcard_Old.Class_Quality);
    Vform.Put('DELIVERY_SIGN', Vcard_Old.Sign_Delivery);
    Vform.Put('DAYS_IN_YEAR', Vcard_Old.Days_In_Year);
    Vform.Put('CREDIT_TYPE', Vcard.Card_Type);
    Vform.Put('CREDIT_TYPE_NAME', Get_Contract_Type(Vcard.Card_Type));
    Vform.Put('LOAN_TYPE_NAME', Get_Credit_Type_Name(Vcard_Old.Loan_Type));
    Vform.Put('CURRENCY_NAME', Get_Currency_Name(Vcard_Old.Currency));
    Vform.Put('ECO_SEC_NAME', Get_Eco_Sector_Name(Vcard_Old.Eco_Sec));
    Vform.Put('OKED_NAME', Ln_Util.Get_Oked_Name(Vcard_Old.Oked));
    Vform.Put('PURPOSE_NAME', Get_Loan_Purpose_Name(Vcard_Old.Purpose_Loan));
    Vform.Put('CLIENT_NAME', Get_Client_Name(Vcard_Old.Client_Code, Vcard_Old.Filial_Code));
    Vform.Put('PURPOSE_LENDING_NAME',
              Ln_Service.Get_Purpose_Lending_Name(Vcard_Old.Purpose_Lending));
  
    for s in (select t.*,
                     (select name
                        from v_Lending_Sources
                       where Code = t.Lending_Source_Code) Lending_Source_Name
                from Ln_Credit_Sources_His t
               where t.Loan_Id = Iloan_Id
                 and to_char(t.Date_Modify, 'dd.mm.yyyy hh24:mi:ss') = Idate_Modify)
    loop
      Vcredit_Src.Push(s.Credit_Source_Code);
      Vcredit_Src_Name.Push(Get_Credit_Source_Name(s.Credit_Source_Code));
      Vlending_Src.Push(s.Lending_Source_Code);
      Vlending_Src_Name.Push(s.Lending_Source_Name);
      Vforeign_Organization.Push(s.Foreign_Organization_Code);
      Vforeign_Organization_Name.Push(Get_Foreign_Organization_Name(s.Credit_Source_Code,
                                                                    s.Foreign_Organization_Code));
      Vfinancing_Currency.Push(s.Financing_Currency_Code);
      Vfinancing_Currency_Name.Push(Get_Currency_Name(s.Financing_Currency_Code));
      Vfinancing_Amount.Push(to_char(s.Financing_Amount /
                                     Ln_Service.Get_Currency_Scale(s.Financing_Currency_Code)));
      Vloan_Line_Purpose.Push(s.Loan_Line_Purpose);
      Vunder_Guarantee_Ruz.Push(s.Under_Guarantee_Ruz);
    end loop;
  
    Vform.Put('CREDIT_SOURCE_CODE', Vcredit_Src);
    Vform.Put('CREDIT_SOURCE_NAME', Vcredit_Src_Name);
    Vform.Put('FOREIGN_ORGANIZATION_CODE', Vforeign_Organization);
    Vform.Put('FOREIGN_ORGANIZATION_NAME', Vforeign_Organization_Name);
    Vform.Put('FINANCING_CURRENCY_CODE', Vfinancing_Currency);
    Vform.Put('FINANCING_CURRENCY_NAME', Vfinancing_Currency_Name);
    Vform.Put('FINANCING_AMOUNT', Vfinancing_Amount);
    Vform.Put('LOAN_LINE_PURPOSE', Vloan_Line_Purpose);
    Vform.Put('UNDER_GUARANTEE_RUZ', Vunder_Guarantee_Ruz);
  
    /*for r in (select s.*
                from Ln_Loan_Report_Types_His t, Ln_s_Report_Types s
               where t.Loan_Id = Iloan_Id
                 and to_char(t.Date_Modify, 'dd.mm.yyyy hh24:mi:ss') = Idate_Modify
                 and t.Report_Type_Id = s.Report_Type_Id)
    loop
      Vreport_Type_Id.Push(r.Report_Type_Id);
      Vreport_Type_Name.Push(r.Name);
    end loop;
    Vform.Put('REPORT_TYPE_ID', Vreport_Type_Id);
    Vform.Put('REPORT_TYPE_NAME', Vreport_Type_Name);*/
  
    for r in (select *
                from Ln_s_Loan_Params
               where Condition = 'A'
                 and Object_Code = 'CARD')
    loop
      Vform.Put(r.Code, Get_Card_Param_Value_His(Iloan_Id, r.Code, Idate_Modify));
    end loop;
  
    Vdata.Put('fm', Vform);
  
    return Vdata.To_String;
  end Get_Card_From_History_As_Hash;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает настройки режимов работы кредита
  *  @iLoan_Id - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Mode_Actions(Iloan_Id in Ln_Card.Loan_Id%type) return varchar2 is
    v_Form   j_Hash := j_Hash;
    v_Data   j_Hash := j_Hash;
    v_Mode   Ln_Mode_Actions%rowtype;
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    select t.*
      into v_Mode
      from Ln_Mode_Actions t
     where t.Loan_Id = Vloan_Id;
    --
    v_Form.Put('REDEMPTION_DATE', v_Mode.Red_Date);
    v_Form.Put('PERC_CALC_MODE_DELIVERY', v_Mode.Mode_Perc_Calc);
    v_Form.Put('PERC_CALC_MODE_REDEMP', v_Mode.Perc_Gashenie_Control);
    v_Form.Put('SEND_TO_PERC', v_Mode.Send_To_Perc);
    v_Form.Put('LOAN_DELIQUENCY_CONTROL', v_Mode.Loan_Delinquency_Control);
    v_Form.Put('PERC_DELIQUENCY_CONTROL', v_Mode.Perc_Delinquency_Control);
    v_Form.Put('PERC_DELIQUENCY_SEND_TO', v_Mode.Perc_Delinquency_Send_To);
    v_Form.Put('DEBT_CONTROL', v_Mode.Main_Debt_Control);
    v_Form.Put('ARREAR_DEBT_CONTROL', v_Mode.Arrear_Debt_Control);
    v_Form.Put('MODE_PERS_CALC_UNUSEDLOAN', v_Mode.Mode_Pers_Calc_Unusedloan);
    v_Form.Put('CALC_PERIOD', v_Mode.Calc_Period);
    if Ln_Setting.Get_Sys_Param('USE_GRAPH_CALC_TYPE', Setup.Get_Headermfo) = 'Y' then
      v_Form.Put('GRAPH_CALC_TYPE', v_Mode.Graph_Calc_Type);
    end if;
    --
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  exception
    when No_Data_Found then
      return null;
  end Get_Mode_Actions;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Изменение режимов работы кредита
  *  @iLoan_ID                   - уникальный номер договора
  *  @iRed_Date                  - День погашения процентов
  *  @iMode_Perc_Calc            - Код режима начисления основных %% Ln_S_Mode_Perc_Calc
  *  @iSend_To_Perc              - Место аккумулирования начисленных осн. ссудных процентов Ln_S_Send_To_Perc
  *  @iLoan_Delinquency_Control  - Автоматическое слежение за просрочкой ссуды Y-N Ln_S_Yes_No
  *  @iPerc_Delinquency_Control  - Автоматическое слежение за просрочкой процентов Y-N Ln_S_Yes_No
  *  @iPerc_Delinquency_Send_To  - Место аккумулирования начисленных процентов по просроченной ссуде Ln_S_Send_To_Perc
  *  @iPerc_Gashenie_Control     - Автоматическое гашение процентов Y-N Ln_S_Yes_No
  *  @iArrear_Debt_Control       - Автоматическое погашение просроченного долга (Y,N)
  *  @iMainDebtControl           - Автоматическое гашение основного долга по графику (YES, NO)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Set_Mode_Actions
  (
    Iloan_Id                   in Ln_Card.Loan_Id%type,
    Ired_Date                  in Ln_Mode_Actions.Red_Date%type,
    Imode_Perc_Calc            in Ln_Mode_Actions.Mode_Perc_Calc%type,
    Isend_To_Perc              in Ln_Mode_Actions.Send_To_Perc%type,
    Iloan_Delinquency_Control  in Ln_Mode_Actions.Loan_Delinquency_Control%type,
    Iperc_Delinquency_Control  in Ln_Mode_Actions.Perc_Delinquency_Control%type,
    Iperc_Delinquency_Send_To  in Ln_Mode_Actions.Perc_Delinquency_Send_To%type,
    Iperc_Gashenie_Control     in Ln_Mode_Actions.Perc_Gashenie_Control%type,
    Iarrear_Debt_Control       in Ln_Mode_Actions.Arrear_Debt_Control%type,
    Imain_Debt_Control         in Ln_Mode_Actions.Main_Debt_Control%type,
    Imode_Pers_Calc_Unusedloan in Ln_Mode_Actions.Mode_Pers_Calc_Unusedloan%type,
    Icalc_Period               in Ln_Mode_Actions.Calc_Period%type,
    Igraph_Calc_Type           in Ln_Mode_Actions.Graph_Calc_Type%type
  ) is
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
  begin
    if Setup.Is_Filiallevel = 'N' then
      Raise_Application_Error(-20000, 'Только на уровне филиала');
    end if;
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    Ln_Setting.Change_Loan_Mode_Action(Iloan_Id                   => Vloan_Id,
                                       Ired_Date                  => Ired_Date,
                                       Imode_Perc_Calc            => Imode_Perc_Calc,
                                       Isend_To_Perc              => Isend_To_Perc,
                                       Iloan_Delinquency_Control  => Iloan_Delinquency_Control,
                                       Iperc_Delinquency_Control  => Iperc_Delinquency_Control,
                                       Iperc_Delinquency_Send_To  => Iperc_Delinquency_Send_To,
                                       Iperc_Gashenie_Control     => Iperc_Gashenie_Control,
                                       Imain_Debt_Control         => Imain_Debt_Control,
                                       Iarrear_Debt_Control       => Iarrear_Debt_Control,
                                       Imode                      => 'M',
                                       Imode_Pers_Calc_Unusedloan => Imode_Pers_Calc_Unusedloan,
                                       Icalc_Period               => Icalc_Period,
                                       Igraph_Calc_Type           => Igraph_Calc_Type);
  end Set_Mode_Actions;
  ----------------------------------------------------------------------------------------------------
  Function Get_Client_Subject_Code
  (
    Iclient_Code in varchar2,
    Ifilial_Code in varchar2 := Setup.Filial_Code,
    Iclient_Id   in number := null
  ) return Ln_Claim.Client_Type%type is
    result Ln_Claim.Client_Type%type;
  begin
    begin
      select Decode(t.Typeof, 11, 'I', t.Subject)
        into result
        from Client_Current t
       where t.Code = Iclient_Code
         and t.Code_Filial = Decode(t.Subject, 'P', Ifilial_Code, Setup.Get_Headermfo);
    exception
      when others then
        select Decode(t.Typeof, 11, 'I', t.Subject)
          into result
          from Client_Current t
         where t.Id = Iclient_Id;
    end;
    return case result when 'P' then Ln_Const.Physical_Person when 'I' then Ln_Const.Individual_Entrepreneur else Ln_Const.Juridical_Person end;
  exception
    when No_Data_Found then
      Raise_Application_Error(-20000,
                              'Клиент филиала ' || Ifilial_Code || ' с кодом "' || Iclient_Code ||
                              '" не найден в базе клиентов банка!');
  end Get_Client_Subject_Code;
  ----------------------------------------------------------------------------------------------------
  Procedure Get_Client_Info
  (
    Iclient_Code  in varchar2,
    Ifilial_Code  in varchar2 := Setup.Filial_Code,
    Iclient_Id    in number := null,
    Osubject      out varchar2,
    Ophone        out varchar2,
    Omobile_Phone out varchar2,
    Ofax          out varchar2,
    Oreg_Date     out varchar2
  ) is
    result     Ln_Claim.Client_Type%type;
    Vclient_Id Client_Current.Id%type;
  begin
    begin
      select Id, Decode(t.Typeof, 11, 'I', t.Subject), t.Phone, t.Mobile_Phone, t.Fax
        into Vclient_Id, result, Ophone, Omobile_Phone, Ofax
        from Client_Current t
       where t.Code = Iclient_Code
         and t.Code_Filial = Decode(t.Subject, 'P', Ifilial_Code, Setup.Get_Headermfo);
    exception
      when others then
        select Id, Decode(t.Typeof, 11, 'I', t.Subject), t.Phone, t.Mobile_Phone, t.Fax
          into Vclient_Id, result, Ophone, Omobile_Phone, Ofax
          from Client_Current t
         where t.Id = Iclient_Id;
    end;
    if result <> 'P' then
      select Registration_Date
        into Oreg_Date
        from Client_Juridical_Current
       where Id = Vclient_Id;
    end if;
    Osubject      := case result
                       when 'P' then
                        Ln_Const.Physical_Person
                       when 'I' then
                        Ln_Const.Individual_Entrepreneur
                       else
                        Ln_Const.Juridical_Person
                     end;
    Omobile_Phone := Ln_Util.Get_Mobile_Number(Omobile_Phone);
  exception
    when No_Data_Found then
      Raise_Application_Error(-20000,
                              'Клиент филиала ' || Ifilial_Code || ' с кодом "' || Iclient_Code ||
                              '" не найден в базе клиентов банка!');
  end Get_Client_Info;
  ----------------------------------------------------------------------------------------------------
  Function Get_Claim_Data_As_Jhash(Iclaim_Id in number) return varchar2 is
    Vform                       j_Hash := j_Hash();
    Vdata                       j_Hash := j_Hash();
    Vfield                      j_Field;
    Vclaim                      Ln_Cache.Claim_t; --Ln_v_Claim%rowtype;
    Vclaim_Appendix             Ln_Claim_Appendix%rowtype;
    Vblank                      Ln_Blanks%rowtype;
    Vclaim_Add                  Ln_Claim_Additional%rowtype;
    v_Client_Type_Name          v_Subject_Type.Name%type;
    v_Resident_Name             v_Rez_Cl.Name%type;
    v_Doc_Type_Name             v_Verifying_Document_Type.Name%type;
    v_Sex_Name                  v_Subject_Sexual_Identity.Name%type;
    v_Subject_Code              Ln_Claim.Client_Type%type;
    v_Phone                     Client_Current.Phone%type;
    v_Mobile_Phone              Client_Current.Mobile_Phone%type;
    v_Fax                       Client_Current.Fax%type;
    v_Reg_Date                  date;
    v_Product                   Hashtable;
    v_Pr_Desc_Code              j_Array := j_Array();
    v_Pr_Perc_Rate              j_Array := j_Array();
    v_Pr_Desc_Name              j_Array := j_Array();
    v_Pr_Perc_Type              j_Array := j_Array();
    v_Pr_Perc_Rate_All          j_Array := j_Array();
    v_Sv_Contract_Num           varchar2(30); --Sv_Contracts.Contract_Number%type;
    v_Info                      varchar2(500);
    v_Departament_Id            number;
    v_Name                      varchar2(200);
    v_Allow_To_Change_Calc_Summ varchar2(1) := 'N';
    v_Mahalla_Name              varchar2(200);
    v_Income_Types              j_Array := j_Array();
    v_Income_Amounts            j_Array := j_Array();
    -------------------------------------------
    Function Get_Product_Field
    (
      i_Param_Code varchar2,
      i_Value      varchar2
    ) return j_Field is
      v_Values Array_Varchar2;
      result   j_Field := j_Field(i_Value);
    begin
      v_Values := v_Product.Get_Optional_Array_Varchar2(i_Param_Code);
      if v_Values.Count = 1 then
        Result.Set_Readonly(true);
      end if;
      return result;
    exception
      when others then
        return result;
    end;
    -------------------------------------------
  begin
    Ln_Init.Set_Claim(i_Claim_Id => Iclaim_Id);
    Vclaim := Ln_Init.Get_Claim;
    /*select t.* into vClaim
     from Ln_V_Claim t
    where t.claim_id = iClaim_Id;*/
    begin
      select *
        into Vclaim_Appendix
        from Ln_Claim_Appendix
       where Claim_Id = Iclaim_Id;
      select *
        into Vclaim_Add
        from Ln_Claim_Additional t
       where t.Claim_Id = Iclaim_Id;
    exception
      when No_Data_Found then
        null;
    end;
    Ln_Util.Select_Blank(Iclaim_Id, Vblank, false);
    Ln_Init.Set_Product(Vclaim.Product_Id);
    Get_Client_Info(Vclaim.Client_Code,
                    Vclaim.Mfo,
                    Vclaim.Client_Id,
                    v_Subject_Code,
                    v_Phone,
                    v_Mobile_Phone,
                    v_Fax,
                    v_Reg_Date);
    --
    Vclaim.Client_Type := Nvl(Vclaim.Client_Type, v_Subject_Code);
    select s.Name
      into v_Client_Type_Name
      from v_Subject_Type s
     where s.Code = Vclaim.Client_Type;
    begin
      select t.Name
        into v_Resident_Name
        from v_Rez_Cl t
       where t.Code = Vclaim.Resident;
    exception
      when No_Data_Found then
        null;
    end;
    Vform.Put('claimId', Iclaim_Id);
    Vform.Put('clientId', Vclaim.Client_Id);
    ----
    --$IF CORE_APP_VERSION.C_CLIENT_UNIQUE $THEN
    --Vform.Put('clientUid', Vclaim.Client_Uid); 
    --$END
    --
    if Ln_Util.Bank_Has_Blank_Used then
      begin
        if Vclaim.Product_Id <> 0 then
          select Department_Id
            into v_Departament_Id
            from Ln_s_Blank_Product_Departments
           where Product_Id = Vclaim.Product_Id;
        else
          v_Departament_Id := 5;
        end if;
      exception
        when No_Data_Found then
          null; -- raise_application_error(-20000, 'Продукт ' || ln_util.Get_Product_Name(vClaim.Product_Id) || ' не прикреплен к департаменту');
      end;
    end if;
    Vform.Put('clientTypeOption', Vclaim.Client_Type);
    Vfield := j_Field(Vclaim.Client_Code);
    Vfield.Set_Readonly(true);
    Vform.Put('clientCode', Vfield);
    Vform.Put('clientName', Vclaim.Client_Name);
    Vform.Put('clientId', Vclaim.Client_Id);
    Vform.Put('borrowerCode', Vclaim.Borrower);
    Vform.Put('borrowerName', Get_Borrower_Name(Vclaim.Borrower));
    Vform.Put('clientType', Vclaim.Client_Type);
    Vform.Put('clientTypeName', v_Client_Type_Name);
    Vform.Put('resident', Vclaim.Resident);
    Vform.Put('residentName', v_Resident_Name);
    Vform.Put('inn', Vclaim.Inn);
    Vform.Put('creditType', Vclaim.Credit_Type);
    if Ln_Util.Is_Claim_Adobdet_Niki(Vclaim.Claim_Id) then
      Vfield := j_Field(Vclaim.Claim_Num);
      Vfield.Set_Readonly(true);
      Vform.Put('claimNum', Vfield);
      Vfield := j_Field(Vclaim.Claim_Date);
      Vfield.Set_Readonly(true);
      Vform.Put('claimDate', Vfield);
    else
      Vform.Put('claimNum', Vclaim.Claim_Num);
      Vform.Put('claimDate', Vclaim.Claim_Date);
    end if;
    Vform.Put('periodUseInMonths', Substr(Vclaim.Period_Use, 0, 3));
    Vform.Put('periodUseInDays', Substr(Vclaim.Period_Use, -2));
    Vform.Put('summClaim', to_char(Vclaim.Amount));
    Vform.Put('summInitial', to_char(Vclaim.Summinitial));
    Vform.Put('currency', Vclaim.Currency);
    Vform.Put('currencyName', Get_Currency_Name(Vclaim.Currency));
    Vform.Put('loanType', Get_Product_Field('LOAN_TYPE_CODE', Vclaim.Loan_Type));
    Vform.Put('loanTypeName', Vclaim.Loan_Type_Name);
    Vform.Put('lendingType', Vclaim.Lending_Type);
    Vform.Put('lendingTypeName', Ln_Service.Get_Lending_Type_Name(Vclaim.Lending_Type));
    Vform.Put('purposeLoan', Get_Product_Field('PURPOSE_CODE', Vclaim.Purpose_Loan));
    Vform.Put('purposeLoanName', Vclaim.Purpose_Loan_Name);
    Vform.Put('purposeLending', Vclaim.Purpose_Lending);
    Vform.Put('purposeLendingName', Ln_Service.Get_Purpose_Lending_Name(Vclaim.Purpose_Lending));
    Vform.Put('productId', Ln_Init.Get_Product_Id);
    Vform.Put('productName', Ln_Util.Get_Product_Name(Ln_Init.Get_Product_Id));
    Vform.Put('productGroupId', Ln_Product.Product_Group_Id(Ln_Init.Get_Product_Id));
    -- mahallaCode
    Vform.Put('mahallaCode', Vclaim_Appendix.Mahalla_Code);
    --SR
    begin
      select Mlm.Cur_Nls(name) name
        into v_Mahalla_Name
        from Ln_s_Mahalla
       where Mahalla_Code = Vclaim_Appendix.Mahalla_Code
         and Rownum = 1;
    exception
      when No_Data_Found then
        null;
    end;
    --
    --Vform.Put('mahallaName', v_Mahalla_Name);
    --
    if Vclaim.Client_Type in (Ln_Const.Physical_Person) or
       (Vclaim.Client_Type in (Ln_Const.Juridical_Person, Ln_Const.Individual_Entrepreneur) and
       Vclaim.Resident = Ln_Const.Nonresident) then
      Vclaim.Sex := Nvl(Vclaim.Sex, '1');
      begin
        select name
          into v_Sex_Name
          from v_Subject_Sexual_Identity
         where Code = Vclaim.Sex;
      exception
        when No_Data_Found then
          null;
      end;
      begin
        select name
          into v_Doc_Type_Name
          from v_Verifying_Document_Type
         where Code = Vclaim.Document_Type;
      exception
        when No_Data_Found then
          null;
      end;
      Vform.Put('sex', Nvl(Vclaim.Sex, '1'));
      Vform.Put('sexName', v_Sex_Name);
      Vform.Put('dateOfBirth', Vclaim.Date_Of_Birth);
      Vform.Put('docType', Vclaim.Document_Type);
      Vform.Put('docTypeName', v_Doc_Type_Name);
      Vform.Put('docNumber', Vclaim.Doc_Number);
      Vform.Put('docRegDate', Vclaim.Doc_Reg_Date);
      Vform.Put('docRegPlace', Vclaim.Doc_Reg_Place);
      Vform.Put('employmentSign', Nvl(Vclaim.Employment_Sign, '0'));
      Vform.Put('regionCode', Vclaim.Region_Code);
      Vform.Put('regionName', Get_Region_Name(Vclaim.Region_Code));
      Vform.Put('districtCode', Vclaim.District_Code);
      Vform.Put('districtName', Get_District_Name(Vclaim.Region_Code, Vclaim.District_Code));
      Vform.Put('clientAddress', Vclaim.Client_Address);
    else
      --Yuriklar uchun
      Vform.Put('ecoSec', Get_Product_Field('ECO_SEC_CODE', Vclaim.Eco_Sec));
      Vform.Put('ecoSecName', Vclaim.Eco_Sec_Name);
      Vform.Put('oked', Vclaim.Oked_Code);
      Vform.Put('okedName', Vclaim.Oked_Name);
      Vform.Put('normativeActCode', Vclaim.Normative_Act_Code);
      Vform.Put('normativeActName', Get_Normative_Act_Name(Vclaim.Normative_Act_Code));
    end if;
    Vform.Put('loanLinePurpose', Vclaim_Appendix.Loan_Line_Purpose);
    --
    Vform.Put('gracePeriod', Vclaim_Appendix.Grace_Period);
    if Vclaim.Client_Type in (Ln_Const.Physical_Person, Ln_Const.Individual_Entrepreneur) or
       Ln_Init.Is_Overdraft_Product(Vclaim.Product_Id) then
      Vfield := j_Field(Vclaim.Citizen_Id);
      Vfield.Set_Readonly(true);
      Vform.Put('DEBT_BURDEN', Vclaim_Add.Debt_Burden);
      Vform.Put('citizenId', Vfield);
      Vform.Put('cadastralNumOfResidence', Vclaim.Cadas_Num_Resident);
      Vform.Put('cadastralRegistrationNum', Vclaim.Cadas_Regist_Num);
      Vform.Put('familyStatus', Vclaim_Appendix.Family_Status);
      Vform.Put('jobPosition', Vclaim_Appendix.Job_Position);
    end if;
    if Vclaim.Client_Type in (Ln_Const.Physical_Person, Ln_Const.Individual_Entrepreneur) and
       Vclaim.Employment_Sign = Ln_Const.Working or Ln_Init.Is_Overdraft_Product(Vclaim.Product_Id) then
      /*Vform.Put('ninpsBankCode', Vclaim.Ninps_Bank_Code);
      Vform.Put('ninpsBankName', Get_Bank_Name(Vclaim.Ninps_Bank_Code));
      Vform.Put('ninps', Vclaim.Ninps);
      Vform.Put('jobInn', Vclaim.Job_Inn);
      Vform.Put('jobName', Vclaim.Job_Name);*/
      --
      Vform.Put('topFilialCode', Vclaim_Appendix.Parent_Client_Filial_Code);
      Vform.Put('topFilialName', Bank.Get_Bank_Name(Vclaim_Appendix.Parent_Client_Filial_Code));
      --
      for r in (select Id, Code, name
                  from Client_Current
                 where Id = Vclaim.Parent_Client_Id)
      loop
        Vform.Put('parentClientId', r.Id);
        Vform.Put('parentClientCode', r.Code);
        Vform.Put('svClientCode', r.Code);
        Vform.Put('svClientName', r.Name);
      end loop;
      --
      for r in (select Id, Code, name
                  from Client_Current
                 where Id = Vclaim_Appendix.Top_Client_Id)
      loop
        Vform.Put('topClientId', r.Id);
        Vform.Put('topClientCode', r.Code);
        Vform.Put('topClientName', r.Name);
      end loop;
      --Plastic Card Numbers
      --if Ln_Init.Get_Product_Group_Id = -1 then
      Vfield := j_Field(Vclaim_Appendix.Card_Number);
      if not (Setup.Get_Headermfo = '09048' and Ln_Init.Get_Product_Id = 165) then
        Vfield.Set_Readonly(true);
      end if;
      Vform.Put('cardNumber', Vfield);
      --end if;
      --
      Ln_Util.Get_Sv_Contract_Info(i_Contract_Id     => Vclaim_Appendix.Parent_Sv_Contract_Id,
                                   i_Card_Type       => Vclaim_Appendix.Card_Type,
                                   o_Contract_Number => v_Sv_Contract_Num,
                                   o_Contract_Info   => v_Info);
      Vform.Put('parentSvContractId', Vclaim_Appendix.Parent_Sv_Contract_Id);
      Vform.Put('parentSvContractCode', v_Sv_Contract_Num);
      Vform.Put('parentSvContractInfo', v_Info);
      --
      Ln_Util.Get_Sv_Contract_Info(i_Contract_Id     => Vclaim_Appendix.Sv_Contract_Id,
                                   i_Card_Type       => Vclaim_Appendix.Card_Type,
                                   o_Contract_Number => v_Sv_Contract_Num,
                                   o_Contract_Info   => v_Info);
      Vform.Put('svContractId', Vclaim_Appendix.Sv_Contract_Id);
      Vform.Put('svContractCode', v_Sv_Contract_Num);
      Vform.Put('svContractInfo', v_Info);
      --
      Ln_Util.Get_Sv_Contract_Info(i_Contract_Id     => Vclaim_Appendix.Sv_Main_Contract_Id,
                                   i_Card_Type       => Vclaim_Appendix.Card_Type,
                                   o_Contract_Number => v_Sv_Contract_Num,
                                   o_Contract_Info   => v_Info);
      Vform.Put('svMainContractId', Vclaim_Appendix.Sv_Main_Contract_Id);
      Vform.Put('svMainContractCode', v_Sv_Contract_Num);
      Vform.Put('svMainContractInfo', v_Info);
    end if;
    Vform.Put('cardType', Vclaim_Appendix.Card_Type);
    --Аслиддин жиян
    Vform.Put('attracted_by', Vclaim_Add.Attracted_Id);
    -- Элдор
    Vform.Put('aNetId', Vclaim_Add.a_Net_Id);
    --
    declare
      v_Arrtacted_Name varchar2(200);
    begin
      select t.Last_Name || ' ' || t.First_Name || ' ' || t.Middle_Name
        into v_Arrtacted_Name
        from Hr_Emps t
       where t.Emp_Id = Vclaim_Add.Attracted_Id;
      Vform.Put('attracted_by_name', v_Arrtacted_Name);
    exception
      when No_Data_Found then
        null;
    end;
    --
    if Vclaim.Client_Type in (Ln_Const.Juridical_Person, Ln_Const.Individual_Entrepreneur) then
      Vform.Put('objectNeoplazmSign', Vclaim.Object_Neoplazm_Sign);
      Vform.Put('enterpriseClassification', Vclaim.Enterprise_Classification);
      Vform.Put('jobsAmount', Vclaim.Jobs_Amount);
      Vform.Put('ergspData', Vclaim_Add.Egrsp_Data);
      Vform.Put('ergspNumber', Vclaim_Add.Egrsp_Number);
      Vform.Put('empsCount', Vclaim_Add.Emps_Count);
      --vForm.put('ergspId'                  , vClaim_Add.Egrsp_Id);
      if Vclaim.Client_Type = Ln_Const.Individual_Entrepreneur then
        Vform.Put('activityForm', Vclaim_Add.Activity_Form);
        Vform.Put('activityDirection', Vclaim_Add.Activity_Direction);
      end if;
      -- Юрик клиенты
      if Vclaim.Client_Type in (Ln_Const.Juridical_Person) and not Ln_Init.Is_Online_Product then
        Vform.Put('ownership', Vclaim_Add.Ownership);
        Vform.Put('ownershipName', Get_Ownership_Name(Vclaim_Add.Ownership));
        --vForm.put('smallBusiness'            , vClaim_Add.Small_Business);
        Vform.Put('shortName', Vclaim_Add.Short_Name);
        Vform.Put('profit', Vclaim_Add.Profit);
      end if;
    end if;
    --Vform.Put('fillClaimDistrict', Vclaim_Appendix.Fill_Claim_District);
    --Vform.Put('fillClaimDistrictName',Ln_Util.Get_District_Name(i_District_Code => Vclaim_Appendix.Fill_Claim_District));
    --vForm.Put('loanLinePurpose', vBlank.Loan_Line_Purpose);
    --percent
    if Ln_Setting.Get_Sys_Param('MANDATORY_FILLING_OF_THE_PERC_RATES_IN_THE_CLAIM',
                                Setup.Get_Headermfo) = 'Y' then
      for r in (select t.Perc_Code_Desc,
                       s.Name,
                       t.Perc_Rate,
                       t.Perc_Rate_Type,
                       (select (select --+ index_desc(r LN_INTEREST_RATES_PK)
                                 i.Rate
                                  from Ln_Interest_Rates i
                                 where i.Code = p.Per_Rate_Id
                                   and Rownum = 1)
                          from Ln_s_Perc_Rate_Type p
                         where p.Per_Rate_Id = t.Perc_Rate_Type
                           and Rownum = 1) Curr_Rate
                  from Ln_Blank_Percent_Rate t, Ln_s_Perc_Code_Desc s
                 where t.Claim_Id = Vclaim.Claim_Id
                   and t.Perc_Code_Desc = s.Code
                 order by s.Order_By)
      loop
        v_Pr_Desc_Code.Push(r.Perc_Code_Desc);
        v_Pr_Desc_Name.Push(r.Name);
        v_Pr_Perc_Rate.Push(r.Perc_Rate);
        v_Pr_Perc_Type.Push(r.Perc_Rate_Type);
        v_Pr_Perc_Rate_All.Push(r.Curr_Rate);
      end loop;
      Vform.Put('perc_rate_desc_code', v_Pr_Desc_Code);
      Vform.Put('perc_rate_desc_name', v_Pr_Desc_Name);
      Vform.Put('perc_rate', v_Pr_Perc_Rate);
      Vform.Put('perc_rate_type', v_Pr_Perc_Type);
      Vform.Put('perc_rate_all', v_Pr_Perc_Rate_All);
    end if;
    --
    if Is_Agricultural_Loans_Used and
       Ln_Service.Is_Array_Value(Ln_Setting.Get_Sys_Param_Value_List('AGRO_PURPOSE_LOAN',
                                                                     Setup.Get_Headermfo),
                                 Vclaim.Purpose_Loan) then
      declare
        Vagr_Product_Code varchar2(50);
        Vagr_Unit         varchar2(50);
        Vagr_Contract_No  varchar2(50);
        Vagr_Date_Begin   date;
        Vagr_Date_End     date;
        Vagr_Product_v    number;
        Vagr_Product_s    number;
        Vagr_Contract_Sum number;
        Vagr_Id           number;
      begin
        execute immediate 'select product_code ' || ', unit ' || ', contract_no ' ||
                          ', begin_date ' || ', end_date ' || ', product_v ' || ', product_s ' ||
                          ', contract_sum ' || ', id ' || 'from ln_agr_contracts ' ||
                          'where claim_id = :1'
          into Vagr_Product_Code, Vagr_Unit, Vagr_Contract_No, Vagr_Date_Begin, Vagr_Date_End, Vagr_Product_v, Vagr_Product_s, Vagr_Contract_Sum, Vagr_Id
          using Iclaim_Id;
        Vform.Put('h_product_code', Vagr_Product_Code);
        Vform.Put('product_code', Vagr_Product_Code);
        Vform.Put('h_unit', Vagr_Unit);
        Vform.Put('unit', Vagr_Unit);
        Vform.Put('contract_no', Vagr_Contract_No);
        Vform.Put('begin_date', Vagr_Date_Begin);
        Vform.Put('end_date', Vagr_Date_End);
        Vform.Put('product_v', Vagr_Product_v);
        Vform.Put('product_s', Vagr_Product_s);
        Vform.Put('contract_sum',
                  (Vagr_Contract_Sum / Ln_Service.Get_Currency_Scale(Vclaim.Currency)));
        Vform.Put('h_agr_contract_id', Vagr_Id);
      exception
        when others then
          null;
      end;
    end if;
    --
    if Ln_Util.Bank_Has_Blank_Used then
      -- если кредитный продукт "Другой"
      begin
        select Department_Id
          into v_Departament_Id
          from Ln_s_Blank_Product_Departments
         where Product_Id = Vclaim.Product_Id;
      exception
        when No_Data_Found then
          null; -- raise_application_error(-20000, 'Продукт ' || ln_util.Get_Product_Name(vClaim.Product_Id) || ' не прикреплен к департаменту');
      end;
      Vform.Put('departmentId', to_char(v_Departament_Id));
    end if;
    if Vclaim.Client_Type = Ln_Const.Physical_Person and
       Vclaim_Appendix.Employment_Sign = Ln_Const.Working and v_Departament_Id = 5 then
      Vform.Put('IS_ANNUITET', to_char(Vclaim_Appendix.Is_Annuitet));
      Vform.Put('avg_month_income', to_char(Vclaim_Appendix.Avg_Month_Income / 100));
      Vform.Put('avg_month_outcome', to_char(Vclaim_Appendix.Avg_Month_Outcome / 100));
    end if;
    Vform.Put('mobilePhone',
              Ln_Util.Get_Mobile_Number(Nvl(v_Mobile_Phone, Vclaim_Appendix.Mobile_Number)));
    Vform.Put('fax', v_Fax);
    Vform.Put('clientRegDate', to_char(v_Reg_Date, Ln_Const.Maskdate));
    ---
    begin
      select Mlm.Cur_Nls(name)
        into v_Name
        from Ln_Credit_Objects t
       where t.Id = Vclaim_Appendix.Credit_Object_Id;
    exception
      when No_Data_Found then
        null;
    end;
    Vform.Put('useCreditObject', Vclaim_Appendix.Use_Credit_Object);
    Vform.Put('creditObject', Vclaim_Appendix.Credit_Object_Id);
    Vform.Put('creditObjectName', v_Name);
    Vform.Put('creditObjectSum', Vclaim_Appendix.Credit_Object_Sum / 100);
    --- Overdraft Productlari uchun ishlaydi
    if Ln_Init.Is_Overdraft_Group then
      if Ln_Service.Is_Array_Value(Ln_Setting.Get_Sys_Param_Value_List('ALLOW_TO_CHANGE_CALCULATED_AMOUNT',
                                                                       Setup.Get_Headermfo),
                                   Vclaim.Client_Code) then
        v_Allow_To_Change_Calc_Summ := 'Y';
      end if;
      ---
      Vform.Put('allowToChangeCalcSum', v_Allow_To_Change_Calc_Summ);
    end if;
    for Income in (select *
                     from Ln_Incomes
                    where Claim_Id = Vclaim.Claim_Id
                      and Client_Id = Vclaim.Client_Id
                      and Client_Type = Ln_Const.c_Borrower)
    loop
      v_Income_Types.Push(Income.Type);
      v_Income_Amounts.Push(Income.Amount / 100);
    end loop;
    Vform.Put('INCOME_TYPE', v_Income_Types);
    Vform.Put('averageSalary', v_Income_Amounts);
    Vdata.Put('fm', Vform);
    return Vdata.To_String();
  end Get_Claim_Data_As_Jhash;
  --HISTORY
  ----------------------------------------------------------------------------------------------------
  Function Get_Claim_His_As_Jhash
  (
    Iclaim_Id    in number,
    Idate_Modify varchar2
  ) return varchar2 is
    Vfield             j_Field;
    Vform              j_Hash := j_Hash();
    Vdata              j_Hash := j_Hash();
    Vclaim             Ln_v_Claim%rowtype;
    Vclaim_h           Ln_Claim_His%rowtype;
    Vclaim_Appx_h      Ln_Claim_Appendix_His%rowtype;
    v_Client_Type_Name v_Subject_Type.Name%type;
    v_Resident_Name    v_Rez_Cl.Name%type;
    v_Doc_Type_Name    v_Verifying_Document_Type.Name%type;
    v_Sex_Name         v_Subject_Sexual_Identity.Name%type;
    v_Subject_Code     Ln_Claim.Client_Type%type;
    v_Phone            Client_Current.Phone%type;
    v_Mobile_Phone     Client_Current.Mobile_Phone%type;
    v_Fax              Client_Current.Fax%type;
    v_Reg_Date         date;
    v_Departament_Id   number;
    Vclaim_Add         Ln_Claim_Additional%rowtype;
    v_Pr_Desc_Code     j_Array := j_Array();
    v_Pr_Perc_Rate     j_Array := j_Array();
    v_Pr_Desc_Name     j_Array := j_Array();
    v_Pr_Perc_Type     j_Array := j_Array();
    v_Pr_Perc_Rate_All j_Array := j_Array();
    Function c_Field
    (
      o      varchar2,
      n      varchar2,
      o_Name varchar2 := null
    ) return j_Field is
    begin
      Vfield := j_Field(o);
      if o_Name is not null then
        Vfield := j_Field(o_Name);
      end if;
      if o <> n then
        Vfield.Set_Color('red');
      end if;
      return Vfield;
    end c_Field;
  begin
    begin
      select t.*
        into Vclaim_h
        from Ln_Claim_His t
       where t.Claim_Id = Iclaim_Id
         and t.Date_Modify = to_date(Idate_Modify, 'dd.mm.yyyy hh24:mi:ss');
    exception
      when No_Data_Found then
        return Get_Claim_Data_As_Jhash(Iclaim_Id => Iclaim_Id);
    end;
    begin
      select *
        into Vclaim_Add
        from Ln_Claim_Additional t
       where t.Claim_Id = Iclaim_Id;
    exception
      when No_Data_Found then
        null;
    end;
    select t.*
      into Vclaim
      from Ln_v_Claim t
     where t.Claim_Id = Iclaim_Id;
    --
    Get_Client_Info(Vclaim.Client_Code,
                    Vclaim.Mfo,
                    Vclaim.Client_Id,
                    v_Subject_Code,
                    v_Phone,
                    v_Mobile_Phone,
                    v_Fax,
                    v_Reg_Date);
    --
    Vclaim.Client_Type := Nvl(Vclaim.Client_Type, v_Subject_Code);
    select s.Name
      into v_Client_Type_Name
      from v_Subject_Type s
     where s.Code = Vclaim.Client_Type;
    begin
      select t.Name
        into v_Resident_Name
        from v_Rez_Cl t
       where t.Code = Vclaim.Resident;
    exception
      when No_Data_Found then
        null;
    end;
    Vform.Put('dateModify', Idate_Modify);
    Vform.Put('productId', Nvl(Vclaim.Product_Id, Ln_Init.Get_Default_Product_Id));
    --SR
    Vform.Put('productName',
              Ln_Util.Get_Product_Name(Nvl(Vclaim.Product_Id, Ln_Init.Get_Default_Product_Id)));
    Vform.Put('mobilePhone',
              Ln_Util.Get_Mobile_Number(Nvl(v_Mobile_Phone, Vclaim_Appx_h.Mobile_Number)));
    Vform.Put('normativeActName', Get_Normative_Act_Name(Vclaim.Normative_Act_Code));
    --
    Vform.Put('claimId', Iclaim_Id);
    Vform.Put('clientId', Vclaim.Client_Id);
    /*$IF CORE_APP_VERSION.C_CLIENT_UNIQUE $THEN
    Vform.Put('clientUid', Vclaim.Client_Uid);
    $END*/
    Vform.Put('clientTypeOption', Vclaim.Client_Type);
    Vform.Put('clientCode', Vclaim.Client_Code);
    Vform.Put('clientName', Vclaim.Client_Name);
    Vform.Put('borrowerCode', Vclaim.Borrower);
    Vform.Put('borrowerName',
              c_Field(Vclaim_h.Borrower, Vclaim.Borrower, Get_Borrower_Name(Vclaim_h.Borrower)));
    Vform.Put('clientType', Vclaim.Client_Type);
    --vForm.put('clientTypeName'    , v_Client_Type_Name);
    Vform.Put('resident', Vclaim.Resident);
    Vform.Put('residentName', v_Resident_Name);
    Vform.Put('inn', c_Field(Vclaim_h.Inn, Vclaim.Inn));
    Vform.Put('creditType', Vclaim.Credit_Type);
    Vform.Put('claimNum', c_Field(Vclaim_h.Claim_Num, Vclaim.Claim_Num));
    Vform.Put('claimDate', c_Field(Vclaim_h.Claim_Date, Vclaim.Claim_Date));
    Vform.Put('periodUseInMonths',
              c_Field(Substr(Vclaim_h.Period_Use, 0, 3), Substr(Vclaim.Period_Use, 0, 3)));
    Vform.Put('periodUseInDays',
              c_Field(Substr(Vclaim_h.Period_Use, -2), Substr(Vclaim.Period_Use, -2)));
    Vform.Put('summClaim',
              c_Field(to_char(Vclaim_h.Summ_Claim /
                              Ln_Service.Get_Currency_Scale(Vclaim_h.Currency)),
                      to_char(Vclaim.Amount)));
    Vform.Put('currency', c_Field(Vclaim_h.Currency, Vclaim.Currency));
    Vform.Put('currencyName',
              c_Field(Vclaim_h.Currency, Vclaim.Currency, Get_Currency_Name(Vclaim_h.Currency)));
    Vform.Put('loanType', c_Field(Vclaim_h.Loan_Type, Vclaim.Loan_Type));
    Vform.Put('gracePeriod', Vclaim_Appx_h.Grace_Period);
    select s.Group_Name || ' - ' || s.Name
      into Vclaim.Loan_Type_Name
      from Ln_v_Credit_Types s
     where s.Code = Vclaim_h.Loan_Type;
    Vform.Put('loanTypeName', c_Field(Vclaim_h.Loan_Type, Vclaim.Loan_Type, Vclaim.Loan_Type_Name));
    Vform.Put('ecoSec', c_Field(Vclaim_h.Eco_Sec, Vclaim.Eco_Sec));
    begin
      select s.Name
        into Vclaim.Eco_Sec_Name
        from Ln_v_Sector s
       where s.Code = Vclaim_h.Eco_Sec
         and s.Condition = 'A'
         and s.Kod_Class <> '000';
    exception
      when No_Data_Found then
        null;
    end;
    --Vform.Put('ecoSecName', c_Field(Vclaim_h.Eco_Sec, Vclaim.Eco_Sec, Vclaim.Eco_Sec_Name));
    Vform.Put('oked', c_Field(Vclaim_h.Oked, Vclaim.Oked_Code));
    --Vform.Put('okedName',c_Field(Ln_Util.Get_Oked_Name(Vclaim_h.Oked), Ln_Util.Get_Oked_Name(Vclaim.Oked_Code)));
    Vform.Put('purposeLoan', c_Field(Vclaim_h.Purpose_Loan, Vclaim.Purpose_Loan));
    select s.Name
      into Vclaim.Purpose_Loan_Name
      from Ln_v_Purpose_Cipher s
     where s.Code = Vclaim_h.Purpose_Loan
       and s.Condition = 'A'
       and s.Code1 <> '00';
    Vform.Put('purposeLoanName',
              c_Field(Vclaim_h.Purpose_Loan, Vclaim.Purpose_Loan, Vclaim.Purpose_Loan_Name));
    Vform.Put('lendingType', c_Field(Vclaim_h.Lending_Type, Vclaim.Lending_Type));
    Vform.Put('lendingTypeName',
              c_Field(Vclaim_h.Lending_Type,
                      Vclaim.Lending_Type,
                      Ln_Service.Get_Lending_Type_Name(Vclaim_h.Lending_Type)));
    Vform.Put('purposeLending', c_Field(Vclaim_h.Purpose_Lending, Vclaim.Purpose_Lending));
    Vform.Put('purposeLendingName',
              c_Field(Vclaim_h.Purpose_Lending,
                      Vclaim.Purpose_Lending,
                      Ln_Service.Get_Purpose_Lending_Name(Vclaim_h.Purpose_Lending)));
    begin
      select q.Normative_Act as Normative_Act_Code,
             q.Object_Neoplazm_Sign,
             q.Enterprise_Classification,
             q.Jobs_Amount,
             q.Sex,
             q.Document_Type,
             q.Employment_Sign,
             q.Region,
             q.District,
             q.Ninps_Bank,
             q.Ninps,
             q.Job_Inn,
             q.Job_Name,
             q.Citizen_Id,
             q.Cadas_Num_Resident,
             q.Cadas_Regist_Num,
             q.Parent_Client_Id,
             q.Average_Salary,
             q.Family_Status,
             q.Job_Position,
             q.Fill_Claim_District,
             q.Is_Annuitet,
             q.Avg_Month_Income,
             q.Avg_Month_Outcome,
             q.Mobile_Number,
             q.Loan_Line_Purpose
        into Vclaim_Appx_h.Normative_Act,
             Vclaim_Appx_h.Object_Neoplazm_Sign,
             Vclaim_Appx_h.Enterprise_Classification,
             Vclaim_Appx_h.Jobs_Amount,
             Vclaim_Appx_h.Sex,
             Vclaim_Appx_h.Document_Type,
             Vclaim_Appx_h.Employment_Sign,
             Vclaim_Appx_h.Region,
             Vclaim_Appx_h.District,
             Vclaim_Appx_h.Ninps_Bank,
             Vclaim_Appx_h.Ninps,
             Vclaim_Appx_h.Job_Inn,
             Vclaim_Appx_h.Job_Name,
             Vclaim_Appx_h.Citizen_Id,
             Vclaim_Appx_h.Cadas_Num_Resident,
             Vclaim_Appx_h.Cadas_Regist_Num,
             Vclaim_Appx_h.Parent_Client_Id,
             Vclaim_Appx_h.Average_Salary,
             Vclaim_Appx_h.Family_Status,
             Vclaim_Appx_h.Job_Position,
             Vclaim_Appx_h.Fill_Claim_District,
             Vclaim_Appx_h.Is_Annuitet,
             Vclaim_Appx_h.Avg_Month_Income,
             Vclaim_Appx_h.Avg_Month_Outcome,
             Vclaim_Appx_h.Mobile_Number,
             Vclaim_Appx_h.Loan_Line_Purpose
        from Ln_Claim_Appendix_His q
       where Claim_Id = Iclaim_Id
         and Date_Action = to_date(Idate_Modify, 'dd.mm.yyyy hh24:mi:ss');
    exception
      when No_Data_Found then
        null;
    end;
    --SR
    Vform.Put('fillClaimDistrictName',
              Ln_Util.Get_District_Name(i_District_Code => Vclaim_Appx_h.Fill_Claim_District));
    Vform.Put('loanLinePurpose', Vclaim_Appx_h.Loan_Line_Purpose);
    --
    Vform.Put('DEBT_BURDEN', Vclaim_Add.Debt_Burden);
    if Ln_Setting.Get_Sys_Param('MANDATORY_FILLING_OF_THE_PERC_RATES_IN_THE_CLAIM',
                                Setup.Get_Headermfo) = 'Y' then
      for r in (select t.Perc_Code_Desc,
                       s.Name,
                       t.Perc_Rate,
                       t.Perc_Rate_Type,
                       (select (select --+ index_desc(r LN_INTEREST_RATES_PK)
                                 i.Rate
                                  from Ln_Interest_Rates i
                                 where i.Code = p.Per_Rate_Id
                                   and Rownum = 1)
                          from Ln_s_Perc_Rate_Type p
                         where p.Per_Rate_Id = t.Perc_Rate_Type
                           and Rownum = 1) Curr_Rate
                  from Ln_Blank_Percent_Rate t, Ln_s_Perc_Code_Desc s
                 where t.Claim_Id = Vclaim.Claim_Id
                   and t.Perc_Code_Desc = s.Code
                 order by s.Order_By)
      loop
        v_Pr_Desc_Code.Push(r.Perc_Code_Desc);
        v_Pr_Desc_Name.Push(r.Name);
        v_Pr_Perc_Rate.Push(r.Perc_Rate);
        v_Pr_Perc_Type.Push(r.Perc_Rate_Type);
        v_Pr_Perc_Rate_All.Push(r.Curr_Rate);
      end loop;
      Vform.Put('perc_rate_desc_code', v_Pr_Desc_Code);
      Vform.Put('perc_rate_desc_name', v_Pr_Desc_Name);
      Vform.Put('perc_rate', v_Pr_Perc_Rate);
      Vform.Put('perc_rate_type', v_Pr_Perc_Type);
      Vform.Put('perc_rate_all', v_Pr_Perc_Rate_All);
    end if;
    --
    Vform.Put('normativeActCode', c_Field(Vclaim_Appx_h.Normative_Act, Vclaim.Normative_Act_Code));
    --vForm.put('normativeActName'  , c_Field(vClaim_Appx_H.Normative_Act_Code, vClaim.Normative_Act_Code, Get_Normative_Act_Name(vClaim_Appx_H.Normative_Act_Code)));
  
    if Vclaim.Client_Type in (Ln_Const.Physical_Person, Ln_Const.Individual_Entrepreneur) or
       (Vclaim.Client_Type = Ln_Const.Juridical_Person and Vclaim.Resident = Ln_Const.Nonresident) then
      Vclaim_Appx_h.Sex := Nvl(Vclaim_Appx_h.Sex, '1');
      begin
        select name
          into v_Sex_Name
          from v_Subject_Sexual_Identity
         where Code = Vclaim_Appx_h.Sex;
      exception
        when No_Data_Found then
          null;
      end;
      begin
        select name
          into v_Doc_Type_Name
          from v_Verifying_Document_Type
         where Code = Vclaim_Appx_h.Document_Type;
      exception
        when No_Data_Found then
          null;
      end;
      Vform.Put('sex', Nvl(Vclaim_Appx_h.Sex, '1'));
      Vform.Put('sexName', c_Field(Nvl(Vclaim_Appx_h.Sex, '1'), Nvl(Vclaim.Sex, '1'), v_Sex_Name));
      Vform.Put('dateOfBirth', c_Field(Vclaim_h.Date_Of_Birth, Vclaim.Date_Of_Birth));
      Vform.Put('docType', Vclaim_Appx_h.Document_Type);
      Vform.Put('docTypeName',
                c_Field(Vclaim_Appx_h.Document_Type, Vclaim.Document_Type, v_Doc_Type_Name));
      Vform.Put('docNumber', c_Field(Vclaim_h.Doc_Number, Vclaim.Doc_Number));
      Vform.Put('docRegDate', c_Field(Vclaim_h.Doc_Reg_Date, Vclaim.Doc_Reg_Date));
      Vform.Put('docRegPlace', c_Field(Vclaim_h.Doc_Reg_Place, Vclaim.Doc_Reg_Place));
      Vform.Put('employmentSign',
                c_Field(Nvl(Vclaim_Appx_h.Employment_Sign, '0'), Nvl(Vclaim.Employment_Sign, '0')));
      Vform.Put('regionCode', c_Field(Vclaim_Appx_h.Region, Vclaim.Region_Code));
      Vform.Put('regionName',
                c_Field(Vclaim_Appx_h.Region,
                        Vclaim.Region_Code,
                        Get_Region_Name(Vclaim_Appx_h.Region)));
      Vform.Put('districtCode', c_Field(Vclaim_Appx_h.District, Vclaim.District_Code));
      Vform.Put('districtName',
                c_Field(Vclaim_Appx_h.District,
                        Vclaim.District_Code,
                        Get_District_Name(Vclaim_Appx_h.Region, Vclaim_Appx_h.District)));
      Vform.Put('clientAddress', c_Field(Vclaim_h.Client_Address, Vclaim.Client_Address));
    end if;
  
    if Vclaim.Client_Type = Ln_Const.Physical_Person and Vclaim.Employment_Sign = Ln_Const.Working then
      /*Vform.Put('ninpsBankCode', c_Field(Vclaim_Appx_h.Ninps_Bank, Vclaim.Ninps_Bank_Code));
      Vform.Put('ninpsBankName',
                c_Field(Vclaim_Appx_h.Ninps_Bank,
                        Vclaim.Ninps_Bank_Code,
                        Get_Bank_Name(Vclaim_Appx_h.Ninps_Bank)));
      Vform.Put('ninps', c_Field(Vclaim_Appx_h.Ninps, Vclaim.Ninps));
      Vform.Put('jobInn', c_Field(Vclaim_Appx_h.Job_Inn, Vclaim.Job_Inn));
      Vform.Put('jobName', c_Field(Vclaim_Appx_h.Job_Name, Vclaim.Job_Name));*/
      --
      Vform.Put('citizenId', c_Field(Vclaim_Appx_h.Citizen_Id, Vclaim.Citizen_Id));
      Vform.Put('cadastralNumOfResidence',
                c_Field(Vclaim_Appx_h.Cadas_Num_Resident, Vclaim.Cadas_Num_Resident));
      Vform.Put('cadastralRegistrationNum',
                c_Field(Vclaim_Appx_h.Cadas_Regist_Num, Vclaim.Cadas_Regist_Num));
      Vform.Put('parentClientId', c_Field(Vclaim_Appx_h.Parent_Client_Id, Vclaim.Parent_Client_Id));
      Vform.Put('parentClientCode', Account.Get_Client_Code(Vclaim.Parent_Client_Id));
      Vform.Put('averageSalary', Vclaim_Appx_h.Average_Salary);
      Vform.Put('familyStatus', Vclaim_Appx_h.Family_Status);
      Vform.Put('jobPosition', Vclaim_Appx_h.Job_Position);
    end if;
  
    if Vclaim.Client_Type in (Ln_Const.Juridical_Person, Ln_Const.Individual_Entrepreneur) then
      Vform.Put('objectNeoplazmSign',
                c_Field(Vclaim_Appx_h.Object_Neoplazm_Sign, Vclaim.Object_Neoplazm_Sign));
      Vform.Put('enterpriseClassification',
                c_Field(Vclaim_Appx_h.Enterprise_Classification, Vclaim.Enterprise_Classification));
      Vform.Put('jobsAmount', c_Field(Vclaim_Appx_h.Jobs_Amount, Vclaim.Jobs_Amount));
    end if;
  
    if Is_Agricultural_Loans_Used and Vclaim.Purpose_Loan in ('020202', '020203') then
      declare
        Vagr_Product_Code varchar2(50);
        Vagr_Unit         varchar2(50);
        Vagr_Contract_No  varchar2(50);
        Vagr_Date_Begin   date;
        Vagr_Date_End     date;
        Vagr_Product_v    number;
        Vagr_Product_s    number;
        Vagr_Contract_Sum number;
        Vagr_Id           number;
        --
        Vagr_Product_Code_h varchar2(50);
        Vagr_Unit_h         varchar2(50);
        Vagr_Contract_No_h  varchar2(50);
        Vagr_Date_Begin_h   date;
        Vagr_Date_End_h     date;
        Vagr_Product_v_h    number;
        Vagr_Product_s_h    number;
        Vagr_Contract_Sum_h number;
        Vagr_Id_h           number;
      begin
        execute immediate 'select product_code ' || ', unit ' || ', contract_no ' ||
                          ', begin_date ' || ', end_date ' || ', product_v ' || ', product_s ' ||
                          ', contract_sum ' || ', id ' || 'from ln_agr_contracts ' ||
                          'where claim_id = :1'
          into Vagr_Product_Code, Vagr_Unit, Vagr_Contract_No, Vagr_Date_Begin, Vagr_Date_End, Vagr_Product_v, Vagr_Product_s, Vagr_Contract_Sum, Vagr_Id
          using Iclaim_Id;
        --
        execute immediate 'select product_code ' || ', unit ' || ', contract_no ' ||
                          ', begin_date ' || ', end_date ' || ', product_v ' || ', product_s ' ||
                          ', contract_sum ' || ', id ' || 'from ln_agr_contracts_hist ' ||
                          'where claim_id = :1' || '  and date_modify = to_date(''' || Idate_Modify ||
                          ''', ''dd.mm.yyyy hh24:mi:ss'')'
          into Vagr_Product_Code_h, Vagr_Unit_h, Vagr_Contract_No_h, Vagr_Date_Begin_h, Vagr_Date_End_h, Vagr_Product_v_h, Vagr_Product_s_h, Vagr_Contract_Sum_h, Vagr_Id_h
          using Iclaim_Id;
        Vform.Put('h_product_code', c_Field(Vagr_Product_Code_h, Vagr_Product_Code));
        Vform.Put('product_code', c_Field(Vagr_Product_Code_h, Vagr_Product_Code));
        Vform.Put('h_unit', c_Field(Vagr_Unit_h, Vagr_Unit));
        Vform.Put('unit', c_Field(Vagr_Unit_h, Vagr_Unit));
        Vform.Put('contract_no', c_Field(Vagr_Contract_No_h, Vagr_Contract_No));
        Vform.Put('begin_date', c_Field(Vagr_Date_Begin_h, Vagr_Date_Begin));
        Vform.Put('end_date', c_Field(Vagr_Date_End_h, Vagr_Date_End));
        Vform.Put('product_v', c_Field(Vagr_Product_v_h, Vagr_Product_v));
        Vform.Put('product_s', c_Field(Vagr_Product_s_h, Vagr_Product_s));
        Vform.Put('contract_sum',
                  c_Field((Vagr_Contract_Sum_h / Ln_Service.Get_Currency_Scale(Vclaim.Currency)),
                          (Vagr_Contract_Sum / Ln_Service.Get_Currency_Scale(Vclaim.Currency))));
        Vform.Put('h_agr_contract_id', Vagr_Id);
      exception
        when others then
          null;
      end;
    end if;
    if Ln_Util.Bank_Has_Blank_Used then
      begin
        select Department_Id
          into v_Departament_Id
          from Ln_s_Blank_Product_Departments
         where Product_Id = Vclaim.Product_Id;
      exception
        when No_Data_Found then
          null; -- raise_application_error(-20000, 'Продукт ' || ln_util.Get_Product_Name(vClaim.Product_Id) || ' не прикреплен к департаменту');
      end;
      Vform.Put('departmentId', to_char(v_Departament_Id));
    end if;
  
    if Vclaim.Client_Type = Ln_Const.Physical_Person and
       Vclaim_Appx_h.Employment_Sign = Ln_Const.Working and v_Departament_Id = 5 then
      Vform.Put('IS_ANNUITET', to_char(Vclaim_Appx_h.Is_Annuitet));
      Vform.Put('avg_month_income', to_char(Vclaim_Appx_h.Avg_Month_Income / 100));
      Vform.Put('avg_month_outcome', to_char(Vclaim_Appx_h.Avg_Month_Outcome / 100));
    end if;
    Vform.Put('fillClaimDistrict', Vclaim_Appx_h.Fill_Claim_District);
    Vform.Put('mobilePhone', Ln_Util.Get_Mobile_Number(Vclaim_Appx_h.Mobile_Number));
    Vform.Put('fax', v_Fax);
    Vform.Put('clientRegDate', to_char(v_Reg_Date, Ln_Const.Maskdate));
    Vform.Put('useCreditObject', Vclaim_Appx_h.Use_Credit_Object);
    Vform.Put('creditObject', Vclaim_Appx_h.Credit_Object_Id);
    Vform.Put('creditObjectSum', Vclaim_Appx_h.Credit_Object_Sum);
    Vdata.Put('fm', Vform);
    --
    return Vdata.To_String();
  end Get_Claim_His_As_Jhash;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Получение наименования операции
  *  @iOperation_Code       - код операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operation_Name(Ioperation_Code in Ln_s_Operations.Code%type)
    return Ln_s_Operations.Name%type is
    Vname Ln_s_Operations.Name%type;
  begin
    Vname := Ln_Service.Get_Operation_Name(Ioperation_Code => Ioperation_Code);
    return Vname;
  exception
    when others then
      return Vname;
  end Get_Operation_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     возвращает указанные ниже параметры текущего кредита
  *  @iLoan_Id - уникальный номер кредита
  *  @oClient_Code - код клиента
  *  @oClient_Name - наименование клиента
  *  @oLoan_Number - порядковый номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Loan_Data
  (
    Iloan_Id     in Ln_Card.Loan_Id%type,
    Oclient_Code out Client_Current.Code%type,
    Oclient_Name out Client_Current.Name%type,
    Oloan_Number out Ln_Card.Loan_Number%type
  ) is
    Vloan_Card Ln_Card%rowtype;
  begin
    Vloan_Card   := Ln_Service.Get_Loan_Card(Iloan_Id => Iloan_Id);
    Oclient_Code := Vloan_Card.Client_Code;
    Oclient_Name := Get_Client_Name(Vloan_Card.Client_Code, Vloan_Card.Filial_Code);
    Oloan_Number := Vloan_Card.Loan_Number;
  end Get_Loan_Data;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Вызов операции
  *  @iOperation_Code  - код операции
  *  @iLoan_Id         - код кредита
  *  @iHashParams      - список параметров
  *  @iIs_Preview_Mode - ON - режим предпросмотра операций
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Operation_Action
  (
    Ioperation_Code  Ln_s_Operations.Code%type,
    Iloan_Id         Ln_Card.Loan_Id%type,
    Ihashparams      Hashtable,
    Iis_Preview_Mode varchar2
  ) is
  begin
    Ln_Operation.Operation_Action(Ioperation_Code  => Ioperation_Code,
                                  Ioperation_Mode  => 'M' -- ручной ввод
                                 ,
                                  Ihashparams      => Ihashparams,
                                  Iloan_Id         => Iloan_Id,
                                  Iis_Preview_Mode => Iis_Preview_Mode,
                                  Iraise_Error     => true);
  end Operation_Action;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    получение признака индивидуальности выполнения операции для кредита
  *  @iOperation_Code  - код операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operation_Is_Single(Ioperation_Code in Ln_s_Operations.Code%type) return varchar2 is
    Vis_Single Ln_s_Actions.Is_Single%type;
  begin
    Ln_Operation.Is_Operation(Ioperation_Code); -- проверка наличия операции
    Vis_Single := Ln_Operation.Get_Is_Single(Ioperation_Code); -- получение признака
    return Vis_Single;
  end Get_Operation_Is_Single;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Вызов операции
  *  @oMessage  - код операции
  *  @iOperation_Code  - код операции
  *  @iLoan_Id         - массив уникальных номеров кредитов
  *  @iParams_Code     - список кодов параметров
  *  @iParams_Value    - список значений параметров
  *  @iIs_Preview_Mode - ON - режим предпросмотра операций
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Operation_Action
  (
    Omessage         out varchar2,
    Ioperation_Code  in Ln_s_Operations.Code%type,
    Iloan_Id         in Array_Varchar2,
    Iparams_Code     in Array_Varchar2,
    Iparams_Value    in Array_Varchar2,
    Iis_Preview_Mode in varchar2
  ) is
    --vLn_Oper              LN_OPERATION.OPERATION_T;
    Vis_Single            varchar2(1);
    Vhash                 Hashtable := Hashtable();
    Vcount                number := 0;
    Vcountoperationbroken number := 0;
    Vcountactionbroken    number := 0;
    --t_Loan Ln_Init.Loan_T := Ln_Init.Get_Loan;
    Varr         Array_Varchar2;
    v_Package_Id number;
  begin
    if Ln_Init.Off_All_Iabs_Actions then
      Raise_Application_Error(-20000,
                              'По этому договору запрещено выполнять какие-либо действия в подсистеме "Кредиты"');
    end if;
    --
    if Ln_Cache.Loan.Product_Group_Id = Ln_Const.c_Pgid_Credit_Card_Acc and
       Ioperation_Code not like 'ACCOUNT%' and Ioperation_Code not like 'PERCENT_RATE%' and
       not Ln_Service.Is_Array_Value(Ln_Setting.Get_Sys_Param_Value_List('CCA_ALLOW_MANUAL_OPERATION',
                                                                         Setup.Get_Headermfo),
                                     Ln_Cache.Loan.Loan_Id) then
      Raise_Application_Error(-20000,
                              'Невозможно выполнить данную операцию');
    end if;
    --
    --if Ln_Init.Is_Overdraft_Product(Ln_Cache.Loan.Product_Id) then
    /*select count(*) into vCount
     from Ln_Percent_Rate
    where Loan_Id = Ln_Cache.Loan.Loan_Id
      and Perc_Code_Desc = 'OSN'
      and Perc_Rate = 0
      and Rownum = 1;*/
    if /*vCount = 0 and*/
     Ln_Cache.Loan.Product_Group_Id in
     (Ln_Const.c_Pgid_Overdraft, Ln_Const.c_Pgid_Mobile_Overdraft) and
     not Ln_Service.Is_Array_Value(Ln_Setting.Get_Sys_Param_Value_List('OVERDRAFT_AVAILABLE_MANUAL_OPERATIONS',
                                                                       Setup.Get_Headermfo),
                                   Ioperation_Code) then
      Raise_Application_Error(-20000,
                              'Невозможно выполнить данную операцию');
    end if;
    --end if;
    /*vCount := 0;*/
    --
    if Iloan_Id.Count = 0 then
      Raise_Application_Error(-20000, 'Не выбраны кредиты');
    end if;
    --
    execute immediate ('truncate table LN_OPERATIONS_ID');
    --
    Vis_Single := Get_Operation_Is_Single(Ioperation_Code);
    --
    if Vis_Single = 'Y' and Iloan_Id.Count > 1 then
      Raise_Application_Error(-20000,
                              'Данная операция работает только в индивидуальном режиме, выберите один кредит и повторите операцию');
    end if;
    --
    if Iparams_Code.Count <> Iparams_Value.Count then
      Raise_Application_Error(-20000,
                              'Количество параметров(' || to_char(Iparams_Code.Count) ||
                              ') не соответсвует количеству значений (' ||
                              to_char(Iparams_Value.Count) || ')');
    end if;
    --
    for i in 1 .. Iparams_Code.Count
    loop
      if Iparams_Code(i) is not null then
        if Vhash.Has(Iparams_Code(i)) then
          Varr := Vhash.Get_Array_Varchar2(Iparams_Code(i));
          Varr.Extend;
          Varr(Varr.Count) := Iparams_Value(i);
          Vhash.Put(Iparams_Code(i), Varr);
        else
          Vhash.Put(Iparams_Code(i), Iparams_Value(i));
        end if;
      end if;
    end loop;
    --
    for i in Iloan_Id.First .. Iloan_Id.Count
    loop
      if Ioperation_Code <> 'CREDITING_GM_MUNIS' then
        Lead.Open_Package(o_Package_Id => v_Package_Id);
      end if;
      Operation_Action(Ioperation_Code  => Ioperation_Code,
                       Iloan_Id         => Iloan_Id(i),
                       Ihashparams      => Vhash,
                       Iis_Preview_Mode => Iis_Preview_Mode);
      -- вставка id операций для отображения на клиентской части
      --vLn_Oper := ln_operation.Get_Operation;
      insert into Ln_Operations_Id
      values
        (Ln_Cache.Operation.Id /*, Ln_Cache.Loan.Branch_Id*/);
      --
      Vcount := Vcount + 1;
      if Ln_Cache.Operation.Action_Broken then
        Vcountactionbroken := Vcountactionbroken + 1;
      end if;
      if Ln_Cache.Operation.Operation_Broken then
        Vcountoperationbroken := Vcountoperationbroken + 1;
      end if;
      if Ioperation_Code <> 'CREDITING_GM_MUNIS' then
        Lead.Close_Package(i_Package_Id => v_Package_Id);
      end if;
      commit;
    end loop;
    --
    if Vcountoperationbroken = 0 and Vcountactionbroken = 0 then
      Omessage := 'Операция выполнена';
    elsif Vcountoperationbroken <> 0 then
      Omessage := 'Операция не выполнена';
    elsif Vcountoperationbroken = 0 and Vcountactionbroken <> 0 then
      Omessage := 'Операция не выполнена или выполнена частично';
    end if;
  end Operation_Action;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает курсор со списком параметров для операции
  *  @iOperation_Code  - код операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operation_Params(Ioperation_Code in Ln_s_Operations.Code%type) return sys_refcursor is
    result sys_refcursor;
    --v_Loan Ln_Init.loan_t := Ln_Init.Get_Loan;
  begin
    if Ioperation_Code = 'REDEMPTION_DEBT_PRIMARY' and
       Get_Sys_Param(Iset_Error => 'N', Icode => 'USE_GRAPH_EARLY_REDEMPTION') = 'N' then
    
      open result for
        select p.Action_Code,
               Ln_Service.Get_Action_Name(p.Action_Code) Action_Name,
               p.Code,
               p.Name,
               p.Html_Mask,
               p.Html_Type,
               p.Html_Length,
               p.Is_F9,
               p.Sql_Text,
               p.Check_Value,
               p.Load_Param,
               p.Is_Read_Only,
               p.Is_Visible,
               p.Is_Def_Sql,
               p.Def_Value,
               p.Sql_Exec_Loading,
               p.Is_Required,
               p.Ord,
               p.Group_Ord
          from Ln_s_Operation_Actions t, Ln_s_Action_Params p
         where p.Action_Code = t.Action_Code
           and t.Operation_Code = Ioperation_Code
           and t.Condition = 'A'
           and p.Visible = 'Y'
           and t.Visible = 'Y'
           and p.Code not in ('GRAPH_DATE_RED', 'EARLY_SUMM', 'GRAPH_INSDEL_BTN')
         order by t.Ord, p.Group_Ord, p.Ord;
    
    else
    
      open result for
        select p.Action_Code,
               Ln_Service.Get_Action_Name(p.Action_Code) Action_Name,
               p.Code,
               p.Name,
               p.Html_Mask,
               p.Html_Type,
               p.Html_Length,
               p.Is_F9,
               p.Sql_Text,
               p.Check_Value,
               p.Load_Param,
               p.Is_Read_Only,
               p.Is_Visible,
               p.Is_Def_Sql,
               p.Def_Value,
               p.Sql_Exec_Loading,
               p.Is_Required,
               p.Ord,
               p.Group_Ord
          from Ln_s_Operation_Actions t, Ln_s_Action_Params p
         where p.Action_Code = t.Action_Code
           and t.Operation_Code = Ioperation_Code
           and t.Condition = 'A'
           and p.Visible = 'Y'
           and t.Visible = 'Y'
           and p.Code = case
                 when p.Code = 'LN_AGR_EXPENSE' and
                      Ln_Cache.Loan.Purpose.Code in ('020202', '020203') then
                  p.Code
                 when p.Code != 'LN_AGR_EXPENSE' then
                  p.Code
                 else
                  null
               end
           and p.Code <> 'BUTTON_INF' -- кнопка, для просмотра истории и тд
         order by t.Ord, p.Group_Ord, p.Ord;
    end if;
    return result;
  exception
    when others then
      Raise_Application_Error(-20000,
                              'Ошибка в процедуре Get_Operation_Params: ' || sqlerrm);
  end Get_Operation_Params;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает кнопки по действиям в данной операции
  *  @iOperation_Code - код операции
  *  @iAction_code    - код действия
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Graph_Operation_Button_Inf
  (
    Ioperation_Code in varchar2,
    Iaction_Code    in varchar2
  ) return varchar2 is
    result varchar2(3000);
  begin
    for Rec in (select p.Action_Code, p.Code, p.Name
                  from Ln_s_Operation_Actions t, Ln_s_Action_Params p
                 where p.Action_Code = t.Action_Code
                   and t.Operation_Code = Ioperation_Code
                   and p.Action_Code = Iaction_Code
                   and t.Condition = 'A'
                   and p.Visible = 'Y'
                   and p.Code = 'BUTTON_INF' -- кнопка, для просмотра истории и тд
                 order by t.Ord, p.Group_Ord, p.Ord)
    loop
      result := result || '<input type=button value="' || Rec.Name ||
                '" onclick="get_info(''?ACTION_CODE=' || Iaction_Code || ''')">';
    end loop;
    return result;
  exception
    when others then
      Raise_Application_Error(-20000,
                              'Ошибка в процедуре Graph_Operation_Button_Inf: ' || sqlerrm);
  end Graph_Operation_Button_Inf;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Необходимость причины для изменения графика гашения
  *  @iLoan_id - уникальный номер кредита
  *  @return   - если причина необходима, то 'Y', иначе 'N'
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Need_Decide(Iloan_Id in Ln_Card.Loan_Id%type) return varchar2 is
    result varchar2(1) := 'N';
  begin
  
    if Ln_Schedule.Need_Decide(Iloan_Id) then
      result := 'Y';
    end if;
  
    return result;
  end Need_Decide;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение графика погашения основного долга
  *  @iDecide_Num        - номер решения
  *  @iDecide_Date       - дата  решения
  *  @iDecide_Department - Орган банка
  *  @iDecide_Reason     - Причина решения
  *  @iObligate_Number   - № обязательства
  *  @iDate_Redemp       - дата гашения
  *  @iSum_Redemp        - сумма гашения
  *  @iSign_Long         - признак основной или пролонгирован
  *  @iLoan_ID           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Save_Graph_Debt
  (
    Idecide_Num        varchar2,
    Idecide_Date       varchar2,
    Idecide_Department varchar2,
    Idecide_Reason     varchar2,
    Iobligate_Number   Array_Varchar2,
    Idate_Redemp       Array_Varchar2,
    Isum_Redemp        Array_Varchar2,
    Isign_Long         Array_Varchar2,
    Iloan_Id           Ln_Card.Loan_Id%type
  ) is
    Vdebt_Graph_Id   number;
    Vdate_Redemps    Array_Varchar2;
    Vsum_Redemps     Array_Varchar2;
    Vsum_Redemps_Cmp Array_Varchar2;
  begin
    if not Ln_Init.Off_Iabs_Actions_By_Init_Mod and Ln_Init.Off_All_Iabs_Actions then
      Raise_Application_Error(-20000,
                              'По этому договору запрещено выполнять какие-либо действия в подсистеме "Кредиты"');
    end if;
    --
    if Setup.Is_Filiallevel <> 'Y' then
      Raise_Application_Error(-20000,
                              'Изменения выполняются только на уровне филиала.');
    end if;
    --
    Ln_Schedule.Save_Graph_Debt(Ograph_Id          => Vdebt_Graph_Id,
                                Iloanid            => Iloan_Id,
                                Idecide_Num        => Idecide_Num,
                                Idecide_Date       => Idecide_Date,
                                Idecide_Department => Idecide_Department,
                                Idecide_Reason     => Idecide_Reason,
                                Iobligate_Number   => Iobligate_Number,
                                Idate_Redemp       => Idate_Redemp,
                                Isum_Redemp        => Isum_Redemp,
                                Isign_Long         => Isign_Long);
    --
    select to_char(Date_Red, Ln_Const.Maskdate),
           Ln_Service.Convert_Varchar(Summ_Red / 100),
           Ln_Service.Convert_Varchar(Summ_Calc / 100)
      bulk collect
      into Vdate_Redemps, Vsum_Redemps, Vsum_Redemps_Cmp
      from Ln_Graph_Temporary
     where Obligate_Number is null;
    if Vdate_Redemps.Count <> 0 then
      Ln_Schedule.Save_Graph_Perc(Iloanid            => Iloan_Id,
                                  Idecide_Num        => Idecide_Num,
                                  Idecide_Date       => Idecide_Date,
                                  Idecide_Department => Idecide_Department,
                                  Idecide_Reason     => Idecide_Reason,
                                  Idate_Redemp       => Vdate_Redemps,
                                  Isum_Redemp        => Vsum_Redemps,
                                  Isum_Redemp_Cmp    => Vsum_Redemps_Cmp);
    end if;
    --                           
    Ln_Contract.Nik_Card_Not_Sent(i_Loan_Id => Iloan_Id);
  end Save_Graph_Debt;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает данные договора
  *  @oOpen_Date                    - дата открытия договора
  *  @oClose_Date                   - дата закрытия договора
  *  @oDebt_Redemp_Privilege_Period - льготный период по гашению основного долга
  *  @oPerc_Redemp_Privilege_Period - льготный период по гашению основных процентов
  *  @iLoan_ID                      - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Graph_Loan_Data
  (
    Oopen_Date                    out varchar2,
    Oclose_Date                   out varchar2,
    Odebt_Redemp_Privilege_Period out varchar2,
    Operc_Redemp_Privilege_Period out varchar2
    -- , oDebt_Graph_Calc_Type_Name     out varchar2, oDebt_Calc_Period_Name         out varchar2, oCalc_Period_Id                out varchar2
   ,
    Iloan_Id in Ln_Card.Loan_Id%type
  ) is
    v_Mode_Act Ln_Mode_Actions%rowtype; --T_LOAN LN_INIT.LOAN_T; v_Graph_Calc_Type Ln_v_References.NAME%type; v_Calc_period     Ln_s_Graph_Periods.Name%type;
  begin
    Ln_Init.Set_Loan(Iloan_Id);
    v_Mode_Act := Ln_Init.Get_Mode;
    --T_LOAN := LN_INIT.Get_Loan;
    /*select /*t.calc_period, 
          (select name
             from Ln_s_Graph_Periods c
            where Condition = 'A'
              and c.Type = 'DEBT'
              and Code = Nvl(t.Calc_Period, '1')),
          (select c.name from Ln_v_References c
            where c.object_name='GRAPH_CALC_TYPE' and c.Code = Nvl(t.Graph_Calc_Type, '1'))
     into /*oCalc_Period_Id, v_Graph_Calc_Type, v_Calc_Period
     from Ln_Mode_Actions t
    where Loan_Id = Iloan_Id;*/
    Oopen_Date                    := Lpad(v_Mode_Act.Red_Date, 2, '0') ||
                                     to_char(Ln_Cache.Loan.Open_Date, '.mm.yyyy');
    Oclose_Date                   := to_char(Ln_Cache.Loan.Close_Date, Ln_Const.Maskdate);
    Odebt_Redemp_Privilege_Period := to_char(Ln_Cache.Loan.Grace_Period);
    Operc_Redemp_Privilege_Period := to_char(Ln_Service.Get_Graph_Purpose_Lgot_Perc(Ln_Cache.Loan.Purpose.Code));
    --oDebt_Graph_Calc_Type_Name    := v_Graph_Calc_Type;
    --oDebt_Calc_Period_Name        := v_Calc_period;
  end Get_Graph_Loan_Data;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Расчет графика погашения основного долга
  *  @iLoan_id         - уникальный номер кредита
  *  @iDate_Calc       - дата начала расчета
  *  @iPeriod          - период расчета (1 - каждый месяц, 3 - 1 раз в 3 месяца, 6 - 1 раз в 6 месяцев, 12 - 1 рах в 12 месяцев )
  *  @iCheck_Week_End  - учитывать ли выходные дни
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Calc_Graph_Debt
  (
    Iloan_Id        in Ln_Card.Loan_Id%type,
    Idate_Calc      in date,
    Iperiod         in varchar2,
    Icheck_Week_End in varchar2,
    Iperc_Period    in varchar2 := null,
    Iperc_Day_Ret   in varchar2 := null
  ) is
    Vend_Date date;
  begin
    if not Ln_Init.Off_Iabs_Actions_By_Init_Mod and Ln_Init.Off_All_Iabs_Actions then
      Raise_Application_Error(-20000,
                              'По этому договору запрещено выполнять какие-либо действия в подсистеме "Кредиты"');
    end if;
    --
    Ln_Schedule.Calc_Graph_Debt(Iloan_Id        => Iloan_Id,
                                Idate_Calc      => Idate_Calc,
                                Iperiod         => Iperiod,
                                Icheck_Week_End => Icheck_Week_End);
    --
    if Iperc_Period is null then
      return;
    end if;
    select max(Date_Red)
      into Vend_Date
      from Ln_Graph_Temporary;
    Ln_Schedule.Calc_Graph_Perc(Iloan_Id        => Iloan_Id,
                                Idatebegin      => Idate_Calc,
                                Idateend        => Vend_Date --Ln_Cache.Loan.Close_Date
                               ,
                                Idayret         => Iperc_Day_Ret,
                                Iperiod         => Iperc_Period,
                                Icheck_Week_End => Icheck_Week_End,
                                Iperc_Code      => 'OSN');
  end;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Расчет графика погашения процентов
  *  @iLoan_ID        - уникальный номер кредита
  *  @iDateBegin      - дата первого погашения
  *  @iDateEnd        - дата последнего погашения
  *  @iDayRet         - день гашения
  *  @iPeriod         - период расчета ( 0  - 2 раза в месяц, 1 - каждый месяц, 3 - 1 раз в 3 месяца, 6 - 1 раз в 6 месяцев, 12 - 1 раз в год
  *  @iCheck_Week_End - учитывать ли выходные дни
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Calc_Graph_Perc
  (
    Iloan_Id        in Ln_Card.Loan_Id%type,
    Idatebegin      in date,
    Idateend        in date,
    Idayret         in varchar2,
    Iperiod         in varchar2,
    Icheck_Week_End in varchar2,
    Iperc_Code      in varchar2 := 'OSN'
  ) is
  begin
    Ln_Schedule.Calc_Graph_Perc(Iloan_Id        => Iloan_Id,
                                Idatebegin      => Idatebegin,
                                Idateend        => Idateend,
                                Idayret         => Idayret,
                                Iperiod         => Iperiod,
                                Icheck_Week_End => Icheck_Week_End,
                                Iperc_Code      => Iperc_Code);
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение графика погашения процентов
  *  @iDecide_Num        - номер решения
  *  @iDecide_Date       - дата  решения
  *  @iDecide_Department - орган банка
  *  @iDecide_Reason     - Причина решения
  *  @iDate_Redemp       - дата гашения
  *  @iSum_Redemp        - сумма гашения
  *  @iLoan_ID           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Save_Graph_Perc
  (
    Idecide_Num        in varchar2,
    Idecide_Date       in varchar2,
    Idecide_Department in varchar2,
    Idecide_Reason     in varchar2,
    Idate_Redemp       in Array_Varchar2,
    Isum_Redemp        in Array_Varchar2,
    Isum_Redemp_Cmp    in Array_Varchar2,
    Iloan_Id           in Ln_Card.Loan_Id%type,
    Iperc_Code         in varchar2 := 'OSN'
  ) is
  begin
    if not Ln_Init.Off_Iabs_Actions_By_Init_Mod and Ln_Init.Off_All_Iabs_Actions then
      Raise_Application_Error(-20000,
                              'По этому договору запрещено выполнять какие-либо действия в подсистеме "Кредиты"');
    end if;
    --
    if Setup.Is_Filiallevel <> 'Y' then
      Raise_Application_Error(-20000,
                              'Изменения выполняются только на уровне филиала.');
    end if;
    --
    if Setup.Get_Headermfo = '09005' and
       Ln_Setting.Get_Sys_Param('PROHIBIT_CHANGING_MONTH_AND_YEAR_GRAPHIC_PERC',
                                Setup.Get_Headermfo) = 'Y' then
      Raise_Application_Error(-20000,
                              'Запрешено изменения графика погашения процентов. Обратитес в ГО!');
    end if;
    Ln_Schedule.Save_Graph_Perc(Iloanid            => Iloan_Id,
                                Idecide_Num        => Idecide_Num,
                                Idecide_Date       => Idecide_Date,
                                Idecide_Department => Idecide_Department,
                                Idecide_Reason     => Idecide_Reason,
                                Idate_Redemp       => Idate_Redemp,
                                Isum_Redemp        => Isum_Redemp,
                                Isum_Redemp_Cmp    => Isum_Redemp_Cmp,
                                Iperc_Code         => Iperc_Code);
  end Save_Graph_Perc;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает график гашения основного долга для пролонгации с указанными этапами
  *  @iLoan_id           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Graph_Prolong
  (
    Iloan_Id   in Ln_Card.Loan_Id%type,
    Idata      in Array_Varchar2,
    Ovariables out varchar2,
    Osumma     out varchar2
  )
  
   is
    v_Form j_Hash := j_Hash;
    v_Data j_Hash := j_Hash;
  
    v_Num       j_Array := j_Array;
    v_Date      j_Array := j_Array;
    v_Amount    j_Array := j_Array;
    v_Sign      j_Array := j_Array;
    v_Sign_Name j_Array := j_Array;
    --T_LOAN         ln_init.LOAN_T;
    Vdate       date;
    Vsign_Long  number;
    Vnum        varchar2(20); -- номер срочного обязательства
    Vdate_Red   varchar2(20); -- дата гашения
    Vamount_Red number; -- сумма гашения
    Vsign       number; -- пролонгированое гашение или нет
    Vsign_Name  varchar2(20); -- пролонгированое гашение или нет
    Vsumma      number := 0;
    Vsumm_Red   number;
  begin
  
    Ln_Init.Set_Loan(Iloan_Id);
    --T_LOAN := ln_init.Get_Loan;
  
    for i in 1 .. Idata.Count
    loop
      Vdate      := case
                      when Ln_Service.Get_Segment(Idata(i), '#', 1) is not null then
                       to_date(Ln_Service.Get_Segment(Idata(i), '#', 1), Ln_Const.Maskdate)
                    end;
      Vsign_Long := Ln_Service.Convert_Number(Ln_Service.Get_Segment(Idata(i), '#', 2));
      begin
        select t.Obligate_Number as Num -- номер срочного обязательства
              ,
               to_char(t.Date_Red, Ln_Const.Maskdate) as Date_Red -- дата гашения
              ,
               t.Summ_Red / Ln_Cache.Loan.Scale as Amount_Red -- сумма гашения
              ,
               t.Summ_Red as Summ_Red -- сумма гашения
              ,
               t.Sign_Long as Sign -- пролонгированое гашение или нет
              ,
               Decode(t.Sign_Long,
                      0,
                      'Основной',
                      1,
                      'Пролонгирован',
                      'Ручной') as Sign_Name -- пролонгированое гашение или нет
          into Vnum, Vdate_Red, Vamount_Red, Vsumm_Red, Vsign, Vsign_Name
          from Ln_Graph_Debt t
         where t.Loan_Id = Ln_Cache.Loan.Loan_Id
           and t.Date_Red = Vdate
           and t.Sign_Long = Vsign_Long
         order by t.Date_Red;
      
        v_Num.Push(Vnum);
        v_Date.Push(Vdate_Red);
        v_Amount.Push(to_char(Vamount_Red));
        v_Sign.Push(Vsign);
        v_Sign_Name.Push(Vsign_Name);
        Vsumma := Vsumma + Vsumm_Red;
      
      exception
        when No_Data_Found then
          null;
      end;
    end loop;
  
    v_Form.Put('NUM', v_Num);
    v_Form.Put('DATE', v_Date);
    v_Form.Put('AMOUNT', v_Amount);
    v_Form.Put('SIGN', v_Sign);
    v_Form.Put('SIGN_NAME', v_Sign_Name);
  
    v_Data.Put('fm', v_Form);
    Ovariables := v_Data.To_String;
    Osumma     := replace(trim(to_char(Vsumma / Ln_Cache.Loan.Scale, Ln_Const.Masksum)), ',', ' ');
  
  end Get_Graph_Prolong;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     График гашения основного долга для прологации указанного договора
  *  @iLoan_id           - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Graph_Debt_Prolong(Iloan_Id in Ln_Card.Loan_Id%type) return varchar2 is
    v_Form      j_Hash := j_Hash;
    v_Data      j_Hash := j_Hash;
    v_Num       j_Array := j_Array;
    v_Date      j_Array := j_Array;
    v_Amount    j_Array := j_Array;
    v_Sign      j_Array := j_Array;
    v_Sign_Name j_Array := j_Array;
    v_Data_     j_Array := j_Array;
    --T_LOAN         ln_init.LOAN_T;
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    Ln_Init.Set_Loan(Vloan_Id);
    --T_LOAN := ln_init.Get_Loan;
  
    for Graph in (select t.Obligate_Number as Num -- номер срочного обязательства
                        ,
                         to_char(t.Date_Red, Ln_Const.Maskdate) as Date_Red -- дата гашения
                        ,
                         t.Summ_Red / Ln_Cache.Loan.Scale as Amount_Red -- сумма гашения
                        ,
                         t.Sign_Long as Sign -- пролонгированое гашение или нет
                        ,
                         Decode(t.Sign_Long,
                                0,
                                'Основной',
                                1,
                                'Пролонгирован',
                                'Ручной') as Sign_Name -- пролонгированое гашение или нет
                        ,
                         to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify -- Дата изменения
                        ,
                         Employee.Get_Emp_Name(t.Emp_Code) as Emp_Name -- Сотрудник
                  
                    from Ln_Graph_Debt t
                   where t.Loan_Id = Ln_Cache.Loan.Loan_Id
                   order by t.Date_Red)
    loop
      v_Num.Push(Graph.Num);
      v_Date.Push(Graph.Date_Red);
      v_Amount.Push(to_char(Graph.Amount_Red));
      v_Sign.Push(Graph.Sign);
      v_Sign_Name.Push(Graph.Sign_Name);
      v_Data_.Push(Graph.Date_Red || '#' || to_char(Graph.Sign) || '#');
    end loop;
  
    v_Form.Put('NUM', v_Num);
    v_Form.Put('DATE', v_Date);
    v_Form.Put('AMOUNT', v_Amount);
    v_Form.Put('SIGN', v_Sign);
    v_Form.Put('SIGN_NAME', v_Sign_Name);
    v_Form.Put('DATA', v_Data_);
  
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  end Get_Graph_Debt_Prolong;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Пролонгация основного графика
  *  @oMessage            - возвращаемое сообщение
  *  @iLoan_id            - уникальный номер кредита
  *  @iAct                - действие PROLONG - пролонгировать, DECIDE - просто внести номер решения
  *  @iDecide_Num         - номер решения
  *  @iDecide_Date        - дата  решения
  *  @iDecide_Department  - Орган банка
  *  @iDecide_Reason      - Причина решения
  *  @iExec_Lead          - Y - выполнять проводки, N не выполнять
  *  @iLead_Sum_Pay       - сумма прологации
  *  @iLead_Purpose       - назначение платежа
  *  @iLead_Sym_Id        - символ платежа
  *  @iLead_Trans_Id      - тип документа
  *  @iLead_Act_Id        - действие
  *  @iEdit_Period_Data   - данные о пролонгированном этапе
  *  @iObligate_Number    - № обязательства
  *  @iDate_Redemp        - дата гашения
  *  @iSum_Redemp         - сумма гашения
  *  @iSign_Long          - признак основной или пролонгирован
  *  @iIs_Preview_Mode    - ON - режим предпросмотра операций
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Prolong
  (
    Omessage             out varchar2,
    Iloan_Id             Ln_Card.Loan_Id%type,
    Iact                 varchar2,
    Idecide_Num          varchar2,
    Idecide_Date         varchar2,
    Idecide_Department   varchar2,
    Idecide_Reason       varchar2,
    Iexec_Lead           varchar2,
    Ilead_Sum_Pay        varchar2,
    Ilead_Purpose        varchar2,
    Ilead_Sym_Id         varchar2,
    Ilead_Trans_Id       varchar2,
    Ilead_Act_Id         varchar2,
    Iedit_Period_Data    Array_Varchar2,
    Iobligate_Number     Array_Varchar2,
    Idate_Redemp         Array_Varchar2,
    Isum_Redemp          Array_Varchar2,
    Isign_Long           Array_Varchar2,
    Iis_Preview_Mode     varchar2,
    Ilead_Sum_Pay_Main   varchar2 := null,
    Ilead_Sum_Pay_Arrear varchar2 := null
  ) is
    Vhash Hashtable := Hashtable();
    --vLn_Oper      LN_OPERATION.OPERATION_T;
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    execute immediate ('truncate table LN_OPERATIONS_ID');
    --
    Vhash.Put('ACTION', Iact);
    Vhash.Put('DECIDE_NUM', Idecide_Num);
    Vhash.Put('DECIDE_DATE', Idecide_Date);
    Vhash.Put('DECIDE_DEPARTMENT', Idecide_Department);
    Vhash.Put('DECIDE_REASON', Idecide_Reason);
    Vhash.Put('EXEC_LEAD', Iexec_Lead);
    if Setup.Get_Headermfo = '09006' then
      Vhash.Put('LEAD_SUM_PAY', Ilead_Sum_Pay_Main);
    else
      Vhash.Put('LEAD_SUM_PAY', Ilead_Sum_Pay);
    end if;
    Vhash.Put('LEAD_PURPOSE', Ilead_Purpose);
    Vhash.Put('LEAD_SYM_ID', Ilead_Sym_Id);
    Vhash.Put('LEAD_TRANS_ID', Ilead_Trans_Id);
    Vhash.Put('LEAD_ACT_ID', Ilead_Act_Id);
    Vhash.Put('EDIT_PERIOD_DATA', Iedit_Period_Data);
    Vhash.Put('OBLIGATE_NUMBER', Iobligate_Number);
    Vhash.Put('DATE_REDEMP', Idate_Redemp);
    Vhash.Put('SUM_REDEMP', Isum_Redemp);
    Vhash.Put('SIGN_LONG', Isign_Long);
  
    Operation_Action(Ioperation_Code  => 'PROLONG' -- Код операции
                    ,
                     Iloan_Id         => Vloan_Id -- Код кредита
                    ,
                     Ihashparams      => Vhash -- список параметров
                    ,
                     Iis_Preview_Mode => Iis_Preview_Mode -- режим предпросмотра операций
                     );
  
    -- вставка id операций для отображения на клиентской части
    --vLn_Oper := ln_operation.Get_Operation;
  
    --if Ln_Operation.Is_Action_Broken then -- операция заблокированна
    if Ln_Cache.Operation.Action_Broken then
      Omessage := 'Операция не выполнена';
    else
      Omessage := 'Операция выполнена';
    end if;
  
    insert into Ln_Operations_Id
    values
      (Ln_Cache.Operation.Id /*, Ln_Cache.Loan.Branch_Id*/);
    --
    if Setup.Get_Headermfo = '09006' then
      Vhash.Put('LEAD_TRANS_ID', Ilead_Trans_Id);
      Vhash.Put('LEAD_ACT_ID', '11');
      Vhash.Put('LEAD_DOC_NUMB', Idecide_Num);
      Vhash.Put('LEAD_ACCOUNT_DEBET', Ln_Action_Param.Get_Loan_Account_Code(4));
      Vhash.Put('LEAD_ACCOUNT_NAME_DEBET', Ln_Action_Param.Get_Loan_Account_Name(4));
      Vhash.Put('LEAD_INN_DEBET', Ln_Action_Param.Get_Client_Inn(4));
      Vhash.Put('LEAD_ACCOUNT', Ln_Action_Param.Get_Loan_Account_Code(5));
      Vhash.Put('LEAD_ACCOUNT_NAME', Ln_Action_Param.Get_Loan_Account_Name(5));
      Vhash.Put('LEAD_INN', Ln_Action_Param.Get_Client_Inn(5));
      Vhash.Put('LEAD_SUM_PAY', Ilead_Sum_Pay_Arrear);
      Vhash.Put('LEAD_SYM_ID', '00635');
      Vhash.Put('LEAD_PURPOSE', 'Пролонгация просроченного кредит');
      Operation_Action(Ioperation_Code  => 'HAND_PROLONG_ARREAR' -- Код операции
                      ,
                       Iloan_Id         => Vloan_Id -- Код кредита
                      ,
                       Ihashparams      => Vhash -- список параметров
                      ,
                       Iis_Preview_Mode => Iis_Preview_Mode -- режим предпросмотра операций
                       );
      -- вставка id операций для отображения на клиентской части
      --vLn_Oper := ln_operation.Get_Operation;
    
      if Ln_Cache.Operation.Action_Broken then
        -- операция заблокированна
        Omessage := 'Операция не выполнена';
      else
        Omessage := 'Операция выполнена';
      end if;
    
      insert into Ln_Operations_Id
      values
        (Ln_Cache.Operation.Id /*, Ln_Cache.Loan.Branch_Id*/);
    end if;
  end Prolong;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Утверждение запроса на сумму в котролях по договорам
  *  @iLoan_id - уникальный номер кредита
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Loan_Confirm_Sum
  (
    Iloan_Id     Ln_Card.Loan_Id%type,
    Isum_Confirm number,
    Iikeystring  varchar2
  ) is
  begin
    Ln_Setting.Loan_Confirm_Sum(Iloan_Id     => Iloan_Id,
                                Isum_Confirm => Isum_Confirm,
                                Iikeystring  => Iikeystring);
  end Loan_Confirm_Sum;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Возвращает значение параметра CONFIRM_SUM_IK
     Утверждение лимитов с электронно-цифровой подписью из настроек подсистемы
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Confirm_Sum_Ik return Ln_Params.Value%type is
    result Ln_Params.Value%type;
  begin
    result := Ln_Setting.Get_Sys_Param('CONFIRM_SUM_IK', Setup.Get_Filial_Code);
    return result;
  end Get_Confirm_Sum_Ik;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Сумма запрашиваемая в контролях по договорам  в рублях
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Control_Sum_Request(Iloan_Id Ln_Card.Loan_Id%type)
    return Ln_Loan_Control_Sum.Sum_Request%type is
    result Ln_Loan_Control_Sum.Sum_Request%type := 0;
  begin
    result := Ln_Setting.Get_Control_Sum_Request(Iloan_Id);
    return result;
  end Get_Control_Sum_Request;

  ----------------------------------------------------------------------------------------------------
  Function Get_Balance_Account_Name(Ibalance_Account in varchar2) return varchar2 is
  begin
    return Bank.Get_Coa_Name(Ibalance_Account);
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Вставка, удаление балансового счета, который будет контролироваться в АРМе ОИ
  *  @iAction   - код действия
  *  @iCode     - код операции по которой нужно отслеживать бал.счета,также должен быть указан как Par_Id в Ln_System
  *  @iBls_Acc  - код балансового счета
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Reaction_Bls_Action
  (
    Iaction  in varchar2,
    Icode    in Ln_Reaction_Bls.Code%type,
    Ibls_Acc in Ln_Reaction_Bls.Bls_Acc%type
  ) is
  begin
    Ln_Setting.Reaction_Bls_Action(Iaction => Iaction, Icode => Icode, Ibls_Acc => Ibls_Acc);
  
  end Reaction_Bls_Action;

  ----------------------------------------------------------------------------------------------------
  Function Get_Emp_Name(Icode Employee_Current.Code%type) return varchar2 is
  begin
    return Employee.Get_Emp_Name(Icode);
  end Get_Emp_Name;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Вставка, удаление сотрудника для возможности утверждать заявки на ГО
  *  @iAction  - код выполняемого действия: 'I' - добавление, 'D'- удаление
  *  @iEmpCode - код сотрудника
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Emp_Confirm_Claim_Action
  (
    Iaction  varchar2,
    Iempcode Ln_Claim_Emp_Confirm.Emp_Code%type
  ) is
  begin
    Ln_Setting.Emp_Confirm_Claim_Action(Iaction => Iaction, Iempcode => Iempcode);
  end Emp_Confirm_Claim_Action;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   Сохранение льготных периодов по шифрам кредитования для расчета графиков погашений
  *  @iAction       - код действия: 'I' - добавление, 'D'- удаление, 'U' - изменение
  *  @iPurposeCode  - код шифра кредитования
  *  @iLgot_Dept    - месяцы для осн. долга
  *  @iLgot_Perc    - месяцы для процентов
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Graph_Purpose_Action
  (
    Iaction      varchar2,
    Ipurposecode varchar2,
    Ilgot_Dept   number,
    Ilgot_Perc   number
  ) is
  begin
    Ln_Setting.Graph_Purpose_Action(Iaction      => Iaction,
                                    Ipurposecode => Ipurposecode,
                                    Ilgot_Dept   => Ilgot_Dept,
                                    Ilgot_Perc   => Ilgot_Perc);
  end Graph_Purpose_Action;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *   включение / отключение блокировки не гасить/, не списывать осн долг пока есть просроченные проценты
  *  @iLoan_Id  - массив уникальных номеров кредитов
  *  @iLocking  - 0-откл, 1-включить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Locking_Arrear_Perc
  (
    Iloan_Id Array_Varchar2,
    Ilocking Ln_Mode_Actions.Lock_Arrear_Perc%type
  ) is
  begin
    Ln_Setting.Locking_Arrear_Perc(Iloan_Id => Iloan_Id, Ilocking => Ilocking);
  end Locking_Arrear_Perc;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     включение / отключение блокировки для корректировки кредитов
  *  @iLoan_Id  - массив уникальных номеров кредитов
  *  @iLocking  - 0-откл, 1-включить
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Locking_Loan
  (
    Iloan_Id Array_Varchar2,
    Ilocking Ln_Card.Locking%type
  ) is
  begin
    Ln_Setting.Locking_Loan(Iloan_Id, Ilocking);
    for i in 1 .. Iloan_Id.Count
    loop
      Ln_Contract.Backup_Loan_Card(i_Loan_Id => to_number(Iloan_Id(i)));
    end loop;
  end Locking_Loan;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Отчет. Движение счетов
  *  @iAccount  - Код счета
  *  @iDateBegin  - Дата от
  *  @iDateEnd  - Дата от
  *  @iDebCred  - 0 -Дебетовые и кредитовые документы
                  1 -Только дебетовые документы
                  2 -Только кредитовые документы
  
  *  @iCorrAcc  - Счет корреспондента
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Movements_On_Account
  (
    Iaccount   in varchar2,
    Idatebegin in date,
    Idateend   in date,
    Idebcred   in varchar2,
    Icorracc   in varchar2
  ) return Personal_Table is
  begin
    if Ln_Service.Is_Day_Closing or Ln_Service.Is_Day_Opening then
      return Personal_Table();
    end if;
    --
    return Ln_Rep.Get_Movements_On_Account(Iaccount     => Iaccount,
                                           Idatebegin   => Idatebegin,
                                           Idateend     => Idateend,
                                           Idebcred     => Idebcred,
                                           Icorracc     => Icorracc,
                                           Ifilial_Code => Coalesce(Ln_Cache.Loan.Filial_Code,
                                                                    Get_Loan_Param('Filial_Code'),
                                                                    Get_Claim_Param('Filial_Code')));
  end Get_Movements_On_Account;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Инициализация. Очистка временной таблицы и т.д.
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Sys_Param_Init is
  begin
    Ln_Setting.Sys_Param_Init;
  end Sys_Param_Init;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает массив значений для указанного параметра
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Sys_Param_Value_List
  (
    Icode        varchar2,
    Ifilial_Code varchar2,
    Iread_Mode   varchar2 := 'N'
  ) return Array_Varchar2 is
  begin
    return Ln_Setting.Get_Sys_Param_Value_List(Icode, Ifilial_Code, Iread_Mode);
  end Get_Sys_Param_Value_List;
  --~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  Function Get_Sys_Param_Value_List_l
  (
    Icode       varchar2,
    Ilocal_Code varchar2,
    Iread_Mode  varchar2 := 'N'
  ) return Array_Varchar2 is
  begin
    return Ln_Setting.Get_Sys_Param_Value_List_l(Icode, Ilocal_Code, Iread_Mode);
  end Get_Sys_Param_Value_List_l;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Добавляет во временную таблицу значение массива
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Sys_Param_List_Add
  (
    Icode        varchar2,
    Ivalue       varchar2,
    Ifilial_Code varchar2
  ) is
  begin
    Ln_Setting.Sys_Param_List_Add(Icode, Ivalue, Ifilial_Code);
  end Sys_Param_List_Add;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Удаляет из временной таблицы значение массива
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Sys_Param_List_Del
  (
    Icode        varchar2,
    Ivalue       varchar2,
    Ifilial_Code varchar2
  ) is
  begin
    Ln_Setting.Sys_Param_List_Del(Icode, Ivalue, Ifilial_Code);
  end Sys_Param_List_Del;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Сохранение параметров настройки системы ( изменение )
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Save_Params
  (
    Igroup_Code in varchar2,
    Iparams     in Array_Varchar2
  ) is
    Vnewparams Ln_Setting.Sys_Params_t := Ln_Setting.Sys_Params_t();
  begin
    if Iparams.Count = 0 then
      return;
    end if;
  
    -- Массив новых параметров
    for i in 1 .. Iparams.Count
    loop
      Vnewparams.Extend;
      Vnewparams(Vnewparams.Count).Code := Ln_Service.Get_Segment(Iparams(i), '@', 1);
      Vnewparams(Vnewparams.Count).Value := Ln_Service.Get_Segment(Iparams(i), '@', 2);
      Vnewparams(Vnewparams.Count).Filial_Code := Ln_Service.Get_Segment(Iparams(i), '@', 3);
      Vnewparams(Vnewparams.Count).Local_Code := Ln_Service.Get_Segment(Iparams(i), '@', 4);
    end loop;
    Ln_Setting.Set_Sys_Params(Igroup_Code, Vnewparams);
  end Save_Params;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Изменение кода состояния кредита при проведении документа
  *  @iLoan_ID - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Set_Loan_State(Iloan_Id in Ln_Card.Loan_Id%type) is
  begin
    Ln_Contract.Set_Loan_State(Iloan_Id => Iloan_Id);
  end Set_Loan_State;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Добавление, удаление, изменение счетов
  *  @iLoan_ID           - уникальный номер договора
  *  @iAction            - выполняемая операция ( 'ACCOUNT_CREATE'- добавление
                                                , 'ACCOUNT_DELETE' - удаление
                                                , 'ACCOUNT_UPDATE' - изменение
                                                , 'ACCOUNT_REASSIGNMENT' - переназначение )
  *  @iAccount_Code      - 20-ти значный счет
  *  @iAccount_Type_Code - тип счета
  *  @iDate_Validate     - дата начала действия счета
  *  @iPreview_Mode      - режим просмотра - просмотр данных до сохранения и после
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Account_Action
  (
    Iloan_Id           in Ln_Card.Loan_Id%type,
    Iaction            in varchar2,
    Iaccount_Code      in Array_Varchar2,
    Iaccount_Type_Code in Array_Varchar2,
    Idate_Validate     in Array_Varchar2,
    Ipreview_Mode      in varchar2,
    Oresult_Message    out varchar2
  ) is
    Vhash Hashtable := Hashtable();
    --vOperation   LN_OPERATION.OPERATION_T;
  begin
    delete from Ln_Operations_Id;
  
    if Iaction = 'ACCOUNT_REASSIGNMENT' then
      Vhash.Put('ACCOUNT_CODE', Iaccount_Code);
      Vhash.Put('DATE_VALIDATE', Idate_Validate);
      Vhash.Put('TYPE_ACCOUNT', Iaccount_Type_Code(1));
    else
      Vhash.Put('ACCOUNT_CODE', Iaccount_Code);
      Vhash.Put('TYPE_ACCOUNT', Iaccount_Type_Code);
    end if;
  
    Operation_Action(Ioperation_Code  => Iaction,
                     Iloan_Id         => Iloan_Id,
                     Ihashparams      => Vhash,
                     Iis_Preview_Mode => Ipreview_Mode);
  
    -- вставка id операций для отображения на клиентской части
    --vOperation := ln_operation.Get_Operation;
  
    if Ln_Cache.Operation.Action_Broken or Ln_Cache.Operation.Operation_Broken then
      Oresult_Message := 'Операция не выполнена!';
    else
      Oresult_Message := 'Операция успешно выполнена!';
    end if;
  
    insert into Ln_Operations_Id
    values
      (Ln_Cache.Operation.Id /*, Ln_Cache.Loan.Branch_Id*/);
  
  end Account_Action;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Возвращает наименование типа счета и соответствующую ему маску счета
  *  @iLoan_ID         - уникальный номер договора
  *  @iAcc_Type_Code   - код типа счета
  *  @oAcc_Type_Name   - наименование типа счета
  *  @oAcc_Type_Mask   - маска счета
  *  @oIs_Acc_Editable - может ли пользователь изменять маску счета на клиентской части('Y', 'N')
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Get_Acc_Type_Params
  (
    Iloan_Id         in Ln_Card.Loan_Id%type,
    Iacc_Type_Code   in varchar2,
    Oacc_Type_Name   out varchar2,
    Oacc_Type_Mask   out varchar2,
    Ois_Acc_Editable out varchar2
  ) is
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
    Vdummy   varchar2(27);
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    select t.Name
      into Oacc_Type_Name
      from Ln_v_Account_Types t
     where t.Code = Iacc_Type_Code;
    --
    Ln_Data.Get_Pattern(Iloan_Id      => Vloan_Id,
                        Iaction       => 'I',
                        Itype_Account => Iacc_Type_Code,
                        Ocann_Change  => Ois_Acc_Editable,
                        Oaccount      => Oacc_Type_Mask,
                        Oacc_Owner    => Vdummy);
  exception
    when others then
      Raise_Application_Error(-20000, Ln_Util.Parse_Operation_Template(sqlerrm));
  end Get_Acc_Type_Params;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает счета, типы счетов текущего договора
  *  @iAcc_Type_Code - массив типов ссудных счетов
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Acc_4_Upd(Iacc_Type_Codes in Array_Varchar2) return varchar2 is
    Vform j_Hash := j_Hash;
    Vdata j_Hash := j_Hash;
  
    Vacc           j_Array := j_Array;
    Vacc_Type_Code j_Array := j_Array;
    Vacc_Type_Name j_Array := j_Array;
  begin
  
    for Acc in (select t.Acc, t.Acc_Type_Name, t.Acc_Type_Code
                  from Ln_v_Loan_Acc t
                 where t.Acc_Type_Code in (select *
                                             from table(Iacc_Type_Codes)))
    loop
      Vacc.Push(Acc.Acc);
      Vacc_Type_Code.Push(Acc.Acc_Type_Code);
      Vacc_Type_Name.Push(Acc.Acc_Type_Name);
    end loop;
  
    Vform.Put('ACC_TYPE_CODE', Vacc_Type_Code);
    Vform.Put('ACC_TYPE_NAME', Vacc_Type_Name);
    Vform.Put('ACCOUNT', Vacc);
  
    Vdata.Put('fm', Vform);
  
    return Vdata.To_String;
  end Get_Acc_4_Upd;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает все счета определенного типа для текущего кредита
  *  @iAcc_Type_Code - тип ссудного счета
  *  @iLoan_ID       - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Acc_4_Reassign
  (
    Iacc_Type_Code in Ln_v_Account_Types.Code%type,
    Iloan_Id       in Ln_Card.Loan_Id%type
  ) return varchar2 is
    Vacc               j_Array := j_Array;
    Vacc_Date_Validate j_Array := j_Array;
  
    Vform    j_Hash := j_Hash;
    Vdata    j_Hash := j_Hash;
    Vloan_Id Ln_Card.Loan_Id%type := Iloan_Id;
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    for Acc in (select Substr(t.Account_Code, -20) as Acc,
                       to_char(t.Date_Validate, Ln_Const.Maskdate) as Date_Validate
                  from Ln_Account t
                 where t.Loan_Id = Vloan_Id
                   and t.Loan_Type_Account = Iacc_Type_Code)
    loop
      Vacc.Push(Acc.Acc);
      Vacc_Date_Validate.Push(Acc.Date_Validate);
    end loop;
  
    Vform.Put('ACCOUNT', Vacc);
    Vform.Put('DATE_VALIDATE', Vacc_Date_Validate);
  
    Vdata.Put('fm', Vform);
  
    return Vdata.To_String;
  
  end Get_Acc_4_Reassign;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *    Добавление, удаление, изменение процентных ставок
  *  @iLoan_ID           - уникальный номер договора
  *  @iAction            - выполняемая операция ( 'PERCENT_RATE_ADD'    - добавление
                                                , 'PERCENT_RATE_DELETE' - удаление
                                                , 'PERCENT_RATE_UPDATE' - изменение )
  *  @iPerc_Rates      - процентные ставки
  *  @iRate_Desc_Codes      - вид процентной ставки (основная %% ставка и т.п.)
  *  @iRate_Type_Codes - тип процентной ставки (фиксированная и т.п.)
  *  @iValue_Dates     - дата начала действия проц ставки
  *  @iOld_Value_Dates - при PERCENT_RATE_UPDATE - дата начала действия проц. ставки до изменения
  *  @iDescriptions    - комментарии
  *  @iPreview_Mode    - режим просмотра - просмотр данных до сохранения(ON) и после(OFF)
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Percent_Rate_Action
  (
    Iloan_Id            in Ln_Card.Loan_Id%type,
    Iaction             in varchar2,
    Iperc_Rates         in Array_Varchar2,
    Isumma              in Array_Number,
    Irate_Desc_Codes    in Array_Varchar2,
    Irate_Type_Codes    in Array_Varchar2,
    Ivalue_Dates        in Array_Varchar2,
    Iold_Value_Dates    in Array_Varchar2,
    Idescriptions       in Array_Varchar2,
    Iis_Modes           in Array_Varchar2,
    Icombined_Perc_Rate in Array_Varchar2,
    Ipreview_Mode       in varchar2,
    Oresult_Message     out varchar2
  ) is
    Vhash Hashtable := Hashtable();
    --vOperation   LN_OPERATION.OPERATION_T;
    Vloan_Id  Ln_Card.Loan_Id%type := Iloan_Id;
    v_Err_Msg varchar2(4000);
  begin
    if Vloan_Id is null then
      Vloan_Id := Get_Loan_Param('Loan_ID');
    end if;
    --
    delete from Ln_Operations_Id;
    --
    Vhash.Put('PERC_CODE_DESC', Irate_Desc_Codes);
    Vhash.Put('FIRST_DATE', Ivalue_Dates);
  
    if Iaction <> 'PERCENT_RATE_DELETE' then
      Vhash.Put('PERC_RATE', Iperc_Rates);
      Vhash.Put('SUMMA', Isumma);
      Vhash.Put('PERC_CODE_DESC', Irate_Desc_Codes);
      Vhash.Put('PERC_TYPE', Irate_Type_Codes);
      Vhash.Put('FIRST_DATE_OLD', Iold_Value_Dates);
      Vhash.Put('DESCRIPTION', Idescriptions);
      Vhash.Put('IS_MODE', Iis_Modes);
      Vhash.Put('SHARE_COMBINED_PERC_RATE', Icombined_Perc_Rate);
    end if;
  
    Operation_Action(Ioperation_Code  => Iaction,
                     Iloan_Id         => Vloan_Id,
                     Ihashparams      => Vhash,
                     Iis_Preview_Mode => Ipreview_Mode);
  
    -- вставка id операций для отображения на клиентской части
    --vOperation := ln_operation.Get_Operation;
  
    if Ln_Cache.Operation.Action_Broken or Ln_Cache.Operation.Operation_Broken then
      Oresult_Message := 'Операция не выполнена!';
    else
      Oresult_Message := 'Операция успешно выполнена!';
      Ln_Rci_Api_Out.Send_Card(i_Loan_Id     => Vloan_Id,
                               o_Err_Msg     => v_Err_Msg,
                               i_Module_Code => 'RCI');
      if v_Err_Msg is not null then
        Oresult_Message := Oresult_Message || Chr(10) || 'РГКИ Сообщение:' || Chr(10) || 'Ошибка: ' ||
                           v_Err_Msg;
      else
        Oresult_Message := Oresult_Message || Chr(10) || 'РГКИ Сообщение:' || Chr(10) ||
                           'Подготовка к отправке выполнена успешно.';
      end if;
    
      Ln_Contract.Nik_Card_Not_Sent(i_Loan_Id => Vloan_Id);
    end if;
  
    insert into Ln_Operations_Id
    values
      (Ln_Cache.Operation.Id /*, Ln_Cache.Loan.Branch_Id*/);
  
  end Percent_Rate_Action;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает все процентные ставки определенного типа для текущего кредита
  *  @iPerc_Rate_Desc_Code - тип процентной ставки
  *  @iValueDate           - дата начала действия проц. ставки
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Perc_Rates
  (
    Iperc_Rate_Desc_Code in varchar2,
    Ivaluedate           in date
  ) return varchar2 is
    Vdate_Validate j_Array := j_Array;
    Vdesc_Name     j_Array := j_Array;
    Vdesc_Code     j_Array := j_Array;
    Vtype_Name     j_Array := j_Array;
    Vtype_Code     j_Array := j_Array;
    Vperc_Type     j_Array := j_Array;
    Vsumma         j_Array := j_Array;
    Vdescription   j_Array := j_Array;
    Vis_Mode       j_Array := j_Array;
    Vshc_Perc_Rate j_Array := j_Array;
    Vform          j_Hash := j_Hash;
    Vdata          j_Hash := j_Hash;
  begin
    for Rate in (select r.First_Date Date_Validate,
                        t.Name Perc_Rate_Desc_Name,
                        r.Perc_Code_Desc Perc_Rate_Desc_Code,
                        r.Perc_Rate,
                        r.Summa,
                        Decode((select Is_Mode
                                 from Ln_s_Perc_Rate_Type
                                where Per_Rate_Id = r.Perc_Type),
                               'C',
                               ' (' || r.Perc_Type || '-' ||
                               (select Ln_Util.Get_Interest_Rate(r.Perc_Type)
                                  from Dual) || ')',
                               '') as Perc_Rate_Type_Name,
                        r.Perc_Type as Perc_Rate_Type_Code,
                        r.Description,
                        (select c.Is_Mode
                           from Ln_s_Perc_Rate_Type c
                          where c.Per_Rate_Id = r.Perc_Type
                            and Rownum = 1) Is_Mode,
                        r.Share_Combined_Perc
                   from Ln_Percent_Rate r, Ln_s_Perc_Code_Desc t
                  where r.Loan_Id = Ln_Cache.Loan.Loan_Id
                    and r.Perc_Code_Desc = Iperc_Rate_Desc_Code
                    and r.First_Date = Ivaluedate
                    and r.Perc_Code_Desc = t.Code)
    loop
      Vdate_Validate.Push(to_char(Rate.Date_Validate, Ln_Const.Maskdate));
      Vdesc_Name.Push(Rate.Perc_Rate_Desc_Name);
      Vdesc_Code.Push(Rate.Perc_Rate_Desc_Code);
      Vtype_Name.Push(Rate.Perc_Rate_Type_Name);
      Vtype_Code.Push(Rate.Perc_Rate_Type_Code);
      Vperc_Type.Push(to_char(Rate.Perc_Rate));
      Vsumma.Push(to_char(Rate.Summa));
      Vdescription.Push(Rate.Description);
      Vis_Mode.Push(Rate.Is_Mode);
      Vshc_Perc_Rate.Push(Rate.Share_Combined_Perc);
    end loop;
  
    Vform.Put('PERC_RATE_DESC_CODE', Vdesc_Code);
    Vform.Put('PERC_RATE_DESC_NAME', Vdesc_Name);
    Vform.Put('PERC_RATE_TYPE_CODE', Vtype_Code);
    Vform.Put('PERC_RATE_TYPE_NAME', Vtype_Name);
    Vform.Put('VALUE_DATE', Vdate_Validate);
    Vform.Put('VALUE_DATE_OLD', Vdate_Validate);
    Vform.Put('PERC_RATE', Vperc_Type);
    Vform.Put('SUMMA', Vsumma);
    Vform.Put('DESCRIPTION', Vdescription);
    Vform.Put('IS_MODE', Vis_Mode);
    Vform.Put('SHARE_COMBINED_PERC_RATE', Vshc_Perc_Rate);
  
    Vdata.Put('fm', Vform);
  
    return Vdata.To_String;
  end Get_Perc_Rates;

  -------------------------------------------------------------------------------------
  Function Get_Claim_Data_4_Creating_Card(Iclaim_Id in Ln_Claim.Claim_Id%type) return varchar2 is
    Vform                j_Hash := j_Hash;
    Vdata                j_Hash := j_Hash;
    Vfield               j_Field;
    Vclaim               Ln_v_Claim%rowtype;
    Vloan_Order_Num      Ln_Card.Loan_Number%type;
    Vloan_Numbers        Array_Number;
    Vloans_Ids           Array_Varchar2;
    v_Count              number;
    v_Loan_Line_Purose   Ln_Claim_Appendix.Loan_Line_Purpose%type;
    v_Use_Credit_Object  Ln_Claim_Appendix.Use_Credit_Object%type;
    v_Credit_Object_Id   Ln_Claim_Appendix.Credit_Object_Id%type;
    v_Credit_Object_Sum  Ln_Claim_Appendix.Credit_Object_Sum%type;
    v_Client_Phone       Ln_Claim_Appendix.Mobile_Number%type;
    v_Credit_Object_Name varchar2(32000);
    v_Department_Id      Ln_s_Blank_Product_Departments.Department_Id%type;
  begin
    Vloans_Ids := Dw_Util.Get_Docs_Id('LNCLAIM', Iclaim_Id, 'LNCONTRACT');
  
    if Vloans_Ids.Count > 0 then
      Ut.Raise_Err('Для текущей заявки уже заведен договор!');
    end if;
    Ln_Sms.Check_Claim_Sms_Confirm(i_Claim_Id => Iclaim_Id);
    Ln_Contract.On_Create_Card(Iclaim_Id);
    --
    select t.*
      into Vclaim
      from Ln_v_Claim t
     where t.Claim_Id = Iclaim_Id;
    --
    if not Ln_Init.Off_Iabs_Actions_By_Init_Mod and
       Ln_Init.Off_All_Iabs_Actions(Vclaim.Creator_Code) then
      Raise_Application_Error(-20000,
                              'По этому договору запрещено выполнять какие-либо действия в подсистеме "Кредиты"');
    end if;
    --
    select Nvl(Decode(max(t.Loan_Number), 999, 500), 0) + 1
      into Vloan_Order_Num
      from Ln_Card t
     where t.Filial_Code = Setup.Filial_Code
       and t.Client_Code = Vclaim.Client_Code;
    select Loan_Number
      bulk collect
      into Vloan_Numbers
      from Ln_Card t
     where t.Filial_Code = Setup.Filial_Code
       and t.Client_Code = Vclaim.Client_Code;
    if Vloan_Numbers.Count = 0 then
      Vloan_Order_Num := 1;
    else
      select Id
        into Vloan_Order_Num
        from (select Id
                from (select level Id
                        from Dual
                      connect by level < 1000)
               where Id not member of Vloan_Numbers
               order by Id)
       where Rownum = 1;
    end if;
    Ln_Init.Set_Product(Vclaim.Product_Id);
    Vform.Put('PRODUCT_ID', Vclaim.Product_Id);
    Vform.Put('PRODUCT_GROUP_ID', Ln_Product.Product_Group_Id(Vclaim.Product_Id));
    Vform.Put('CLIENT_CODE', Vclaim.Client_Code);
    Vform.Put('CLIENT_NAME', Vclaim.Client_Name);
    Vform.Put('BORROWER_CODE', Vclaim.Borrower);
    Vform.Put('BORROWER_NAME', Get_Borrower_Name(Vclaim.Borrower));
    Vform.Put('LOAN_NUM', Vloan_Order_Num);
    Vform.Put('CLAIM_NUM', Vclaim.Claim_Num);
    Vform.Put('CONTRACT_NUM', Vclaim.Claim_Num);
    Vform.Put('CONTRACT_DATE', to_char(Setup.Operday, Ln_Const.Maskdate));
    Vform.Put('CREDIT_TYPE', Vclaim.Credit_Type);
    Vform.Put('CREDIT_TYPE_NAME', Get_Contract_Type(Vclaim.Credit_Type));
    Vform.Put('LOAN_TYPE_CODE', Vclaim.Loan_Type);
    Vform.Put('LOAN_TYPE_NAME', Get_Credit_Type_Name(Vclaim.Loan_Type));
    Vform.Put('LENDING_TYPE', Vclaim.Lending_Type);
    Vform.Put('PURPOSE_LENDING', Vclaim.Purpose_Lending);
    Vform.Put('PURPOSE_LENDING_NAME', Ln_Service.Get_Purpose_Lending_Name(Vclaim.Purpose_Lending));
    Vform.Put('DECISION_NUM', Vclaim.Decide_Num);
    Vform.Put('DECISION_DATE', to_char(Vclaim.Decide_Date, Ln_Const.Maskdate));
    Vform.Put('CURRENCY_CODE', Vclaim.Currency);
    Vform.Put('CURRENCY_NAME', Get_Currency_Name(Vclaim.Currency));
    Vform.Put('FIRST_PAY', Vclaim.Summinitial);
  
    Vfield := j_Field(to_char(Vclaim.Amount));
    if Ln_Init.Is_Overdraft_Product(Vclaim.Product_Id) or
       Ln_Init.Is_Credit_Card_Product(Vclaim.Product_Id) then
      Vfield.Set_Readonly(true);
    end if;
    Vform.Put('AMOUNT', Vfield);
    Vform.Put('ECO_SEC_CODE', Vclaim.Eco_Sec);
    Vform.Put('ECO_SEC_NAME', Get_Eco_Sector_Name(Vclaim.Eco_Sec));
    Vform.Put('OKED_CODE', Vclaim.Oked_Code);
    Vform.Put('OKED_NAME', Vclaim.Oked_Name);
    Vform.Put('PURPOSE_CODE', Vclaim.Purpose_Loan);
    Vform.Put('PURPOSE_NAME', Get_Loan_Purpose_Name(Vclaim.Purpose_Loan));
    Vform.Put('RESIDENT', Vclaim.Resident);
    Vform.Put('CLIENT_TYPE', Vclaim.Client_Type);
    begin
      select count(*)
        into v_Count
        from Ln_Blanks
       where Claim_Id = Vclaim.Claim_Id;
      for r in (select *
                  from Ln_Blanks
                 where Claim_Id = Vclaim.Claim_Id)
      loop
        Vform.Put('LOAN_LINE_PURPOSE', r.Loan_Line_Purpose);
        Vform.Put('OBJECT', r.Loan_Line_Purpose);
      end loop;
    exception
      when No_Data_Found then
        select t.Loan_Line_Purpose
          into v_Loan_Line_Purose
          from Ln_Claim_Appendix t
         where Claim_Id = Vclaim.Claim_Id;
        Vform.Put('LOAN_LINE_PURPOSE', v_Loan_Line_Purose);
        Vform.Put('OBJECT', v_Loan_Line_Purose);
    end;
  
    if Vclaim.Client_Type = Ln_Const.Physical_Person then
      Vform.Put('FOUNDERS', Vclaim.Client_Name);
    end if;
    Vform.Put('INSPECTOR', Setup.Get_Employee_Name);
    select Hr_Util.Get_Param_Value(Vclaim.Mfo, 3)
      into Vclaim.Client_Name
      from Dual;
    Vform.Put('MANAGER', Vclaim.Client_Name);
  
    begin
      select t.Use_Credit_Object,
             t.Credit_Object_Id,
             t.Credit_Object_Sum,
             Mlm.Cur_Nls(o.Name) Label,
             t.Mobile_Number
        into v_Use_Credit_Object,
             v_Credit_Object_Id,
             v_Credit_Object_Sum,
             v_Credit_Object_Name,
             v_Client_Phone
        from Ln_Claim_Appendix t
        left join Ln_Credit_Objects o
          on t.Credit_Object_Id = o.Id
       where Claim_Id = Vclaim.Claim_Id;
    exception
      when others then
        v_Use_Credit_Object := 'N';
    end;
    Vform.Put('USE_CREDIT_OBJECT', v_Use_Credit_Object);
    Vform.Put('CREDIT_OBJECT_ID', v_Credit_Object_Id);
    Vform.Put('CREDIT_OBJECT_SUM',
              v_Credit_Object_Sum / Ln_Service.Get_Currency_Scale(Vclaim.Currency));
    Vform.Put('CREDIT_OBJECT_NAME', v_Credit_Object_Name);
    Vform.Put('MOBILE_PHONE', v_Client_Phone);
    -- department_id
    /*begin
      select t.Department_Id
        into v_Department_Id
        from Ln_s_Blank_Product_Departments t
       where t.Product_Id = Vclaim.Product_Id;
      Vform.Put('DEPARTMENT_ID', v_Department_Id);
    exception
      when No_Data_Found then
        null;
    end;*/
  
    --
    Vdata.Put('fm', Vform);
    User_Session.Put_Varchar2('ln_client_type', Vclaim.Client_Type);
    return Vdata.To_String;
  end Get_Claim_Data_4_Creating_Card;
  --==============================================================
  -- вставка id операции в темп таблицу для отображения протокола
  --==============================================================
  Procedure Set_Operations_Id(Iid in Ln_Operations.Id%type /*,
                                                                                                                                                          Ibranchid in Ln_Operations.Branch_Id%type*/) is
  begin
    Ln_Action_Param.Set_Operations_Id(Iid /*, Ibranchid*/);
  end Set_Operations_Id;

  --===========================================
  -- Установка глобальной переменной id кредита
  --===========================================
  Procedure Set_Gloan_Id(Iloan_Id Ln_Card.Loan_Id%type) is
  begin
    Ln_Action_Param.Set_Gloan_Id(Iloan_Id);
  end Set_Gloan_Id;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Перевод ссуды в состояние ЗАКРЫТАЯ ССУДА
  *  @iLoan_ID - уникальный номер договора
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Close_Loan(Iloan_Id in Ln_Card.Loan_Id%type) is
  begin
    Ln_Contract.Close_Loan(Iloan_Id);
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает операции заданной группы
  *  @iGroup_Code - код группы операции
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Operations(Igroup_Code in varchar2) return varchar2 is
    result varchar2(32767) := '';
  begin
    for t in (select '<option value=''' || t.Code || '''>' || t.Name as Operation
                from Ln_v_Operations t
               where t.Group_Code = Igroup_Code)
    loop
      Ut.Merge(result, t.Operation);
    end loop;
    return result;
  end Get_Operations;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает параметры контролей реквизитов договора
  *  @iAction_Code - код контроля
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Card_Requisites_Checks(Iaction_Code in Ln_Check_Card.Md%type) return varchar2 is
    Vform  j_Hash := j_Hash;
    Vdata  j_Hash := j_Hash;
    Vcheck Ln_Check_Card%rowtype;
  begin
    select t.*
      into Vcheck
      from Ln_Check_Card t
     where t.Md = Iaction_Code;
  
    Vform.Put('card_type', Vcheck.Card_Type);
    Vform.Put('loan_type', Vcheck.Loan_Type);
    Vform.Put('client_code', Vcheck.Client_Code);
    Vform.Put('claim_number', Vcheck.Claim_Number);
    Vform.Put('loan_number', Vcheck.Loan_Number);
    Vform.Put('loan_line_number', Vcheck.Loan_Line_Num);
    Vform.Put('committee_number', Vcheck.Committee_Number);
    Vform.Put('date_committee', Vcheck.Date_Committee);
    Vform.Put('contract_code', Vcheck.Contract_Code);
    Vform.Put('contract_date', Vcheck.Contract_Date);
    Vform.Put('contract_desc', Vcheck.Contract_Desc);
    Vform.Put('agr_num_notarial', Vcheck.Agr_Num_Notarial);
    Vform.Put('agr_date_notarial', Vcheck.Agr_Date_Notarial);
    Vform.Put('doc_notarial_num', Vcheck.Doc_Notarial_Num);
    Vform.Put('doc_notarial_date', Vcheck.Doc_Notarial_Date);
    Vform.Put('doc_gover_num', Vcheck.Doc_Gover_Num);
    Vform.Put('doc_gover_date', Vcheck.Doc_Gover_Date);
    Vform.Put('open_date', Vcheck.Open_Date);
    Vform.Put('close_date', Vcheck.Close_Date);
    Vform.Put('currency', Vcheck.Currency);
    Vform.Put('summ_loan', Vcheck.Summ_Loan);
    Vform.Put('days_in_year', Vcheck.Days_In_Year);
    Vform.Put('grace_period', Vcheck.Grace_Period);
    Vform.Put('fc_summ', Vcheck.Fc_Summ);
    Vform.Put('fc_desc', Vcheck.Fc_Desc);
    Vform.Put('form_delivery', Vcheck.Form_Delivery);
    Vform.Put('form_redemption', Vcheck.Form_Redemption);
    Vform.Put('term_loan_type', Vcheck.Term_Loan_Type);
    Vform.Put('eco_sec', Vcheck.Eco_Sec);
    Vform.Put('purpose_loan', Vcheck.Purpose_Loan);
    Vform.Put('object_loan', Vcheck.Object_Loan);
    Vform.Put('guar_class', Vcheck.Guar_Class);
    Vform.Put('source_cred', Vcheck.Source_Cred);
    Vform.Put('class_cred', Vcheck.Class_Cred);
    Vform.Put('class_quality', Vcheck.Class_Quality);
    Vform.Put('motive_revising', Vcheck.Motive_Revising);
    Vform.Put('date_revising', Vcheck.Date_Revising);
    Vform.Put('sign_delivery', Vcheck.Sign_Delivery);
    Vform.Put('manager_name', Vcheck.Manager_Name);
    Vform.Put('percent_rate', Vcheck.Percent_Rate);
    Vform.Put('red_debt_month', Vcheck.Red_Debt_Month);
    Vform.Put('red_perc_month', Vcheck.Red_Perc_Month);
    Vform.Put('graph_debt', Vcheck.Graph_Debt);
  
    Vdata.Put('fm', Vform);
  
    return Vdata.To_String;
  exception
    when No_Data_Found then
      Raise_Application_Error(-20000,
                              'Не найдены параметры контролей для md=' || Iaction_Code || '!');
  end Get_Card_Requisites_Checks;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Обновление параметров контролей реквизитов договора
  *  @i_md - код контроля
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Procedure Update_Card_Params_Checks
  (
    i_Md                in Ln_Check_Card.Md%type,
    i_Card_Type         in Ln_Check_Card.Card_Type%type,
    i_Loan_Type         in Ln_Check_Card.Loan_Type%type,
    i_Client_Code       in Ln_Check_Card.Client_Code%type,
    i_Claim_Number      in Ln_Check_Card.Claim_Number%type,
    i_Loan_Number       in Ln_Check_Card.Loan_Number%type,
    i_Loan_Line_Number  in Ln_Check_Card.Loan_Line_Num%type,
    i_Committee_Number  in Ln_Check_Card.Committee_Number%type,
    i_Date_Committee    in Ln_Check_Card.Date_Committee%type,
    i_Contract_Code     in Ln_Check_Card.Contract_Code%type,
    i_Contract_Date     in Ln_Check_Card.Contract_Date%type,
    i_Contract_Desc     in Ln_Check_Card.Contract_Desc%type,
    i_Agr_Num_Notarial  in Ln_Check_Card.Agr_Num_Notarial%type,
    i_Agr_Date_Notarial in Ln_Check_Card.Agr_Date_Notarial%type,
    i_Doc_Notarial_Num  in Ln_Check_Card.Doc_Notarial_Num%type,
    i_Doc_Notarial_Date in Ln_Check_Card.Doc_Notarial_Date%type,
    i_Doc_Gover_Num     in Ln_Check_Card.Doc_Gover_Num%type,
    i_Doc_Gover_Date    in Ln_Check_Card.Doc_Gover_Date%type,
    i_Open_Date         in Ln_Check_Card.Open_Date%type,
    i_Close_Date        in Ln_Check_Card.Close_Date%type,
    i_Currency          in Ln_Check_Card.Currency%type,
    i_Summ_Loan         in Ln_Check_Card.Summ_Loan%type,
    i_Days_In_Year      in Ln_Check_Card.Days_In_Year%type,
    i_Grace_Period      in Ln_Check_Card.Grace_Period%type,
    i_Fc_Summ           in Ln_Check_Card.Fc_Summ%type,
    i_Fc_Desc           in Ln_Check_Card.Fc_Desc%type,
    i_Form_Delivery     in Ln_Check_Card.Form_Delivery%type,
    i_Form_Redemption   in Ln_Check_Card.Form_Redemption%type,
    i_Term_Loan_Type    in Ln_Check_Card.Term_Loan_Type%type,
    i_Eco_Sec           in Ln_Check_Card.Eco_Sec%type,
    i_Purpose_Loan      in Ln_Check_Card.Purpose_Loan%type,
    i_Object_Loan       in Ln_Check_Card.Object_Loan%type,
    i_Guar_Class        in Ln_Check_Card.Guar_Class%type,
    i_Source_Cred       in Ln_Check_Card.Source_Cred%type,
    i_Class_Cred        in Ln_Check_Card.Class_Cred%type,
    i_Class_Quality     in Ln_Check_Card.Class_Quality%type,
    i_Motive_Revising   in Ln_Check_Card.Motive_Revising%type,
    i_Date_Revising     in Ln_Check_Card.Date_Revising%type,
    i_Sign_Delivery     in Ln_Check_Card.Sign_Delivery%type,
    i_Manager_Name      in Ln_Check_Card.Manager_Name%type,
    i_Percent_Rate      in Ln_Check_Card.Percent_Rate%type,
    i_Red_Debt_Month    in Ln_Check_Card.Red_Debt_Month%type,
    i_Red_Perc_Month    in Ln_Check_Card.Red_Perc_Month%type,
    i_Graph_Debt        in Ln_Check_Card.Graph_Debt%type
  ) is
    Vcheck_New Ln_Check_Card%rowtype;
    Vcheck_Old Ln_Check_Card%rowtype;
  begin
  
    select t.*
      into Vcheck_Old
      from Ln_Check_Card t
     where t.Md = i_Md;
  
    Vcheck_New.Md          := Vcheck_Old.Md;
    Vcheck_New.Descript    := Vcheck_Old.Descript;
    Vcheck_New.Loan_Id     := Vcheck_Old.Loan_Id;
    Vcheck_New.Filial_Code := Vcheck_Old.Filial_Code;
    Vcheck_New.Local_Code  := Vcheck_Old.Local_Code;
    Vcheck_New.Condition   := Vcheck_Old.Condition;
    Vcheck_New.Loanmonth   := Vcheck_Old.Loanmonth;
    Vcheck_New.Date_Modify := Vcheck_Old.Date_Modify;
    Vcheck_New.Err_Message := Vcheck_Old.Err_Message;
    Vcheck_New.Emp_Code    := Vcheck_Old.Emp_Code;
  
    Vcheck_New.Card_Type         := i_Card_Type;
    Vcheck_New.Loan_Type         := i_Loan_Type;
    Vcheck_New.Client_Code       := i_Client_Code;
    Vcheck_New.Claim_Number      := i_Claim_Number;
    Vcheck_New.Loan_Number       := i_Loan_Number;
    Vcheck_New.Loan_Line_Num     := i_Loan_Line_Number;
    Vcheck_New.Committee_Number  := i_Committee_Number;
    Vcheck_New.Date_Committee    := i_Date_Committee;
    Vcheck_New.Contract_Code     := i_Contract_Code;
    Vcheck_New.Contract_Date     := i_Contract_Date;
    Vcheck_New.Contract_Desc     := i_Contract_Desc;
    Vcheck_New.Agr_Num_Notarial  := i_Agr_Num_Notarial;
    Vcheck_New.Agr_Date_Notarial := i_Agr_Date_Notarial;
    Vcheck_New.Doc_Notarial_Num  := i_Doc_Notarial_Num;
    Vcheck_New.Doc_Notarial_Date := i_Doc_Notarial_Date;
    Vcheck_New.Doc_Gover_Num     := i_Doc_Gover_Num;
    Vcheck_New.Doc_Gover_Date    := i_Doc_Gover_Date;
    Vcheck_New.Open_Date         := i_Open_Date;
    Vcheck_New.Close_Date        := i_Close_Date;
    Vcheck_New.Currency          := i_Currency;
    Vcheck_New.Summ_Loan         := i_Summ_Loan;
    Vcheck_New.Days_In_Year      := i_Days_In_Year;
    Vcheck_New.Grace_Period      := i_Grace_Period;
    Vcheck_New.Fc_Summ           := i_Fc_Summ;
    Vcheck_New.Fc_Desc           := i_Fc_Desc;
    Vcheck_New.Form_Delivery     := i_Form_Delivery;
    Vcheck_New.Form_Redemption   := i_Form_Redemption;
    Vcheck_New.Term_Loan_Type    := i_Term_Loan_Type;
    Vcheck_New.Eco_Sec           := i_Eco_Sec;
    Vcheck_New.Purpose_Loan      := i_Purpose_Loan;
    Vcheck_New.Object_Loan       := i_Object_Loan;
    Vcheck_New.Guar_Class        := i_Guar_Class;
    Vcheck_New.Source_Cred       := i_Source_Cred;
    Vcheck_New.Class_Cred        := i_Class_Cred;
    Vcheck_New.Class_Quality     := i_Class_Quality;
    Vcheck_New.Motive_Revising   := i_Motive_Revising;
    Vcheck_New.Date_Revising     := i_Date_Revising;
    Vcheck_New.Sign_Delivery     := i_Sign_Delivery;
    Vcheck_New.Manager_Name      := i_Manager_Name;
    Vcheck_New.Percent_Rate      := i_Percent_Rate;
    Vcheck_New.Red_Debt_Month    := i_Red_Debt_Month;
    Vcheck_New.Red_Perc_Month    := i_Red_Perc_Month;
    Vcheck_New.Graph_Debt        := i_Graph_Debt;
    Vcheck_New.Card_Percent_Rate := i_Percent_Rate;
  
    Ln_Contract.Update_Card_Params_Checks(Vcheck_New);
  
  exception
    when others then
      Raise_Application_Error(-20000, sqlerrm);
  end Update_Card_Params_Checks;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает данные по указанным проводкам для печати
  *  @iCollection_ID - массив уникальных номеров проводок
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Leads(Icollection_Id in Array_Number) return sys_refcursor is
    result sys_refcursor;
    Vkey   varchar2(50) := 'LEADS_ON_OPERATION';
  begin
  
    Ln_Service.Put_To_Hash(Vkey, Icollection_Id);
  
    open result for
      select *
        from (select t.Id,
                     t.Doc_Numb,
                     to_char(t.Doc_Date, Ln_Const.Maskdate) Doc_Date,
                     t.Cl_Name,
                     Substr(t.Cl_Acc, 8) Cl_Acc,
                     Nvl(t.Cl_Inn, '') Cl_Inn,
                     t.Cl_Mfo,
                     Bank.Get_Bank_Name(t.Cl_Mfo) Cl_Mfo_Name,
                     t.Co_Name,
                     Substr(t.Co_Acc, 8) Co_Acc,
                     Nvl(t.Co_Inn, '') Co_Inn,
                     t.Co_Mfo,
                     Bank.Get_Bank_Name(t.Co_Mfo) Co_Mfo_Name,
                     to_char(t.Sum_Pay / Ln_Service.Get_Currency_Scale(t.Code_Currency),
                             Ln_Const.Masksum_2,
                             Ln_Const.Nls_Num_Char) Sum_Pay,
                     Slsumword(t.Sum_Pay / Ln_Service.Get_Currency_Scale(t.Code_Currency),
                               1,
                               t.Code_Currency) Sum_Pay_Writing_Out,
                     t.Code_Currency,
                     (select t.Char_Code
                        from v_Currency t
                       where t.Code = t.Code_Currency) Currency_Char_Code,
                     t.Pay_Purpose,
                     Ln_Service.Get_Trans_Name(t.Trans_Id) Trans_Name,
                     h.Ord
                from Leads t, Ln_Hash h
               where t.Id = h.Hash_Value
                 and h.Hash_Key = Vkey
              
              union
              
              select t.Id,
                     t.Doc_Numb,
                     to_char(t.Doc_Date, Ln_Const.Maskdate) Doc_Date,
                     t.Cl_Name,
                     Substr(t.Cl_Acc, 8) Cl_Acc,
                     Nvl(t.Cl_Inn, '') Cl_Inn,
                     t.Cl_Mfo,
                     Bank.Get_Bank_Name(t.Cl_Mfo) Cl_Mfo_Name,
                     t.Co_Name,
                     Substr(t.Co_Acc, 8) Co_Acc,
                     Nvl(t.Co_Inn, '') Co_Inn,
                     t.Co_Mfo,
                     Bank.Get_Bank_Name(t.Co_Mfo) Co_Mfo_Name,
                     to_char(t.Sum_Pay / Ln_Service.Get_Currency_Scale(t.Code_Currency),
                             Ln_Const.Masksum_2,
                             Ln_Const.Nls_Num_Char) Sum_Pay,
                     Slsumword(t.Sum_Pay / Ln_Service.Get_Currency_Scale(t.Code_Currency),
                               1,
                               t.Code_Currency) Sum_Pay_Writing_Out,
                     t.Code_Currency,
                     (select t.Char_Code
                        from v_Currency t
                       where t.Code = t.Code_Currency) Currency_Char_Code,
                     t.Pay_Purpose,
                     Ln_Service.Get_Trans_Name(t.Trans_Id) Trans_Name,
                     h.Ord
                from Leads_History t, Ln_Hash h
               where t.Id = h.Hash_Value
                 and h.Hash_Key = Vkey) f
       order by f.Ord;
    return result;
  end;
  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Возвращает дату, начиная с которой берем все заявки
  ***  Утвержденные заявки могут существовать без договоров до 30 дней с момента регистрации в НИКИ,
  * именно эти заявки и будем показывать на клиентской части
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Get_Active_Claims_From_Date return varchar2 is
  begin
    return Ln_Contract.Get_Active_Claims_From_Date;
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Переводим указанные кредиты в состояние Текущая ссуда
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Set_Loans_Normal(Iloans_Ids in Array_Number) return varchar2 is
  begin
    if Setup.Get_Headermfo = '09003' then
      Raise_Application_Error(-20000, 'Не разрешенная операция!');
    end if;
    return Ln_Contract.Set_Loans_Normal(Iloans_Ids);
  end;

  /*~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
  *     Выравнивание(корректировка) состояний кредитов
  ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~*/
  Function Adjust_Loans_States(Iloans_Ids in Array_Number) return varchar2 is
  begin
    return Ln_Contract.Adjust_Loans_States(Iloans_Ids);
  end;

  -------------------------------------------------------------------------------
  Procedure Send_Nk_Request_01
  (
    Iclaim_Id in Ln_Claim.Claim_Id%type,
    Oreport   out varchar2
  ) is
  begin
    Ln_Contract.Send_Nk_Request_01(Iclaim_Id, Oreport);
  end;

  -------------------------------------------------------------------------------
  Procedure Send_Nk_Request_02
  (
    Iclaim_Id in Ln_Claim.Claim_Id%type,
    Oreport   out varchar2
  ) is
  begin
    Ln_Contract.Send_Nk_Request_02(Iclaim_Id, Oreport);
  end;

  -------------------------------------------------------------------------------
  Function Is_Agricultural_Loans_Used return boolean is
  begin
    return Ln_Contract.Is_Agricultural_Loans_Used;
  end;

  -------------------------------------------------------------------------------
  Function Is_Limits_Control_Used return boolean is
  begin
    return Ln_Contract.Is_Limits_Control_Used;
  end;

  -------------------------------------------------------------------------------
  Procedure Request_Crediting_Limits(Iloan_Id in number) is
    v_Client_Code varchar2(8);
  begin
    select Client_Code
      into v_Client_Code
      from Ln_Card
     where Loan_Id = Iloan_Id;
    if Ln_Util.Is_Access_Param_With_Clients('CREDITING_CHECK_RESOURCE',
                                            'CREDITING_CHECK_RESOURCE_CLIENTS',
                                            v_Client_Code) = 'N' then
      return;
    end if;
    Ln_Contract.Request_Crediting_Limits(Iloan_Id);
  end;
  -------------------------------------------------------------------------------
  Function Get_Credit_Src_Refcursor(Iloan_Id in integer) return sys_refcursor is
    result sys_refcursor;
  begin
    open result for
      select '[' || t.Credit_Source_Code || '] ' || Get_Credit_Source_Name(t.Credit_Source_Code) as Credit_Source,
             (select '[' || t.Code || '] ' || t.Name
                from v_Foreign_Organization t
               where t.Code = t.Foreign_Organization_Code
                 and t.Credit_Source_Code = t.Credit_Source_Code) as Foreign_Organization,
             '[' || t.Financing_Currency_Code || '] ' ||
             Get_Currency_Name(t.Financing_Currency_Code) as Currency,
             to_char(t.Financing_Amount / Ln_Service.Get_Currency_Scale(t.Financing_Currency_Code),
                     Ln_Const.Masksum_2,
                     Ln_Const.Nls_Num_Char) as Financing_Amount,
             t.Loan_Line_Purpose,
             t.Under_Guarantee_Ruz
        from Ln_Credit_Sources t
       where t.Loan_Id = Iloan_Id;
    return result;
  end Get_Credit_Src_Refcursor;
  -------------------------------------------------------------------------------
  Function Get_Card_As_Refcursor
  (
    Iloan_Id     in Ln_Card.Loan_Id%type,
    Idate_Modify in varchar2
  ) return sys_refcursor is
    result        sys_refcursor;
    Vpercent_Rate varchar2(50);
    --     Vcond_Nik     Ln_s_Nik_Cond.Name%type;
    Vcond_Rci       varchar2(200);
    Vod             date := Setup.Get_Operday;
    v_Convert_Count number := 6;
  begin
    if Core_App_Version.c_Header_Code = 9055 then
      v_Convert_Count := 12;
    end if;
    Ln_Init.Set_Loan(Iloan_Id);
    begin
      select --+ index_desc (t LN_PERCENT_RATE_PK)t
       Ln_Service.Convert_Varchar(Nvl(t.Perc_Rate + Ln_Util.Get_Interest_Rate(t.Perc_Type), 0),
                                  v_Convert_Count)
      --to_char( nvl(t.PERC_RATE + ln_util.get_interest_rate(t.perc_type), 0), 'fm990.000000','NLS_NUMERIC_CHARACTERS=''. ''' )
        into Vpercent_Rate
        from Ln_Percent_Rate t
       where t.Loan_Id = Iloan_Id
         and t.Perc_Code_Desc = 'OSN'
         and Rownum = 1;
    exception
      when No_Data_Found then
        Vpercent_Rate := to_char(0, 'fm990.000000', 'NLS_NUMERIC_CHARACTERS=''. ''');
    end;
    Vcond_Rci := Ln_Rci_Api_Out.Get_Card_Cond_Name(Iloan_Id);
    /*begin
      select s.Name
        into Vcond_Nik
        from Ln_Nik_Card c, Ln_s_Nik_Cond s
       where Loan_Id = Iloan_Id
         and c.Cond_Nik = s.Code;
    exception
      when No_Data_Found then
        select name
          into Vcond_Nik
          from Ln_s_Nik_Cond
         where Code = 'N';
    end;*/
    if Idate_Modify is null then
      open result for
        select t.Loan_Id,
               t.Client_Code as Client_Code,
               Get_Client_Name(t.Client_Code, t.Filial_Code) as Client,
               t.Claim_Number,
               t.Loan_Number,
               '[' || t.Loan_Type || '] ' || Get_Credit_Type_Name(t.Loan_Type) as Loan_Type,
               t.Committee_Number,
               to_char(t.Date_Committee, Ln_Const.Maskdate) as Date_Committee,
               t.Contract_Code,
               to_char(t.Contract_Date, Ln_Const.Maskdate) as Contract_Date,
               t.Contract_Desc,
               t.Agr_Num_Notarial,
               to_char(t.Agr_Date_Notarial, Ln_Const.Maskdate) as Agr_Date_Notarial,
               t.Doc_Notarial_Num,
               to_char(t.Doc_Notarial_Date, Ln_Const.Maskdate) as Doc_Notarial_Date,
               t.Doc_Gover_Num,
               to_char(t.Doc_Gover_Date, Ln_Const.Maskdate) as Doc_Gover_Date,
               to_char(t.Open_Date, Ln_Const.Maskdate) as Open_Date,
               to_char(t.Close_Date, Ln_Const.Maskdate) as Close_Date,
               '[' || t.Currency || '] ' || Get_Currency_Name(t.Currency) as Currency,
               (select Char_Code
                  from v_Currency
                 where Code = t.Currency) as Currency_Char_Code,
               to_char(t.Summ_Loan / Ln_Service.Get_Currency_Scale(t.Currency),
                       Ln_Const.Masksum_2,
                       Ln_Const.Nls_Num_Char) as Summ_Loan,
               to_char(t.Summinitial / Ln_Service.Get_Currency_Scale(t.Currency),
                       Ln_Const.Masksum_2,
                       Ln_Const.Nls_Num_Char) as Summinitial,
               Nvl(t.Grace_Period, 0) as Grace_Period,
               '[' || t.Purpose_Loan || '] ' || Get_Loan_Purpose_Name(t.Purpose_Loan) as Purpose_Loan,
               '[' || t.Eco_Sec || '] ' || Get_Eco_Sector_Name(t.Eco_Sec) as Eco_Sec,
               '[' || t.Oked || '] ' || Ln_Util.Get_Oked_Name(t.Oked) as Oked,
               t.Object_Loan,
               t.Gov_Num,
               to_char(t.Gov_Date, Ln_Const.Maskdate) as Gov_Date,
               t.Manager_Name,
               to_char(t.Fc_Summ / Ln_Service.Get_Currency_Scale(t.Currency),
                       Ln_Const.Masksum_2,
                       Ln_Const.Nls_Num_Char) as Fc_Summ,
               t.Fc_Desc,
               (select name
                  from Ln_s_Form_Red
                 where Code = t.Form_Delivery) as Form_Delivery,
               (select name
                  from Ln_s_Form_Red
                 where Code = t.Form_Redemption) as Form_Redemption,
               (select name
                  from Ln_v_Cr_Cl_Guarant
                 where Code = t.Guar_Class) as Guar_Class,
               (select name
                  from Ln_v_Class_Credit
                 where Code = t.Class_Cred) as Class_Cred,
               (select name
                  from Ln_v_Credit_Class_Quality
                 where Code = t.Class_Quality) as Class_Quality,
               (select name
                  from Ln_v_Sign_Delivery
                 where Code = t.Sign_Delivery) as Sign_Delivery,
               Sign_Delivery as Sign_Delivery_Code,
               t.Days_In_Year,
               Get_Contract_Type(t.Card_Type) as Card_Type,
               t.Card_Type as Card_Type_Code,
               Decode(t.Card_Type,
                      Ln_Const.Ln_Leasing,
                      'Договор по лизингу',
                      Ln_Const.Ln_Factoring,
                      'Договор по факторингу',
                      'Кредитный договор') as Card_Type_Full,
               (select name
                  from Ln_v_Loan_Typeterm
                 where Code = t.Term_Loan_Type) as Term_Loan_Type,
               to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify,
               Employee.Get_Emp_Name(t.Emp_Code) as Emp_Name,
               Vpercent_Rate as Capital_Percent_Rate,
               t.Filial_Code,
               --t.Branch_Id,
               t.Local_Code,
               t.Founders,
               (select name
                  from Ln_v_Loan_Status
                 where Code = t.Condition) as Condition_Name,
               Dw_Util.Get_Doc_Id('LNCONTRACT', Iloan_Id, 'LNCLAIM') as Claim_Id,
               (select Get_Term_Type_Name(Urgency_Type) || ' - ' || s.Name
                  from v_Urgency s
                 where s.Code = t.Urgency_Type) as Urgency,
               (select count(*)
                  from Ln_Card_Admissions a
                 where a.Loan_Id = t.Loan_Id
                   and a.State_Id = 1) as Is_Send_Card_Admission,
               t.Product_Id,
               Ln_Util.Get_Product_Name(t.Product_Id) as Product_Name,
               Ln_Product_Util.Get_Group_Id(t.Product_Id) as Product_Group_Id,
               Nvl((select c.Card_Number
                     from Ln_Cca_Cards c
                    where c.Loan_Id = t.Loan_Id),
                   (select a.Card_Number
                      from Ln_Claim_Appendix a
                     where a.Claim_Id = t.Claim_Id)) as Card_Number,
               Nvl((select c.Sv_Contract_Id
                     from Ln_Cca_Cards c
                    where c.Loan_Id = t.Loan_Id),
                   (select o.Sv_Contract_Id
                      from Ln_Overdrafts o
                     where o.Loan_Id = t.Loan_Id)) as Sv_Contract_Id,
               Adm_Rep_Util.f_Sum(Ln_Overdraft.Get_Card_Balance(t.Loan_Id)) as Card_Balance,
               (select Adm_Rep_Util.f_Date(l.Date_Limit) || ' / ' ||
                       Adm_Rep_Util.f_Sum(l.Summ_Limit / 100) || ' - ' ||
                       Ln_Util.Get_Overdraft_Limit_State_Name(l.Condition)
                  from Ln_Overdraft_Limit l
                 where l.Loan_Id = t.Loan_Id
                   and l.Date_Limit <= Vod
                   and Rownum = 1) as Overdraft_Limit_Info,
               (select Loan_Uid
                  from Ln_Online_Cards
                 where Loan_Id = t.Loan_Id) as Loan_Uid,
               t.Loan_Type as Loan_Type_Code,
               t.Purpose_Loan as Purpose_Loan_Code,
               --Vcond_Nik as Cond_Niki,
               Vcond_Rci as Cond_Rci,
               (select Mlm.Cur_Nls(Label)
                  from Ln_s_References
                 where Object_Name = 'IS_ANNUITET'
                   and Code = Nvl((select value
                                    from Ln_Loan_Params
                                   where Loan_Id = t.Loan_Id
                                     and Object_Id = t.Loan_Id
                                     and Param_Id = 60
                                     and Rownum = 1),
                                  'N')) Graph_Calc_Type_Name,
               (select name
                  from Ln_Claim s, Ln_v_References Cc
                 where s.Claim_Id = t.Claim_Id
                   and Cc.Object_Name = 'CREATOR_CODE'
                   and Cc.Code = Nvl(s.Creator_Code, 'LN')) Creator_Name
          from Ln_Card t
         where t.Loan_Id = Iloan_Id;
    else
      open result for
        select t.Loan_Id,
               '[' || t.Client_Code || '] ' || Get_Client_Name(t.Client_Code, t.Filial_Code) as Client,
               t.Claim_Number,
               t.Loan_Number,
               '[' || t.Loan_Type || '] ' || Get_Credit_Type_Name(t.Loan_Type) as Loan_Type,
               t.Committee_Number,
               to_char(t.Date_Committee, Ln_Const.Maskdate) as Date_Committee,
               t.Contract_Code,
               to_char(t.Contract_Date, Ln_Const.Maskdate) as Contract_Date,
               t.Contract_Desc,
               t.Agr_Num_Notarial,
               to_char(t.Agr_Date_Notarial, Ln_Const.Maskdate) as Agr_Date_Notarial,
               t.Doc_Notarial_Num,
               to_char(t.Doc_Notarial_Date, Ln_Const.Maskdate) as Doc_Notarial_Date,
               t.Doc_Gover_Num,
               to_char(t.Doc_Gover_Date, Ln_Const.Maskdate) as Doc_Gover_Date,
               to_char(t.Open_Date, Ln_Const.Maskdate) as Open_Date,
               to_char(t.Close_Date, Ln_Const.Maskdate) as Close_Date,
               '[' || t.Currency || '] ' || Get_Currency_Name(t.Currency) as Currency,
               to_char(t.Summ_Loan / Ln_Service.Get_Currency_Scale(t.Currency),
                       Ln_Const.Masksum_2,
                       Ln_Const.Nls_Num_Char) as Summ_Loan,
               to_char(t.Summinitial / Ln_Service.Get_Currency_Scale(t.Currency),
                       Ln_Const.Masksum_2,
                       Ln_Const.Nls_Num_Char) as Summinitial,
               Nvl(t.Grace_Period, 0) as Grace_Period,
               '[' || t.Purpose_Loan || '] ' || Get_Loan_Purpose_Name(t.Purpose_Loan) as Purpose_Loan,
               '[' || t.Eco_Sec || '] ' || Get_Eco_Sector_Name(t.Eco_Sec) as Eco_Sec,
               '[' || t.Oked || '] ' || Ln_Util.Get_Oked_Name(t.Oked) as Oked,
               t.Object_Loan,
               t.Loan_Line_Num,
               '[' || t.Source_Cred || '] ' || Get_Credit_Source_Name(t.Source_Cred) as Source_Cred,
               t.Gov_Num,
               to_char(t.Gov_Date, Ln_Const.Maskdate) as Gov_Date,
               t.Manager_Name,
               to_char(t.Fc_Summ / Ln_Service.Get_Currency_Scale(t.Currency),
                       Ln_Const.Masksum_2,
                       Ln_Const.Nls_Num_Char) as Fc_Summ,
               t.Fc_Desc,
               (select name
                  from Ln_s_Form_Red
                 where Code = t.Form_Delivery) as Form_Delivery,
               (select name
                  from Ln_s_Form_Red
                 where Code = t.Form_Redemption) as Form_Redemption,
               (select name
                  from Ln_v_Cr_Cl_Guarant
                 where Code = t.Guar_Class) as Guar_Class,
               (select name
                  from Ln_v_Class_Credit
                 where Code = t.Class_Cred) as Class_Cred,
               (select name
                  from Ln_v_Credit_Class_Quality
                 where Code = t.Class_Quality) as Class_Quality,
               (select name
                  from Ln_v_Sign_Delivery
                 where Code = t.Sign_Delivery) as Sign_Delivery,
               Sign_Delivery as Sign_Delivery_Code,
               t.Days_In_Year,
               Get_Contract_Type(t.Card_Type) as Card_Type,
               Card_Type as Card_Type_Code,
               (select name
                  from Ln_v_Loan_Typeterm
                 where Code = t.Term_Loan_Type) as Term_Loan_Type,
               to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify,
               Employee.Get_Emp_Name(t.Emp_Code) as Emp_Name,
               t.Product_Id,
               Ln_Util.Get_Product_Name(t.Product_Id) as Product_Name,
               (select Loan_Uid
                  from Ln_Online_Cards
                 where Loan_Id = t.Loan_Id) as Loan_Uid,
               t.Loan_Type as Loan_Type_Code,
               t.Purpose_Loan as Purpose_Loan_Code,
               -- to do rci ni chiqarish
               --Vcond_Nik as Cond_Niki,
               Vcond_Rci as Cond_Rci,
               null Graph_Calc_Type_Name,
               (select name
                  from Ln_Claim s, Ln_v_References Cc
                 where s.Claim_Id = t.Claim_Id
                   and Cc.Object_Name = 'CREATOR_CODE'
                   and Cc.Code = Nvl(s.Creator_Code, 'LN')) Creator_Name
          from Ln_Card_His t
         where t.Loan_Id = Iloan_Id
           and to_char(t.Date_Modify, Ln_Const.Maskdatetime) = Idate_Modify;
    end if;
    return result;
  end Get_Card_As_Refcursor;
  -------------------------------------------------------------------------------
  Function Get_Claim_As_Refcursor(Iclaim_Id in Ln_Claim.Claim_Id%type) return sys_refcursor is
    result sys_refcursor;
  begin
    open result for
      select t.Claim_Id,
             t.Filial_Code,
             --t.Branch_Id,
             t.Local_Code,
             t.Claim_Num,
             to_char(t.Claim_Date, Ln_Const.Maskdate) as Claim_Date,
             '[' || t.Loan_Type || '] ' || Get_Credit_Type_Name(t.Loan_Type) as Loan_Type,
             Get_Contract_Type(t.Credit_Type) as Credit_Type,
             case
                when t.Client_Code is null then
                 t.Client_Name
                else
                 '[' || t.Client_Code || '] ' ||
                 Bank.Get_Client_Name(t.Client_Code, 'N', t.Filial_Code)
              end as Client,
             (select s.Name
                from v_Subject_Type s
               where s.Code = t.Client_Type) as Client_Type,
             '[' || t.Currency || '] ' || Get_Currency_Name(t.Currency) as Currency,
             '[' || t.Purpose_Loan || '] ' || Get_Loan_Purpose_Name(t.Purpose_Loan) as Purpose_Loan,
             '[' || t.Eco_Sec || '] ' || Get_Eco_Sector_Name(t.Eco_Sec) as Eco_Sec,
             '[' || t.Oked || '] ' || Ln_Util.Get_Oked_Name(t.Oked) as Oked,
             case
                when t.Begin_Date is null then
                 'дата не найдена'
                else
                 to_char(t.Begin_Date, Ln_Const.Maskdate)
              end as Begin_Date,
             case
                when t.Close_Date is null then
                 'дата не найдена'
                else
                 to_char(t.Close_Date, Ln_Const.Maskdate)
              end as Close_Date,
             '[' || t.Borrower || '] ' || Get_Borrower_Name(t.Borrower) as Borrower,
             Decode(t.Resident, 1, 'Резидент', 2, 'Не резидент') as Resident,
             t.Doc_Number,
             t.Inn,
             to_char(t.Date_Of_Birth, Ln_Const.Maskdate) as Date_Of_Birth,
             to_char(t.Doc_Reg_Date, Ln_Const.Maskdate) as Doc_Reg_Date,
             t.Doc_Reg_Place,
             t.Client_Address,
             t.Period_Use,
             to_char(t.Date_Modify, Ln_Const.Maskdatetime) as Date_Modify,
             Employee.Get_Emp_Name(t.Emp_Code) as Emp_Name,
             to_char(t.Summ_Claim / Ln_Service.Get_Currency_Scale(t.Currency),
                     Ln_Const.Masksum_2,
                     Ln_Const.Nls_Num_Char) as Summ_Claim,
             (select Char_Code
                from v_Currency
               where Code = t.Currency) as Currency_Char_Code,
             (select name
                from Ln_v_Claim_Status
               where Code = t.Status) as State_Name,
             t.Product_Id,
             Ln_Util.Get_Product_Name(t.Product_Id) as Product_Name,
             (select c.Card_Number
                from Ln_Claim_Appendix c
               where c.Claim_Id = t.Claim_Id) as Card_Number,
             --
             (select t.Stage_Id
                from Ln_Blanks t
               where t.Claim_Id = Iclaim_Id) as Stage_Id,
             --
             (select Mlm.Cur_Nls(name) name
                from Ln_s_Blank_Departments d
               where d.Department_Id = t.Product_Id) as Department_Name,
             --
             (select Mlm.Cur_Nls(name)
                from Ln_s_Blank_States Bs
               where Bs.State_Id in (select State_Id
                                       from Ln_Blanks t
                                      where t.Claim_Id = Iclaim_Id)) as Blank_State_Name,
             --
             (select Ln_Service.Get_Loan_Condition_Name(Ca.Condition)
                from Ln_Card Ca
               where Ca.Claim_Id = Iclaim_Id) Loan_Condition_Name,
             --
             (select Mlm.Cur_Nls(name)
                from Ln_s_Blank_Levels
               where Level_Id in (select Level_Id
                                    from Ln_Blanks t
                                   where t.Claim_Id = Iclaim_Id)) as Level_Name,
             --
             (select Mlm.Cur_Nls(name)
                from Ln_s_Blank_Levels
               where Level_Id in (select Prev_Level_Id
                                    from Ln_Blanks t
                                   where t.Claim_Id = Iclaim_Id)) as Prev_Level_Name,
             --
             (select name
                from Ln_v_References
               where Object_Name = 'CREATOR_CODE'
                 and Code = Nvl(t.Creator_Code, 'LN')) Creator_Name
      --
        from Ln_Claim t
       where t.Claim_Id = Iclaim_Id;
    return result;
  end Get_Claim_As_Refcursor;
  -------------------------------------------------------------------------------
  Function Get_Param_Group_Access_List(Irole_Code in number) return Ln_Setting.Param_Group_Nt
    pipelined is
    Vresult Ln_Setting.Param_Group_Nt;
  begin
    Vresult := Ln_Setting.Get_Param_Group_Access_List(Irole_Code => Irole_Code);
    for i in 1 .. Vresult.Count()
    loop
      pipe row(Vresult(i));
    end loop;
  end Get_Param_Group_Access_List;
  -------------------------------------------------------------------------------
  Procedure Set_Access_To_Param_Groups
  (
    Irole_Code    in integer,
    Iparam_Groups in Array_Varchar2
  ) is
  begin
    Ln_Setting.Set_Access_To_Param_Groups(Irole_Code, Iparam_Groups);
  end Set_Access_To_Param_Groups;
  -------------------------------------------------------------------------------
  Function Get_Urgency_Options_Html
  (
    Idate_Begin in date,
    Idate_End   in date
  ) return varchar2 is
    result varchar2(3000);
  begin
    if Idate_Begin is null or Idate_End is null then
      return null;
    end if;
  
    for Urgency in (select t.Code,
                           Ln_Api.Get_Term_Type_Name(Urgency_Type) || ' - ' || t.Name as name
                      from v_Urgency t
                    --where floor(abs( iDate_End - iDate_Begin )/30) between t.BEGIN_INTERVAL and t.END_INTERVAL
                     where Months_Between(Idate_End, Idate_Begin) between t.Begin_Interval and
                           t.End_Interval)
    loop
      result := result || '<option value="' || Urgency.Code || '">' || Urgency.Name;
    end loop;
  
    return result;
  end Get_Urgency_Options_Html;
  -------------------------------------------------------------------------------
  Function Get_Guarantee_Options_Html(Iclass_Quality in v_Credit_Class_Quality.Code%type)
    return varchar2 is
    result varchar2(3000);
  begin
    if Iclass_Quality is null then
      return null;
    end if;
  
    for Guarantee in (select t.Code,
                             (select s.Name
                                from v_Cr_Cl_Guarant s
                               where s.Code = t.Code) name
                        from v_Credit_Conform t
                       where t.Kod_Class_o = Iclass_Quality
                      
                      union all
                      
                      select t.Code, t.Name
                        from v_Cr_Cl_Guarant t
                       where Iclass_Quality not in (select s.Kod_Class_o
                                                      from v_Credit_Conform s))
    loop
      result := result || '<option value="' || Guarantee.Code || '">' || Guarantee.Name;
    end loop;
  
    return result;
  end Get_Guarantee_Options_Html;
  -------------------------------------------------------------------------------
  Function Get_Loan_Id(Iclaim_Id in Ln_Claim.Claim_Id%type) return Ln_Card.Loan_Id%type is
  begin
    return Ln_Contract.Get_Loan_Id(Iclaim_Id);
  end Get_Loan_Id;
  -------------------------------------------------------------------------------
  Function Get_Loan_State(Iclaim_Id in Ln_Claim.Claim_Id%type) return integer is
  begin
    return Ln_Contract.Get_Loan_State(Iclaim_Id);
  end Get_Loan_State;
  -------------------------------------------------------------------------------
  Procedure Set_Sign_Ebrd(Iloans_Ids in Array_Number) is
  begin
    Ln_Contract.Set_Sign_Ebrd(Iloans_Ids);
  end Set_Sign_Ebrd;
  -------------------------------------------------------------------------------
  Function Is_Hamkor_Bank return varchar2 is
    result varchar2(1) := 'N';
  begin
    if Ln_Contract.Is_Hamkor_Bank() then
      result := 'Y';
    end if;
  
    return result;
  end Is_Hamkor_Bank;
  -------------------------------------------------------------------------------
  Function Get_Sys_Param
  (
    Iset_Error   in varchar2,
    Icode        in Ln_Params.Code%type,
    Ifilial_Code in Ln_Params.Filial_Code%type := Setup.Get_Headermfo
  ) return Ln_Params.Value%type is
    result Ln_Params.Value%type;
  begin
    if (Iset_Error = 'N') then
      begin
        result := Ln_Setting.Get_Sys_Param(Icode, Ifilial_Code);
      exception
        when others then
          result := null;
      end;
    else
      result := Ln_Setting.Get_Sys_Param(Icode, Ifilial_Code);
    end if;
    return result;
  end Get_Sys_Param;
  -------------------------------------------------------------------------------
  Procedure Add_Commission
  (
    Imin_Summ       in number,
    Imax_Summ       in number,
    Icommission_Sum in number,
    Isum_Type       in varchar2
  ) is
  begin
    Ln_Commission.Add_Commission(Imin_Summ, Imax_Summ, Icommission_Sum, Isum_Type);
  end Add_Commission;

  ---------------------------------------------------------------------------------------------
  Procedure Edit_Commission
  (
    Imin_Summ       in number,
    Imax_Summ       in number,
    Icommission_Sum in number,
    Isum_Type       in varchar2,
    Inum_Row        in number
  ) is
  begin
    Ln_Commission.Edit_Commission(Imin_Summ, Imax_Summ, Icommission_Sum, Isum_Type, Inum_Row);
  end Edit_Commission;
  ---------------------------------------------------------------------------------------------
  Procedure Delete_Commission(Inum_Row in number) is
  begin
    Ln_Commission.Delete_Commission(Inum_Row);
  end Delete_Commission;
  ---------------------------------------------------------------------------------------------
  Function Model_Loan_Conversion(Request Hashtable) return varchar2 is
    v_Form            j_Hash := j_Hash();
    v_Data            j_Hash := j_Hash();
    v_Loan_Id         Ln_Card.Loan_Id%type;
    v_Conversion_Date j_Array := j_Array();
    v_Amount          j_Array := j_Array();
    v_Param           Ln_Loan_Params%rowtype;
  begin
    v_Loan_Id := Request.Get_Optional_Number('loanId');
    select t.*
      into v_Param
      from Ln_Loan_Params t, Ln_s_Loan_Params p
     where t.Loan_Id = v_Loan_Id
       and t.Param_Id = p.Id
       and p.Object_Code = 'CONVERSION'
       and p.Code = 'CONVERSION_YN'
       and Rownum = 1;
    for r in (select *
                from Ln_Loan_Conversions
               where Loan_Id = v_Loan_Id
               order by Conversion_Date)
    loop
      v_Conversion_Date.Push(to_char(r.Conversion_Date, 'dd.mm.yyyy'));
      v_Amount.Push(to_char(r.Amount));
    end loop;
    if v_Conversion_Date.Count = 0 then
      v_Param.Value := 'N';
    end if;
    v_Form.Put('conversion_date', v_Conversion_Date);
    v_Form.Put('amount', v_Amount);
    v_Form.Put('loan_conversion_yn', v_Param.Value);
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  exception
    when No_Data_Found then
      v_Form := j_Hash();
      v_Data := j_Hash();
      v_Form.Put('loan_conversion_yn', 'N');
      v_Data.Put('fm', v_Form);
      return v_Data.To_String;
  end Model_Loan_Conversion;
  ---------------------------------------------------------------------------------------------
  Procedure Save_Loan_Conversion(Request Hashtable) is
    v_Loan_Id         Ln_Loan_Conversions.Loan_Id%type;
    v_Conversion_Date Array_Date;
    v_Amount          Array_Number;
    v_Conversion_Yn   varchar2(1);
  begin
    v_Loan_Id         := Request.Get_Number('loan_id');
    v_Conversion_Date := Request.Get_Optional_Array_Date('conversion_date', 'dd.mm.yyyy');
    v_Amount          := Request.Get_Optional_Array_Number('amount');
    v_Conversion_Yn   := Request.Get_Varchar2('loan_conversion_yn');
    Ln_Contract.Save_Loan_Conversion(v_Loan_Id, v_Conversion_Yn, v_Conversion_Date, v_Amount);
  end Save_Loan_Conversion;
  ---------------------------------------------------------------------------------------------
  Procedure Save_Acc_Layout_Temlates(Request Hashtable) is
  begin
    if Setup.Get_Filial_Code <> Setup.Get_Headermfo then
      Raise_Application_Error(-20000, 'Нет доступа филиала');
    end if;
    --
    Ln_Setting.Save_Acc_Layout_Temlates(Request.Get_Number('main_acc_type_id'),
                                        Request.Get_Varchar2('main_bls'),
                                        Request.Get_Optional_Array_Number('acc_type'),
                                        Request.Get_Optional_Array_Varchar2('acc_code'),
                                        Request.Get_Optional_Array_Varchar2('is_mandatory'));
  end Save_Acc_Layout_Temlates;
  ---------------------------------------------------------------------------------------------
  Function Model_Acc_Layout_Temlates(Request Hashtable) return varchar2 is
    v_Form          j_Hash := j_Hash();
    v_Data          j_Hash := j_Hash();
    v_Acc_Type      j_Array := j_Array();
    v_Acc_Type_Name j_Array := j_Array();
    v_Acc           j_Array := j_Array();
    v_Is_Mandatory  j_Array := j_Array();
    v_Main_Acc      Ln_s_Loan_Type_Account.Code%type;
    v_Main_Bls      varchar2(5);
  begin
    v_Main_Acc := Request.Get_Number('main_acc_type_id');
    v_Main_Bls := Request.Get_Varchar2('main_bls');
    for r in (select *
                from Ln_Account_Layout_Templates
               where Main_Acc_Type_Id = v_Main_Acc
                 and Main_Bls = v_Main_Bls
                 and Main_Acc_Type_Id != Account_Type_Id)
    loop
      v_Acc_Type.Push(r.Account_Type_Id);
      v_Acc_Type_Name.Push(Ln_Acc.Get_Name_Type_Account(r.Account_Type_Id));
      v_Acc.Push(r.Account);
      v_Is_Mandatory.Push(r.Is_Mandatory);
    end loop;
    v_Form.Put('acc_type', v_Acc_Type);
    v_Form.Put('acc_type_name', v_Acc_Type_Name);
    v_Form.Put('acc_code', v_Acc);
    v_Form.Put('is_mandatory', v_Is_Mandatory);
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  end Model_Acc_Layout_Temlates;
  ---------------------------------------------------------------------------------------------------
  Function Model_Graph_Revenue(Request Hashtable) return varchar2 is
    v_Data          j_Hash := j_Hash();
    v_Form          j_Hash := j_Hash();
    v_Date_Revenues j_Array := j_Array();
    v_Amounts       j_Array := j_Array();
  begin
    for r in (select *
                from Ln_Graph_Revenue
               where Loan_Id = Request.Get_Number('loanId'))
    loop
      v_Date_Revenues.Push(to_char(r.Date_Revenue, 'dd.mm.yyyy'));
      v_Amounts.Push(r.Amount);
    end loop;
    v_Form.Put('date_revenue', v_Date_Revenues);
    v_Form.Put('amount', v_Amounts);
    v_Data.Put('fm', v_Form);
    return v_Data.To_String;
  end Model_Graph_Revenue;
  ---------------------------------------------------------------------------------------------
  Procedure Save_Graph_Revenue(Request Hashtable) is
  begin
    Ln_Contract.Save_Graph_Revenue(Request.Get_Number('loan_id'),
                                   Request.Get_Optional_Array_Date('date_revenue', 'dd.mm.yyyy'),
                                   Request.Get_Optional_Array_Number('amount'));
  end Save_Graph_Revenue;
  ---------------------------------------------------------------------------------------------
  Function Model_Bio_Passport_Series return varchar2 is
    result         j_Array := j_Array();
    v_Param_Values Array_Varchar2;
  begin
    v_Param_Values := Ln_Setting.Get_Sys_Param_Value_List(Icode        => 'BIO_PASSPORT_SERIES',
                                                          Ifilial_Code => Setup.Get_Headermfo);
    for i in 1 .. v_Param_Values.Count
    loop
      Result.Push(v_Param_Values(i));
    end loop;
    return Result.To_String;
  end Model_Bio_Passport_Series;
  ---------------------------------------------------------------------------------------------
  Function Check_Loan_Purpose(i_Code varchar2) return varchar2 is
    v_Client_Type  Ln_Claim.Client_Type%type;
    v_Loan_Type    Ln_Claim.Loan_Type%type;
    v_Param_Name   Ln_Param_Defs.Code%type;
    v_Param_Values Array_Varchar2 := Array_Varchar2();
    v_Dummy        pls_integer;
    v_Product      Hashtable := Ln_Init.Get_Product;
    v_Prd_Purposes Array_Varchar2 := Array_Varchar2();
  begin
    v_Client_Type := User_Session.Get_Varchar2('ln_client_type');
    v_Loan_Type   := User_Session.Get_Varchar2('ln_loan_type');
    --
    select count(*)
      into v_Dummy
      from Ln_s_Purpose_With_Loan_Type t
     where t.Loan_Type = v_Loan_Type
       and t.Purpose_Code = i_Code;
    if v_Dummy = 0 then
      return null;
    end if;
    if v_Client_Type = Ln_Const.Physical_Person then
      v_Param_Name := 'PURPOSE_LOAN_FOR_PHYS';
    elsif v_Client_Type = Ln_Const.Juridical_Person then
      v_Param_Name := 'PURPOSE_LOAN_FOR_JUR';
    else
      v_Param_Name := 'PURPOSE_LOAN_FOR_IND';
    end if;
    v_Param_Values := Ln_Setting.Get_Sys_Param_Value_List(v_Param_Name, Setup.Get_Headermfo);
    if Ln_Service.Is_Array_Value(Iarray => v_Param_Values, Ivalue => i_Code) then
      if Ln_Init.Is_Product then
        v_Prd_Purposes := Ln_Product.Check_Array_Varchar2(v_Product, 'PURPOSE_CODE');
        if v_Prd_Purposes.Count = 0 then
          v_Prd_Purposes := Array_Varchar2('ALL');
        end if;
        if not Ln_Service.Is_Array_Value(v_Prd_Purposes, i_Code) then
          return null;
        end if;
      end if;
      return i_Code;
    end if;
    return null;
  end Check_Loan_Purpose;
  ---------------------------------------------------------------------------------------------
  Function Check_Loan_Type(i_Code varchar2) return varchar2 is
    v_Client_Type    Ln_Claim.Client_Type%type;
    v_Param_Name     Ln_Param_Defs.Code%type;
    v_Param_Values   Array_Varchar2 := Array_Varchar2();
    v_Product        Hashtable := Ln_Init.Get_Product;
    v_Prd_Loan_Types Array_Varchar2 := Array_Varchar2();
  begin
    v_Client_Type := User_Session.Get_Varchar2('ln_client_type');
    if v_Client_Type = Ln_Const.Physical_Person then
      v_Param_Name := 'LOAN_TYPES_FOR_PHYS';
    elsif v_Client_Type = Ln_Const.Juridical_Person then
      v_Param_Name := 'LOAN_TYPES_FOR_JUR';
    else
      v_Param_Name := 'LOAN_TYPES_FOR_IND';
    end if;
    v_Param_Values := Ln_Setting.Get_Sys_Param_Value_List(Icode        => v_Param_Name,
                                                          Ifilial_Code => Setup.Get_Headermfo);
    if Ln_Service.Is_Array_Value(v_Param_Values, i_Code) then
      if Ln_Init.Is_Product then
        v_Prd_Loan_Types := v_Product.Get_Array_Varchar2('LOAN_TYPE_CODE');
        if not Ln_Service.Is_Array_Value(v_Prd_Loan_Types, i_Code) then
          return null;
        end if;
      end if;
      return i_Code;
    end if;
    return null;
  end Check_Loan_Type;
  ---------------------------------------------------------------------------------------------
  Function Check_Credit_Source(i_Code varchar2) return varchar2 is
    v_Client_Type  Ln_Claim.Client_Type%type;
    v_Param_Name   Ln_Param_Defs.Code%type;
    v_Param_Values Array_Varchar2 := Array_Varchar2();
  begin
    v_Client_Type := User_Session.Get_Varchar2('ln_client_type');
    if v_Client_Type = Ln_Const.Physical_Person then
      v_Param_Name := 'CREDIT_SOURCE_FOR_PHYS';
    elsif v_Client_Type = Ln_Const.Juridical_Person then
      v_Param_Name := 'CREDIT_SOURCE_FOR_JUR';
    else
      v_Param_Name := 'CREDIT_SOURCE_FOR_IND';
    end if;
    v_Param_Values := Ln_Setting.Get_Sys_Param_Value_List(v_Param_Name, Setup.Get_Headermfo);
    if Ln_Service.Is_Array_Value(Iarray => v_Param_Values, Ivalue => i_Code) then
      return i_Code;
    end if;
    return null;
  end Check_Credit_Source;
  ---------------------------------------------------------------------------------------------
  Function Check_Eco_Sector(i_Code varchar2) return varchar2 is
    v_Client_Type Ln_Claim.Client_Type%type;
    result        Ln_Claim.Eco_Sec%type;
    v_Product     Hashtable := Ln_Init.Get_Product;
    v_Prd_Eco_Sec Array_Varchar2 := Array_Varchar2();
  begin
    v_Client_Type := User_Session.Get_Varchar2('ln_client_type');
    if v_Client_Type is null then
      result := i_Code;
    end if;
    if Ln_Service.Is_Array_Value(Ln_Setting.Get_Sys_Param_Value_List('ECO_SECTORS_FOR_PHYS',
                                                                     Setup.Get_Headermfo),
                                 i_Code) then
      if v_Client_Type = Ln_Const.Physical_Person then
        result := i_Code;
      else
        result := null;
      end if;
    else
      if v_Client_Type = Ln_Const.Physical_Person then
        result := null;
      else
        result := i_Code;
      end if;
    end if;
    if Ln_Init.Is_Product then
      v_Prd_Eco_Sec := Ln_Product.Check_Array_Varchar2(v_Product, 'ECO_SEC_CODE');
      if v_Prd_Eco_Sec.Count = 0 then
        v_Prd_Eco_Sec := Array_Varchar2('ALL');
      end if;
      if result is not null and not Ln_Service.Is_Array_Value(v_Prd_Eco_Sec, result) then
        return null;
      end if;
    end if;
    return result;
  end Check_Eco_Sector;
  ---------------------------------------------------------------------------------------------
  --Цел кредитларни Выд кредитлар билан боглаш
  Procedure Save_Purpose_With_Loan_Type(Request Hashtable) is
    v_Loan_Type     Ln_Card.Loan_Type%type;
    v_Purpose_Codes Array_Varchar2;
  begin
    if Setup.Is_Headerlevel = 'N' then
      Raise_Application_Error(-20000, 'Нет доступа филиала!');
    end if;
    v_Loan_Type     := Request.Get_Varchar2('loan_type');
    v_Purpose_Codes := Request.Get_Optional_Array_Varchar2('purpose_code');
    if not Request.Has('purpose_code') then
      v_Purpose_Codes := Array_Varchar2();
    end if;
    Ln_Kernel.Save_Purpose_With_Loan_Type(i_Loan_Type     => v_Loan_Type,
                                          i_Purpose_Codes => v_Purpose_Codes);
  end Save_Purpose_With_Loan_Type;
  ---------------------------------------------------------------------------------------------
  --Цел кредит Выд кредитга бокланган болса 1 кайтади акс холда 0 кайтади
  Function Is_Purpose_With_Loan_Type(i_Purpose_Code varchar2) return varchar2 is
    result      pls_integer;
    v_Loan_Type Ln_Card.Loan_Type%type;
  begin
    v_Loan_Type := User_Session.Get_Varchar2('loan_type_code');
    select count(*)
      into result
      from Ln_s_Purpose_With_Loan_Type
     where Loan_Type = v_Loan_Type
       and Purpose_Code = i_Purpose_Code;
    return result;
  end Is_Purpose_With_Loan_Type;
  ---------------------------------------------------------------------------------------------
  Procedure Set_Subsystem(i_Module_Code varchar2) is
  begin
    Ln_Init.Set_Subsystem(i_Module_Code);
  end Set_Subsystem;
  ---------------------------------------------------------------------------------------------
  Function Get_Acc_Subcoa_Code(Pacc_Code in Accounts.Code%type) return Accounts.Subcoa_Code%type is
    result Accounts.Subcoa_Code%type;
  begin
    if Pacc_Code is null then
      return null;
    end if;
  
    select Subcoa_Code
      into result
      from Accounts a
     where a.Code = Pacc_Code;
    return result;
  exception
    when No_Data_Found then
      return null;
  end Get_Acc_Subcoa_Code;
  ---------------------------------------------------------------------------------------------
  Function Is_Client_Unique return varchar2 is
  begin
    $IF CORE_APP_VERSION.C_CLIENT_UNIQUE $THEN
    return 'Y';
    $END
    return 'N';
  end Is_Client_Unique;
  ---------------------------------------------------------------------------------------------
  Function Has_Account_Type_In_Card(i_Loan_Id number) return number is
  begin
    return Ln_Gui.Has_Account_Type_In_Card(i_Loan_Id);
  end Has_Account_Type_In_Card;
  ---------------------------------------------------------------------------------------------
  Function Is_Between_Acc_Saldo_In_Card(i_Loan_Id number) return number is
  begin
    return Ln_Gui.Is_Between_Acc_Saldo_In_Card(i_Loan_Id);
  end Is_Between_Acc_Saldo_In_Card;
  ---------------------------------------------------------------------------------------------
end Ln_Api;
/
